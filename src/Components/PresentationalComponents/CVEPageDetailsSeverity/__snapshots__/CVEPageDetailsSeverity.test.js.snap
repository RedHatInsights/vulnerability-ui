// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CVEPageDetailsSeverity component should render where impact value is Critial 1`] = `
<injectIntl(CVEPageDetailsSeverity)
  impact="Critical"
>
  <CVEPageDetailsSeverity
    impact="Critical"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <Component
      hasGutter={true}
    >
      <div
        className="pf-l-stack pf-m-gutter"
      >
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionContent={
                <Popover
                  appendTo={[Function]}
                  aria-label=""
                  bodyContent={
                    <Unknown>
                      <Unknown
                        component="p"
                      >
                        This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker
            and lead to system compromise (arbitrary code execution) without requiring user interaction.
            These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated
            remote user, a local user, or an unlikely configuration are not classed as Critical severity.
                      </Unknown>
                    </Unknown>
                  }
                  boundary="window"
                  className=""
                  closeBtnAriaLabel="Close"
                  distance={25}
                  enableFlip={true}
                  flipBehavior={
                    Array [
                      "top",
                      "right",
                      "bottom",
                      "left",
                      "top",
                      "right",
                      "bottom",
                    ]
                  }
                  footerContent={
                    <a
                      href="https://access.redhat.com/security/updates/classification/"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      Learn more about security ratings
                        
                      <ExternalLinkAltIcon
                        color="currentColor"
                        noVerticalAlign={false}
                        size="sm"
                      />
                    </a>
                  }
                  headerContent={
                    <div>
                      Critical severity
                    </div>
                  }
                  hideOnOutsideClick={true}
                  isVisible={null}
                  maxWidth="calc(1rem + 1rem + 18.75rem)"
                  onHidden={[Function]}
                  onHide={[Function]}
                  onMount={[Function]}
                  onShow={[Function]}
                  onShown={[Function]}
                  position="bottom"
                  shouldClose={[Function]}
                  tippyProps={Object {}}
                  zIndex={9999}
                >
                  <a>
                    Learn more
                  </a>
                </Popover>
              }
              descriptionTitle="Critical severity"
              titleColor="severity-critical"
              titleContent={
                <SecurityIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="lg"
                />
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionTitle="CVSS 3.0 base score"
              titleContent={
                <Unknown>
                  <Unknown
                    component="h3"
                  >
                    <Tooltip
                      appendTo={[Function]}
                      aria="describedby"
                      boundary="window"
                      className=""
                      content="CVEs published before 2005 (approximately) did not have a CVSS Base Score."
                      distance={15}
                      enableFlip={true}
                      entryDelay={500}
                      exitDelay={500}
                      flipBehavior={
                        Array [
                          "top",
                          "right",
                          "bottom",
                          "left",
                          "top",
                          "right",
                          "bottom",
                        ]
                      }
                      id=""
                      isAppLauncher={false}
                      isContentLeftAligned={false}
                      isVisible={false}
                      maxWidth="18.75rem"
                      position="left"
                      tippyProps={Object {}}
                      trigger="mouseenter focus"
                      zIndex={9999}
                    >
                      <span>
                        N/A
                      </span>
                    </Tooltip>
                  </Unknown>
                </Unknown>
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <injectIntl(CvssVector)>
              <CvssVector
                intl={
                  Object {
                    "defaultFormats": Object {},
                    "defaultLocale": "en",
                    "formatDate": [Function],
                    "formatDateToParts": [Function],
                    "formatDisplayName": [Function],
                    "formatList": [Function],
                    "formatMessage": [Function],
                    "formatNumber": [Function],
                    "formatNumberToParts": [Function],
                    "formatPlural": [Function],
                    "formatRelativeTime": [Function],
                    "formatTime": [Function],
                    "formatTimeToParts": [Function],
                    "formats": Object {},
                    "formatters": Object {
                      "getDateTimeFormat": [Function],
                      "getDisplayNames": [Function],
                      "getListFormat": [Function],
                      "getMessageFormat": [Function],
                      "getNumberFormat": [Function],
                      "getPluralRules": [Function],
                      "getRelativeTimeFormat": [Function],
                    },
                    "locale": "en",
                    "messages": Object {
                      "default.cancel": "Cancel",
                      "default.delete": "Delete",
                      "default.remove": "Remove",
                      "default.save": "Save",
                    },
                    "onError": [Function],
                    "textComponent": Symbol(react.fragment),
                    "timeZone": undefined,
                    "wrapRichTextChunksInFragment": undefined,
                  }
                }
              >
                <Component>
                  <div
                    className="pf-c-content"
                  >
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                  </div>
                </Component>
              </CvssVector>
            </injectIntl(CvssVector)>
          </div>
        </Component>
      </div>
    </Component>
  </CVEPageDetailsSeverity>
</injectIntl(CVEPageDetailsSeverity)>
`;

exports[`CVEPageDetailsSeverity component should render where impact value is undefined 1`] = `
<injectIntl(CVEPageDetailsSeverity)>
  <CVEPageDetailsSeverity
    impact="Unknown"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <Component
      hasGutter={true}
    >
      <div
        className="pf-l-stack pf-m-gutter"
      >
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionContent={
                <Popover
                  appendTo={[Function]}
                  aria-label=""
                  bodyContent={
                    <Unknown>
                      <Unknown
                        component="p"
                      >
                        
                      </Unknown>
                    </Unknown>
                  }
                  boundary="window"
                  className=""
                  closeBtnAriaLabel="Close"
                  distance={25}
                  enableFlip={true}
                  flipBehavior={
                    Array [
                      "top",
                      "right",
                      "bottom",
                      "left",
                      "top",
                      "right",
                      "bottom",
                    ]
                  }
                  footerContent={
                    <a
                      href="https://access.redhat.com/security/updates/classification/"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      Learn more about security ratings
                        
                      <ExternalLinkAltIcon
                        color="currentColor"
                        noVerticalAlign={false}
                        size="sm"
                      />
                    </a>
                  }
                  headerContent={
                    <div>
                      Unknown severity
                    </div>
                  }
                  hideOnOutsideClick={true}
                  isVisible={null}
                  maxWidth="calc(1rem + 1rem + 18.75rem)"
                  onHidden={[Function]}
                  onHide={[Function]}
                  onMount={[Function]}
                  onShow={[Function]}
                  onShown={[Function]}
                  position="bottom"
                  shouldClose={[Function]}
                  tippyProps={Object {}}
                  zIndex={9999}
                >
                  <a>
                    Learn more
                  </a>
                </Popover>
              }
              descriptionTitle="Unknown severity"
              titleColor="severity-unknown"
              titleContent={
                <UnknownIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="lg"
                />
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionTitle="CVSS 3.0 base score"
              titleContent={
                <Unknown>
                  <Unknown
                    component="h3"
                  >
                    <Tooltip
                      appendTo={[Function]}
                      aria="describedby"
                      boundary="window"
                      className=""
                      content="CVEs published before 2005 (approximately) did not have a CVSS Base Score."
                      distance={15}
                      enableFlip={true}
                      entryDelay={500}
                      exitDelay={500}
                      flipBehavior={
                        Array [
                          "top",
                          "right",
                          "bottom",
                          "left",
                          "top",
                          "right",
                          "bottom",
                        ]
                      }
                      id=""
                      isAppLauncher={false}
                      isContentLeftAligned={false}
                      isVisible={false}
                      maxWidth="18.75rem"
                      position="left"
                      tippyProps={Object {}}
                      trigger="mouseenter focus"
                      zIndex={9999}
                    >
                      <span>
                        N/A
                      </span>
                    </Tooltip>
                  </Unknown>
                </Unknown>
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <injectIntl(CvssVector)>
              <CvssVector
                intl={
                  Object {
                    "defaultFormats": Object {},
                    "defaultLocale": "en",
                    "formatDate": [Function],
                    "formatDateToParts": [Function],
                    "formatDisplayName": [Function],
                    "formatList": [Function],
                    "formatMessage": [Function],
                    "formatNumber": [Function],
                    "formatNumberToParts": [Function],
                    "formatPlural": [Function],
                    "formatRelativeTime": [Function],
                    "formatTime": [Function],
                    "formatTimeToParts": [Function],
                    "formats": Object {},
                    "formatters": Object {
                      "getDateTimeFormat": [Function],
                      "getDisplayNames": [Function],
                      "getListFormat": [Function],
                      "getMessageFormat": [Function],
                      "getNumberFormat": [Function],
                      "getPluralRules": [Function],
                      "getRelativeTimeFormat": [Function],
                    },
                    "locale": "en",
                    "messages": Object {
                      "default.cancel": "Cancel",
                      "default.delete": "Delete",
                      "default.remove": "Remove",
                      "default.save": "Save",
                    },
                    "onError": [Function],
                    "textComponent": Symbol(react.fragment),
                    "timeZone": undefined,
                    "wrapRichTextChunksInFragment": undefined,
                  }
                }
              >
                <Component>
                  <div
                    className="pf-c-content"
                  >
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                  </div>
                </Component>
              </CvssVector>
            </injectIntl(CvssVector)>
          </div>
        </Component>
      </div>
    </Component>
  </CVEPageDetailsSeverity>
</injectIntl(CVEPageDetailsSeverity)>
`;

exports[`CVEPageDetailsSeverity component should render without props 1`] = `
<injectIntl(CVEPageDetailsSeverity)>
  <CVEPageDetailsSeverity
    impact="Unknown"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <Component
      hasGutter={true}
    >
      <div
        className="pf-l-stack pf-m-gutter"
      >
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionContent={
                <Popover
                  appendTo={[Function]}
                  aria-label=""
                  bodyContent={
                    <Unknown>
                      <Unknown
                        component="p"
                      >
                        
                      </Unknown>
                    </Unknown>
                  }
                  boundary="window"
                  className=""
                  closeBtnAriaLabel="Close"
                  distance={25}
                  enableFlip={true}
                  flipBehavior={
                    Array [
                      "top",
                      "right",
                      "bottom",
                      "left",
                      "top",
                      "right",
                      "bottom",
                    ]
                  }
                  footerContent={
                    <a
                      href="https://access.redhat.com/security/updates/classification/"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      Learn more about security ratings
                        
                      <ExternalLinkAltIcon
                        color="currentColor"
                        noVerticalAlign={false}
                        size="sm"
                      />
                    </a>
                  }
                  headerContent={
                    <div>
                      Unknown severity
                    </div>
                  }
                  hideOnOutsideClick={true}
                  isVisible={null}
                  maxWidth="calc(1rem + 1rem + 18.75rem)"
                  onHidden={[Function]}
                  onHide={[Function]}
                  onMount={[Function]}
                  onShow={[Function]}
                  onShown={[Function]}
                  position="bottom"
                  shouldClose={[Function]}
                  tippyProps={Object {}}
                  zIndex={9999}
                >
                  <a>
                    Learn more
                  </a>
                </Popover>
              }
              descriptionTitle="Unknown severity"
              titleColor="severity-unknown"
              titleContent={
                <UnknownIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="lg"
                />
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <CVEInfoBox
              descriptionTitle="CVSS 3.0 base score"
              titleContent={
                <Unknown>
                  <Unknown
                    component="h3"
                  >
                    <Tooltip
                      appendTo={[Function]}
                      aria="describedby"
                      boundary="window"
                      className=""
                      content="CVEs published before 2005 (approximately) did not have a CVSS Base Score."
                      distance={15}
                      enableFlip={true}
                      entryDelay={500}
                      exitDelay={500}
                      flipBehavior={
                        Array [
                          "top",
                          "right",
                          "bottom",
                          "left",
                          "top",
                          "right",
                          "bottom",
                        ]
                      }
                      id=""
                      isAppLauncher={false}
                      isContentLeftAligned={false}
                      isVisible={false}
                      maxWidth="18.75rem"
                      position="left"
                      tippyProps={Object {}}
                      trigger="mouseenter focus"
                      zIndex={9999}
                    >
                      <span>
                        N/A
                      </span>
                    </Tooltip>
                  </Unknown>
                </Unknown>
              }
            >
              <Component
                className="infobox-square"
                hasGutter={true}
              >
                <div
                  className="pf-l-split pf-m-gutter infobox-square"
                >
                  <WithLoader
                    loading={true}
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </Component>
            </CVEInfoBox>
          </div>
        </Component>
        <Component>
          <div
            className="pf-l-stack__item"
          >
            <injectIntl(CvssVector)>
              <CvssVector
                intl={
                  Object {
                    "defaultFormats": Object {},
                    "defaultLocale": "en",
                    "formatDate": [Function],
                    "formatDateToParts": [Function],
                    "formatDisplayName": [Function],
                    "formatList": [Function],
                    "formatMessage": [Function],
                    "formatNumber": [Function],
                    "formatNumberToParts": [Function],
                    "formatPlural": [Function],
                    "formatRelativeTime": [Function],
                    "formatTime": [Function],
                    "formatTimeToParts": [Function],
                    "formats": Object {},
                    "formatters": Object {
                      "getDateTimeFormat": [Function],
                      "getDisplayNames": [Function],
                      "getListFormat": [Function],
                      "getMessageFormat": [Function],
                      "getNumberFormat": [Function],
                      "getPluralRules": [Function],
                      "getRelativeTimeFormat": [Function],
                    },
                    "locale": "en",
                    "messages": Object {
                      "default.cancel": "Cancel",
                      "default.delete": "Delete",
                      "default.remove": "Remove",
                      "default.save": "Save",
                    },
                    "onError": [Function],
                    "textComponent": Symbol(react.fragment),
                    "timeZone": undefined,
                    "wrapRichTextChunksInFragment": undefined,
                  }
                }
              >
                <Component>
                  <div
                    className="pf-c-content"
                  >
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                  </div>
                </Component>
              </CvssVector>
            </injectIntl(CvssVector)>
          </div>
        </Component>
      </div>
    </Component>
  </CVEPageDetailsSeverity>
</injectIntl(CVEPageDetailsSeverity)>
`;
