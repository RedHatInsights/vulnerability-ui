/* eslint-disable camelcase */
import { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import {
    filtersBusinessRisk,
    filtersCVSSScore,
    filtersPublishDate,
    filtersSeverity,
    filtersShowAll,
    filtersStatus,
    filterCveSearchTerm,
    filtersSecurityRules
} from '../../../Helpers/constants';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import {
    kebabItemDownloadCSV,
    kebabItemDownloadJSON,
    kebabItemEditBusinessRisk,
    kebabItemEditStatus,
    kebabItemToggleCvesDescription
} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import FilterChips from '../../PresentationalComponents/Filters/FilterChips';
import Filters from '../../PresentationalComponents/Filters/Filters';
import SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import Remediation from '../Remediation/Remediation';
import SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';
import { CVETableContext } from './VulnerabilitiesCves';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
class VulnerabilitiesToolbarWithContext extends Component {
    static propTypes = {
        showRemediationButton: propTypes.bool,
        entity: propTypes.object,
        context: propTypes.object,
        intl: propTypes.any
    };

    static defaultProps = {
        showRemediationButton: false,
        totalNumber: 0,
        apply: () => undefined,
        downloadReport: () => undefined
    };

    handleCveDescription = () => {
        const { context } = this.props;
        const { cves, methods, params } = context;
        const { expandCveDescription } = params;
        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCve(openedCves);
    }

    render() {
        const { showRemediationButton, entity, context } = this.props;
        const { cves, params, methods } = context;
        const { selectedCves, expandCveDescription, filter } = params;
        const selectedCvesCount = selectedCves && selectedCves.length;
        const filterCategories = [
            filtersShowAll,
            filtersSecurityRules,
            filtersSeverity,
            filtersCVSSScore,
            filtersBusinessRisk,
            filtersStatus,
            filtersPublishDate
        ];
        const kebabOptions = [
            kebabItemEditBusinessRisk(
                methods.showBusinessRiskModal,
                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),
                { isDisabled: !selectedCvesCount }
            ),
            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {
                isDisabled: !selectedCvesCount
            }),
            kebabItemToggleCvesDescription(
                this.handleCveDescription,
                expandCveDescription,
                { isDisabled: cves.data.length === 0 }
            ),
            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),
            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })
        ];
        return (
            <React.Fragment>
                <TableToolbar className="space-between-toolbar-items">
                    <ToolbarGroup className="vulnerability-toolbar-spacing">
                        <SelectAllCheckbox
                            selectedItems={selectedCves}
                            selectorHandler={methods.selectCves}
                            items={cves}
                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}
                            multiRow
                        />
                        <ToolbarItem style={{ minWidth: '5rem' }}>
                            <SearchFilter
                                placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}
                                value={filter}
                                apply={methods.apply}
                            />
                        </ToolbarItem>
                        <Filters
                            filterValues={params}
                            filterCategories={filterCategories}
                            apply={methods.apply}
                        />
                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}
                        <BaseKebab
                            dropdownItems={kebabOptions}
                            disabled={cves.data.length === 0 && selectedCvesCount === 0}
                        />
                    </ToolbarGroup>

                    <ToolbarGroup>
                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />
                    </ToolbarGroup>
                </TableToolbar>
                <TableToolbar className="pf-u-pt-0">
                    <ToolbarGroup>
                        <ToolbarItem>
                            <FilterChips
                                filterValues={params}
                                filterCategories={[filterCveSearchTerm, ...filterCategories]}
                                apply={methods.apply}
                            />
                        </ToolbarItem>
                    </ToolbarGroup>
                </TableToolbar>
            </React.Fragment>
        );
    }
}

const VulnerabilitiesToolbar = props => (
    <CVETableContext.Consumer>
        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);
export default injectIntl(VulnerabilitiesToolbar);
