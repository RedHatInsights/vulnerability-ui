import { Page } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchCveDetails, setHeader } from '../../../Store/Actions/Actions';
import { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';
import { paths } from '../../../Utilities/Routes';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

export const CVEPageContext = React.createContext({ isLoading: true });

class CVEPage extends React.Component {
    static propTypes = {
        match: propTypes.object,
        cveDetails: propTypes.object,
        fetchCveDetails: propTypes.func,
        setHeader: propTypes.func
    };

    constructor(props) {
        super(props);
        this.state = { cveName: this.props.match.params.cve };
    }

    componentDidMount() {
        this.props.setHeader({
            breadcrumbs: [
                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },
                { title: this.state.cveName, isActive: true }
            ]
        });
        this.props.fetchCveDetails(this.state.cveName);
    }

    render() {
        return (
            <Page>
                <CVEPageContext.Provider value={this.props.cveDetails && { isLoading: this.props.cveDetails.isLoading }}>
                    <VulnerabilityHeader title={this.state.cveName} showTabs={false}>
                        <CVEPageDetails data={this.props.cveDetails} />
                    </VulnerabilityHeader>
                    <Main>
                        <SystemsExposedTable cve={this.state.cveName} />
                    </Main>
                </CVEPageContext.Provider>
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        cveDetails: sCveDetailsPage(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchCveDetails: cveName => dispatchAction(fetchCveDetails(cveName)),
        setHeader: header => dispatchAction(setHeader(header))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEPage)
);
