import React from 'react';
import * as deps from '../../../Helpers/APIHelper';
import { updateRef } from '../../../Helpers/MiscHelper';
import { BusinessRiskModal } from './BusinessRiskModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { intl } from '../../../Utilities/IntlProvider';
import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import TestWrapper from '../../../Utilities/TestWrapper';
import '@testing-library/jest-dom';
import { CVETableContext } from '../CVEs/CVEs';

const store = ReducerRegistry.getStore();
jest.mock('../../../Helpers/MiscHelper', () => ({
    ...jest.requireActual('../../../Helpers/MiscHelper'),
    updateRef: jest.fn()
}));

const mockContext = {
    cves: {
        isLoading: false,
        meta: {
            page: 1
        },
    },
    params: {
        advisory_available: 'true',
        affecting: 'system1',
        sort: '-public_date'
    },
    methods: {
        apply: jest.fn()
    }
};

describe('BusinessRiskModal', () => {
    const setBusinessRiskMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
    deps.setBusinessRisk = setBusinessRiskMock;

    it('Should render with one CVE', () => {
        const cves = [{ id: 'SOME CVE', business_risk_id: '3' }];
        render(
            <TestWrapper store={ store }>
                <BusinessRiskModal open cves={cves} intl={intl}/>
            </TestWrapper>
        );

        expect(screen.getByRole('radio', { name: 'Medium' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Not defined' })).toHaveAttribute('checked');
    });
    it('Should render with list of CVE', () => {
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        render(
            <TestWrapper store={ store }>
                <BusinessRiskModal open cves={cves} intl={intl}/>
            </TestWrapper>
        );

        expect(screen.getByRole('radio', { name: 'Critical' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'High' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Medium' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Low' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Not defined' })).toHaveAttribute('checked');
    });
    it('Should save a list of CVEs', async () => {
        const testContext = { ...mockContext, cves: { meta: { page: 2 }}};
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        render(
            <TestWrapper store={ store }>
                <CVETableContext.Provider value={testContext}>
                    <BusinessRiskModal open cves={cves} intl={intl} />
                </CVETableContext.Provider>
            </TestWrapper>
        );

        fireEvent.click(screen.getByRole('radio', { name: 'Critical' }));
        fireEvent.change(screen.getByRole('textbox', { name: /justification/i }), { target: { value: 'Test' } });
        fireEvent.click(screen.getByRole('button', { name: 'Save' }));
        expect(setBusinessRiskMock).toBeCalledWith({
            business_risk_id: 4,
            business_risk_text: 'Test',
            cve: ['SOME CVE1', 'SOME CVE2', 'SOME CVE3', 'SOME CVE4']
        });
        await waitFor(() => expect(updateRef).toHaveBeenCalledWith({ page: 2 }, mockContext.params, mockContext.methods.apply));
    });
    it('Should call updateRef with goToFirstPage', async () => {
        const testContext = { ...mockContext, cves: { meta: { page: 2 }}};
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        render(
            <TestWrapper store={ store }>
                <CVETableContext.Provider value={testContext}>
                    <BusinessRiskModal open cves={cves} intl={intl} goToFirstPage={true} />
                </CVETableContext.Provider>
            </TestWrapper>
        );

        fireEvent.click(screen.getByRole('radio', { name: 'Critical' }));
        fireEvent.change(screen.getByRole('textbox', { name: /justification/i }), { target: { value: 'Test' } });
        fireEvent.click(screen.getByRole('button', { name: 'Save' }));
        await waitFor(() => expect(updateRef).toHaveBeenCalledWith({ page: 1 }, mockContext.params, mockContext.methods.apply));
    });
});
