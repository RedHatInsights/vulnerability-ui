import FirstPage from './FirstPage';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { intl } from '../../../../Utilities/IntlProvider';
import { render , screen } from '@testing-library/react';
import { ComponentWithContext } from '../../../../Utilities/TestingUtilities';
import '@testing-library/jest-dom';

jest.mock('@redhat-cloud-services/frontend-components-pdf-generator', () => ({
    Section: jest.fn(({ children, ...props }) => <div {...props}>{children}</div>),
    Panel: jest.fn(({ children, ...props }) => <div {...props}>{children}</div>),
    PanelItem: jest.fn(({ children, ...props }) => <div {...props}>{children}</div>),
    CounterItem: jest.fn(({ children, ...props }) => <div {...props}>{children}</div>),
}));
const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

const data = {
    "totalSystems": 147,
    "totalCves": 595,
    "totalRules": 11,
    "systemCountPerType": { "edge": 1000, "rpmdnf": 3000 },
}

describe('FirstPage component', () => {
    it('Should match snapshot', () => {
        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <FirstPage data={data} intl={intl} />
                </Router>
            </Provider>);

        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should show hyrbid systems counts', () => {
        render(<ComponentWithContext>
            <FirstPage data={data} intl={intl} isEdgeParityEnabled/>
        </ComponentWithContext>);

        expect(screen.getByText('1000')).toBeVisible();
        expect(screen.getByText('3000')).toBeVisible();
        expect(screen.getByText('Conventional')).toBeVisible();
        expect(screen.getByText('Immutable')).toBeVisible();
    });
    it('Should hide hyrbid systems counts when edge parity is disabled', () => {
        render(<ComponentWithContext>
            <FirstPage data={data} intl={intl} />
        </ComponentWithContext>);

        expect(screen.queryByText('1000')).toBeNull()
        expect(screen.queryByText('3000')).toBeNull()
        expect(screen.queryByText('Conventional')).toBeNull()
        expect(screen.queryByText('Immutable')).toBeNull()
    });

    it('Should hide hyrbid systems counts when there is no immutable devices', () => {
        data.systemCountPerType.edge = 0;
        render(<ComponentWithContext>
            <FirstPage data={data} intl={intl} isEdgeParityEnabled />
        </ComponentWithContext>);

        expect(screen.queryByText('1000')).toBeNull()
        expect(screen.queryByText('3000')).toBeNull()
        expect(screen.queryByText('Conventional')).toBeNull()
        expect(screen.queryByText('Immutable')).toBeNull()
    });

});
