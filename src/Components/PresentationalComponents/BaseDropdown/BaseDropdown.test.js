import BaseDropdown from './BaseDropdown';
import { DropdownItem } from '@patternfly/react-core';
import { render, screen, waitFor } from '@testing-library/react';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';
import userEvent from '@testing-library/user-event';

const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

const item1_action = jest.fn();

describe('BaseDropdown component', () => {
    it('Should match snapshot', () => {
        const items = [
            <DropdownItem key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        const { asFragment } = render(
            <IntlProvider locale="en">
                <Provider store={store}>
                    <Router>
                        <BaseDropdown dropdownItems={items} />
                    </Router>
                </Provider>
            </IntlProvider>
        );

        expect(asFragment()).toMatchSnapshot();
    })

    it('Should be disabled when disabled prop is passed', () => {
        const items = [
            <DropdownItem key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ];
        const { asFragment } = render(
            <IntlProvider locale="en">
                <Provider store={store}>
                    <Router>
                        <BaseDropdown dropdownItems={items} disabled={ true } />
                    </Router>
                </Provider>
            </IntlProvider>
        );

        expect(asFragment()).toMatchSnapshot();
    })

    it('Should call the onClick handler when clicked', async () => {
        const items = [
            <DropdownItem data-testid="dropdown-item1" key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        render(
            <IntlProvider locale="en">
                <Provider store={store}>
                    <Router>
                        <BaseDropdown dropdownItems={items} />
                    </Router>
                </Provider>
            </IntlProvider>
        );

        userEvent.click(screen.getAllByTestId('dropdown-toggle')[0]); // open dropdown
        await waitFor(() => userEvent.click(screen.getByTestId('dropdown-item1'))); // click first item

        expect(item1_action).toHaveBeenCalled();
    })
});
