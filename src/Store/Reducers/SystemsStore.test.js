import * as ActionTypes from '../ActionTypes';
import { initialState, SystemsReducer } from './SystemsStore';

let action;
describe('SystemsReducer:', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
    });

    it('Should return initial state', () => {
        expect(SystemsReducer(undefined, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(SystemsReducer(undefined, action)).toEqual(initialState);
    });

    it('Should start loading systems list', () => {
        action.type = ActionTypes.FETCH_SYSTEMS + '_PENDING';
        expect(SystemsReducer(undefined, action).isLoading).toEqual(true);
    });

    it('Should load systems list', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.FETCH_SYSTEMS + '_FULFILLED';
        action.payload = testObject;
        expect(SystemsReducer(undefined, action)).toEqual({
            isLoading: false,
            metadata: undefined,
            params: {
                filter: undefined,
                opt_out: false,
                page: 1,
                page_size: 20
            },
            payload: testObject
        });
    });

    it('Should change systems params', () => {
        let params = { filter: 'cve-search', opt_out: true, page: 10, page_size: 100 };
        action.type = ActionTypes.CHANGE_SYSTEMS_PARAMS;
        action.payload = params;
        expect(SystemsReducer(initialState, action)).toEqual({
            isLoading: true,
            metadata: initialState.metadata,
            params: params,
            payload: {}
        });
    });

    it('Should pass default page_size param', () => {
        let params = { filter: 'cve-search', opt_out: false, page: 10 };
        action.type = ActionTypes.CHANGE_SYSTEMS_PARAMS;
        action.payload = params;
        expect(SystemsReducer(initialState, action)).toEqual({
            isLoading: true,
            metadata: initialState.metadata,
            params: {...params, page_size: 20},
            payload: {}
        });
    });

    it('Should clear system store', () => {
        let params = { filter: 'cve-search', opt_out: false, page: 10 };
        action.type = ActionTypes.CLEAR_SYSTEMS_STORE;
        action.payload = params;
        expect(SystemsReducer(initialState, action)).toEqual({
            isLoading: true,
            payload: {},
            metadata: {
                page: 1,
                limit: 20,
                offet: 0,
                total_items: 0
            },
            params: {
                filter: undefined,
                opt_out: false,
                page: 1,
                page_size: 20
            }
        });
    });
});
