import React from 'react';
import { RHEL_VERSIONS } from '../../../../Helpers/constants';
import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';
import { Select, SelectOption } from '@patternfly/react-core';
import { intl } from '../../../../Utilities/IntlProvider';
import messages from '../../../../Messages';

const useOsVersionFilter = (urlParam, label, placeholder, filterValue, apply) => {
    const [isOpen, setOpen] = React.useState(false);
    const [numOptions, setNumOptions] = React.useState(10);
    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();

    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];

    const onOptionSelect = (_, changedValue) => {
        let newValue;

        if (selectedVersionsArray.includes(changedValue)) {
            newValue = selectedVersionsArray;
            newValue.splice(newValue.indexOf(changedValue), 1);
        }
        else {
            newValue = [...selectedVersionsArray, changedValue];
        }

        apply({ [urlParam]: newValue.join(','), page: 1 });
    };

    const onToggle = (isOpen) => {
        setOpen(isOpen);
    };

    const onViewMoreClick = () => {
        setNumOptions(versionFromNewestToOldest.length);
    };

    return {
        type: conditionalFilterType.custom,
        label: intl.formatMessage(label),
        filterValues: {
            children: (
                <Select
                    variant={'checkbox'}
                    onToggle={onToggle}
                    onSelect={onOptionSelect}
                    selections={selectedVersionsArray}
                    isOpen={isOpen}
                    aria-label={'os-version-filter'}
                    placeholderText={intl.formatMessage(placeholder)}
                    {...(numOptions < versionFromNewestToOldest.length
                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}
                    style={{ maxHeight: '420px', overflow: 'auto' }}
                >
                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (
                        <SelectOption
                            isDisabled={option.disabled}
                            key={index}
                            value={option.value}
                            {...(option.description && { description: option.description })}
                        />
                    ))}
                </Select>
            )
        }
    };
};

export default useOsVersionFilter;
