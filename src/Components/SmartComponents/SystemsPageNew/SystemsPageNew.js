/* eslint-disable no-console */
/* eslint-disable no-unused-vars */
import React, { Fragment, useEffect, useMemo     } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useIntl } from 'react-intl';
import { Main } from '@redhat-cloud-services/frontend-components/components/cjs/Main';
import Header from '../../PresentationalComponents/Header/Header';
import messages from '../../../Messages';
import Table from '../../PresentationalComponents/Table/Table';
import { fetchSystems } from '../../../Store/Actions/Actions';
import { header, createSystemRows, loadingTable, updateHeader } from './assets';
import useTable from '../../../Hooks/Table/useTable';

const SystemsPageNew = () => {
    const intl = useIntl();
    const dispatch = useDispatch();

    const [
        columns,
        rows,
        setRows,
        onChangeColumns
    ] = useTable({
        initialColumns: header,
        initialRows: loadingTable,
        props: {
            offset: 1
        }
    });

    const { systems, isLoading, metadata } = useSelector(
        ({ SystemsPageStore }) =>(
            {
                systems: SystemsPageStore.payload.data,
                isLoading: SystemsPageStore.isLoading,
                metadata: SystemsPageStore.metadata
            }
        ));

    // const isLoading = useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);
    // const metadata = useSelector(
    //     ({ SystemsPageStore }) => SystemsPageStore.metadata
    // );

    useEffect(() => {
        dispatch(fetchSystems({ sort: '-updated', page_size: 20, page: 1, opt_out: false }));
    }, [dispatch]);

    useEffect(() => setRows(createSystemRows(systems, isLoading)), [systems, isLoading, setRows]);

    return <Fragment>
        <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />
        <Main>
            <button onClick={() => onChangeColumns(updateHeader === columns ? header : updateHeader)}>
                update headers
            </button>
            <Table
                cells={columns}
                rows={rows}
                store={{
                    data: systems,
                    metadata
                }}
                offset={1}
                callback={() => console.log('callback fired from high level component')}
                onSelect={(event, isSelected, rowId) => console.log(isSelected, rowId)}
            />
        </Main>;
    </Fragment>;

};

export default SystemsPageNew;
