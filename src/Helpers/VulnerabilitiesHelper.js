import { Text, TextContent, TextVariants } from '@patternfly/react-core';
import { Shield } from '@redhat-cloud-services/frontend-components';
import { parseCvssScore, processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import { flatMap } from 'lodash';
import React from 'react';
import { Link } from 'react-router-dom';
import StatusDropdown from '../Components/SmartComponents/StatusDropdown/StatusDropdown';

export function createCveListByAccount({ cveList, parameters }) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload;

        let { data, meta, errors } = payload;

        data =
            data &&
            flatMap(data, (row, index) => [
                {
                    id: row.id,
                    business_risk_id: row.attributes.business_risk_id,
                    business_risk_justification: row.attributes.business_risk_text,
                    cells: [
                        {
                            title: (
                                <span key={row.id}>
                                    <Link to={'/cves/' + row.attributes.synopsis}>{row.attributes.synopsis}</Link>
                                </span>
                            )
                        },

                        { title: <span key={row.id}>{processDate(row.attributes.public_date)}</span> },
                        {
                            title: (
                                <span key={row.id}>
                                    <Shield impact={row.attributes.impact} hasLabel />
                                </span>
                            )
                        },
                        {
                            title: (
                                <span key={row.id}>
                                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                </span>
                            )
                        },

                        { title: <span key={row.id}>{row.attributes.systems_affected.toString()}</span> },
                        { title: <span key={row.id}>{row.attributes.business_risk}</span> }
                    ],
                    isOpen: parameters.openedCves.includes(row.id),
                    selected: parameters.selectedCves.includes(row.id)
                },
                {
                    cells: [
                        {
                            title: (
                                <TextContent>
                                    <Text component={TextVariants.h6}>Description</Text>
                                    <Text component={TextVariants.p}>{row.attributes.description}</Text>
                                </TextContent>
                            )
                        }
                    ],
                    parent: index * 2
                }
            ]);
        return { data, meta, isLoading, errors };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

export function createCveListBySystem(systemId, cveList) {
    let isLoading = cveList && cveList.isLoading;
    if (!isLoading) {
        const {
            payload: { data, meta, errors }
        } = cveList;
        return {
            data:
                data &&
                flatMap(data, (row, index) => [
                    {
                        id: row.id,
                        cells: [
                            {
                                title: <span key={row.id}>{handleCVELink(row.attributes.synopsis)}</span>
                            },
                            {
                                title: <span key={row.id}>{processDate(row.attributes.public_date)}</span>
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        <Shield impact={row.attributes.impact} tooltipPosition={'right'} hasLabel />
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.attributes.synopsis}>
                                        <StatusDropdown
                                            currentStatusName={row.attributes.status}
                                            systemId={systemId}
                                            currentStatusId={row.attributes.status_id}
                                            cveName={row.attributes.synopsis}
                                            hasNotification
                                        />
                                    </span>
                                )
                            }
                        ],
                        isOpen: false,
                        selected: false
                    },
                    {
                        cells: [
                            {
                                title: row.attributes.description
                            }
                        ],
                        parent: index * 2
                    }
                ]),
            meta,
            errors,
            isLoading
        };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

function handleCVELink(synopsis) {
    if (location.href.indexOf('vulnerability') !== -1) {
        return <Link to={'/cves/' + synopsis}>{synopsis}</Link>;
    } else {
        return <a href={`${document.baseURI}rhel/vulnerability/cves/${synopsis}`}>{synopsis}</a>;
    }
}
