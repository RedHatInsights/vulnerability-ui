import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from "react-redux";
import ReportsPage from './ReportsPage';

/* Mock function returning permissions */
jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true], false]
}));

jest.useFakeTimers('modern').setSystemTime(new Date('2020-01-01').getTime());

const customMiddleWare = store => next => action => {
    next(action);
}

const mockStore = configureStore([customMiddleWare]);
const store = mockStore({});
window.insights = { loadRemediations: jest.fn(), chrome: { getUserPermissions: jest.fn() } };

let wrapper;
beforeEach(() => {
    wrapper = mountWithIntl(
        <Provider store={store}>
            <Router>
                <ReportsPage />
            </Router>
        </Provider>
    );
});

describe('Reports page component', () => {
    it('Should match snapshots', () => {
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should open configuration modal upon clicking button in the second card and close upon clicking cancel.', () => {
        wrapper.find('.create-report').simulate('click');
        expect(wrapper.find('ReportConfigModal').props().isOpen).toBeTruthy();

        wrapper.find('ReportConfigModal').find('button').last().simulate('click')
        expect(wrapper.find('ReportConfigModal').props().isOpen).toBeFalsy();
    });

    it('Should open configuration modal upon clicking button in the second card and close and start download upon clicking export.', () => {
        expect(wrapper.find('DownloadCVEsReport')).toHaveLength(0);

        wrapper.find('.create-report').simulate('click');
        expect(wrapper.find('ReportConfigModal').props().isOpen).toBeTruthy();

        const buttons = wrapper.find('ReportConfigModal').find('button');
        buttons.at(buttons.length - 1).simulate('click');

        expect(wrapper.find('ReportConfigModal').props().isOpen).toBeFalsy();
    });
});