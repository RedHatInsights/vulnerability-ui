import union from 'lodash/union';
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { useIntl } from 'react-intl';
import {
    addNotification as addNotificationFEC,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { optOutSystemsAction } from '../../src/Store/Actions/Actions';
import messages from '../Messages';

export const useNotification = (config) => {
    const dispatch = useDispatch();

    const globalConfig = {
        variant: 'info',
        dismissable: true,
        ...config
    };

    useEffect(() => {
        return () => {
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const addNotification = ({ msg, ...config }) =>
        dispatch(
            addNotificationFEC({
                title: msg,
                ...globalConfig,
                ...config
            })
        );

    return addNotification;
};

export const useGetEntities = (fetchApi, setUrlParams) => {

    const getEntities = async (
        _items,
        { orderBy, orderDirection, page, per_page: perPage, vulnerabilityParams }
    ) => {
        const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;

        const params = {
            ...vulnerabilityParams,
            page,
            page_size: perPage,
            sort
        };

        setUrlParams({ ...params });

        const items = await fetchApi({ ...params });

        return {
            results: items?.data?.map(row => ({ id: row.id, ...row.attributes })),
            total: items?.meta?.total_items
        };
    };

    return getEntities;
};

export const useOptOutSystems = ({
    selectedRows,
    totalSelectedRows,
    onRefreshInventory
}) => {
    const addNotification = useNotification({ variant: 'success' });
    const dispatch = useDispatch();
    const intl = useIntl();

    return (systemId, isOptedOut) => {
        dispatch(optOutSystemsAction(systemId ?? Object.keys(selectedRows), isOptedOut))
        .then(() => {
            let count = systemId ? 1 : totalSelectedRows;

            isOptedOut ?
                addNotification({
                    msg: intl.formatMessage(messages.systemsExcludedNotification, { count })
                })
                : addNotification({
                    msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),
                    description: intl.formatMessage(messages.systemsResumedNotificationBody)
                });
        })
        .finally(onRefreshInventory);
    };
};

const mapSelectedRows = ({ id }) => ({ id, selected: true });

export const useBulkSelect = ({ rawData, selectedRows, totalSelectedRows, handleSelect, fetchResource, multiRow = false }) => {
    const intl = useIntl();
    const { meta, data } = rawData;

    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);

    const handleSelectPage = () => {
        const { data } = rawData ?? {};
        const collectedRows = data && union(
            data.filter(item => item.id).map(mapSelectedRows),
            Object.values(selectedRows)
        );

        handleSelect(collectedRows);
    };

    const handleUnselect = () => handleSelect([]);

    const handleSelectAll = async () => {

        let { payload } = await fetchResource({ page_size: meta.total_items, page: 1 });

        payload.then(({ data }) => {
            handleSelect(data.map(mapSelectedRows));
        });
    };

    return {
        count: totalSelectedRows,
        checked: Boolean(totalSelectedRows),
        isDisabled: meta.total_items === 0 && totalSelectedRows === 0,
        ouiaId: 'bulk-select',
        items: [
            {
                title: intl.formatMessage(messages.selectNone),
                onClick: handleUnselect
            },
            {
                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,
                onClick: handleSelectPage
            },
            {
                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,
                onClick: handleSelectAll
            }
        ]

    };

};

