import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';
import { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const CveStatusModal = ({ cves, updateRef, intl }) => {
    const [cveList] = useState(cves);
    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());
    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());
    const [checkboxState, setCheckboxState] = useState(false);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        return setCveStatus({
            status_id: parseInt(statusId),
            cve: cveIds,
            status_text: justification
        })
        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))
        .then(updateRef);
    };

    function getDefaultStatus() {
        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';
    }

    function getDefaultLabel() {
        return (cveList && cveList.length === 1 && cveList[0].justification) || '';
    }

    const successNotification = {
        variant: 'success',
        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { cveCount: cveList.length || 0 })
    };
    const title = cveList.length > 1 ? intl.formatMessage(messages.cveStatusModalTitlePlural)
        : intl.formatMessage(messages.cveStatusModalTitleSingle);

    return (
        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>
            <Stack gutter={'md'}>
                <StackItem>
                    <Form key="key">
                        {StatusSelect}
                        {JustificationInput}
                        <FormGroup fieldId={'overwrite'}>
                            <Checkbox
                                label={
                                    <React.Fragment>
                                        {intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}
                                        <Tooltip
                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}
                                        >
                                            <React.Fragment>
                                                <OutlinedQuestionCircleIcon />
                                            </React.Fragment>
                                        </Tooltip>
                                    </React.Fragment>
                                }
                                id="alt-form-checkbox-1"
                                name="alt-form-checkbox-1"
                                isChecked={checkboxState}
                                onChange={checked => setCheckboxState(checked)}
                            />
                        </FormGroup>
                        <FormGroup fieldId={'info'}>
                            <Split>
                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>
                                    <InfoCircleIcon size="md" color="var(--pf-global--active-color--400)" />
                                </SplitItem>
                                <SplitItem isFilled>
                                    {intl.formatMessage(messages.cveStatusModalInfo)}
                                    <Tooltip
                                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}
                                    >
                                        <React.Fragment>
                                            <OutlinedQuestionCircleIcon />
                                        </React.Fragment>
                                    </Tooltip>
                                </SplitItem>
                            </Split>
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CveStatusModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func,
    intl: propTypes.any
};

export default injectIntl(CveStatusModal);
