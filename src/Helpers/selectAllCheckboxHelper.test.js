import selectAllCheckbox from './selectAllCheckboxHelper';
import messages from '../Messages';
import { intl } from '../Utilities/IntlProvider';

const mockParameters = {
    selectedItems: [],
    selectorHandler: jest.fn(),
    items: {
        data: [{ id: 'a' }, { id: 'b' }],
        meta: { total_items: 10 }
    },
    fetchResource: jest.fn().mockReturnValue({
        payload: Promise.resolve({
            data: [{ id: 'testID' }]
        })
    }),
    multiRow: true
};

describe('SelecAllCheckboxHelper', () => {
    it('Should selectAllCheckbox return valid object for bulk select', () => {
        const { items } = selectAllCheckbox(mockParameters);
        expect(items).toEqual([
            {
                title: intl.formatMessage(messages.selectNone),
                onClick: expect.any(Function)
            },
            {
                title: `${intl.formatMessage(messages.selectPage, { count: 1 })}`,
                onClick: expect.any(Function)
            },
            {
                title: `${intl.formatMessage(messages.selectAll, { count: 10 })}`,
                onClick: expect.any(Function)
            }
        ])
    });

    it('Should handleOnCheckboxChange call handleSelectAll', () => {
        const { handleOnCheckboxChange } = selectAllCheckbox(mockParameters);
        handleOnCheckboxChange();

        expect(mockParameters.fetchResource).toHaveBeenCalledWith({ page_size: 10, page: 1 });
    });

    it('Should handleOnCheckboxChange call handleUnselectAll', () => {
        const { handleOnCheckboxChange } = selectAllCheckbox({ ...mockParameters, selectedItems: ['a'] });
        handleOnCheckboxChange();

        expect(mockParameters.selectorHandler).toHaveBeenCalledWith(false, []);
    });

    it('Should select a page', () => {
        const { items } = selectAllCheckbox(mockParameters);
        items[1].onClick();
        expect(mockParameters.selectorHandler).toHaveBeenCalledWith(true, ['a', 'b']);
    });

    it('Should set multirow to default false safely', () => {
        let testParams = mockParameters;
        delete testParams.multiRow;
        const { items } =  selectAllCheckbox(testParams);
        expect(items[1].title).toEqual('Select page (2 items)');
    });

    it('Should handle items without id safely', () => {
        const { handleOnCheckboxChange } = selectAllCheckbox({
            ...mockParameters,
            fetchResource: jest.fn().mockReturnValue({
                payload: Promise.resolve({
                    data: ['testID']
                })
            })
        });
        handleOnCheckboxChange();
        expect(mockParameters.selectorHandler).toHaveBeenCalledWith(true, ['testID']);
    });

    it('Should handle undefined total_items safely', () => {
        const { items } = selectAllCheckbox({
            ...mockParameters,
            items: {
                data: [{ id: 'a' }, { id: 'b' }],
                meta: {}
            }
        });
        expect(items[2].title).toEqual('Select all (0 items)');
    });
});
