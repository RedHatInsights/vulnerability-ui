import * as reactCore from '@patternfly/react-core';
import { Card, CardBody } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { routerParams } from '@red-hat-insights/insights-frontend-components';
import { PaginationRow } from 'patternfly-react';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sAllSystems } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';

class Systems extends React.Component {
    constructor(props) {
        super(props);
        this.checkItem = this.checkItem.bind(this);
        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => {}
        };
    }

    componentDidMount() {
        this.props.fetchData();
        this.setState({
            removeListener: middlewareListener.addNew({
                on: 'SYSTEMS_ALL_FULFILLED',
                callback: () => this.fetchInventory()
            })
        });
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReact: { PaginationRow }
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.props.systems.data)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
        this.state.removeListener();
    }

    checkItem(key, value) {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    }

    render() {
        const { InventoryCmp } = this.state;

        return (
            <Card>
                <CardBody>
                    <InventoryCmp />
                </CardBody>
            </Card>
        );
    }
}

Systems.propTypes = {
    fetchData: propTypes.func,
    systems: dataShape
};

function mapStateToProps(state) {
    return {
        systems: sAllSystems(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: () => dispatchAction(fetchSystems())
    };
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(Systems)
);
