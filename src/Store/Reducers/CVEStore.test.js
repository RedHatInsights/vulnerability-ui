import * as ActionTypes from '../../Store/ActionTypes';
import { CVEReducer, initialState } from './CVEStore';

let action;
describe('CVE reducer:', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
    });

    it('Should return initial state', () => {
        expect(CVEReducer(undefined, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(CVEReducer(undefined, action)).toEqual(initialState);
    });

    it('Should start loading CVE_List for a system', () => {
        action.type = ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING';
        expect(CVEReducer(undefined, action).affectedSystemsByCVE.isLoading).toEqual(true);
    });

    it('Should load CVE_List for a system', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED';
        action.payload = testObject;
        expect(CVEReducer(undefined, action).affectedSystemsByCVE).toEqual({ isLoading: false, payload: testObject });
    });

    it('Should start loading CVE Details ', () => {
        action.type = ActionTypes.FETCH_CVE_DETAILS + '_PENDING';
        expect(CVEReducer(undefined, action).cveDetails.isLoading).toEqual(true);
    });

    it('Should load CVE Details', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED';
        action.payload = testObject;
        expect(CVEReducer(undefined, action).cveDetails).toEqual({ isLoading: false, error: false, payload: testObject });
    });

    it('Should handle CVE Details error', () => {
        action.type = ActionTypes.HANDLE_CVE_DETAILS_ERROR;
        action.payload = { error: true}
        expect(CVEReducer(undefined, action).cveDetails).toEqual({ isLoading: false, error: true, payload: {} });
    });
});
