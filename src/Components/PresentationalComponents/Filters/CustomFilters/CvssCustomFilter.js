import React, { useState } from 'react';
import propTypes from 'prop-types';
import { Split, SplitItem, Text, TextInput, Select } from '@patternfly/react-core';
import messages from '../../../../Messages';
import { intl } from '../../../../Utilities/IntlProvider';
import { ExclamationCircleIcon } from '@patternfly/react-icons';

const CvssCustomFilter = ({ filterData, setFilterData, selectProps, filterName }) => {
    const [isOpen, setOpen] = useState(false);

    const handleCvssInputChange = (value, inputName) => {
        setFilterData({
            ...filterData, cvss_filter: {
                ...filterData.cvss_filter,
                [inputName]: value
            }
        });
    };

    const validateCvssInput = (inputName) => {
        const valueThis = +filterData.cvss_filter[inputName];
        const valueMin = +filterData.cvss_filter.from;
        const valueMax = +filterData.cvss_filter.to;

        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {
            return 'error';
        }

        return 'default';
    };

    const filterCvssContent = (<Split className='pf-u-m-md'>
        <SplitItem>
            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br />
            <TextInput
                type="number"
                onChange={(v) => handleCvssInputChange(v, 'from')}
                validated={validateCvssInput('from')}
                id="cvss-min"
                value={filterData.cvss_filter.from}
                style={{ width: '5em' }}
            />
        </SplitItem>
        <SplitItem>
            <br /><span className="pf-u-m-sm">-</span>
        </SplitItem>
        <SplitItem>
            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br />
            <TextInput
                type="number"
                onChange={(v) => handleCvssInputChange(v, 'to')}
                validated={validateCvssInput('to')}
                id="cvss-max"
                value={filterData.cvss_filter.to}
                style={{ width: '5em' }}
            />
        </SplitItem>
    </Split>);

    const filterCvssGetLabel = () => {
        const min = +filterData.cvss_filter.from;
        const max = +filterData.cvss_filter.to;

        if (min === 0 && max === 10) {
            return `${filterName}: ${intl.formatMessage(messages.optionsAll)}`;
        }
        else {
            return (
                <Text>
                    {`${filterName}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}
                    {(min < 0 || max > 10 || min > max) &&
                        <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className="pf-u-ml-xs" />}
                </Text>
            );
        }
    };

    return (
        <Select
            variant="panel"
            aria-label="Select Input"
            customContent={filterCvssContent}
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={filterCvssGetLabel()}
            key="cvss-filter"
            width="auto"
            {... selectProps}
        />
    );
};

CvssCustomFilter.propTypes = {
    filterName: propTypes.string,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    selectProps: propTypes.object
};

export default CvssCustomFilter;
