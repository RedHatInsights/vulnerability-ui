import React, {
    useEffect,
    useState,
    useMemo,
    Fragment
} from 'react';
import { useDispatch } from 'react-redux';
import NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';
import { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import ReducerRegistry from './Utilities/ReducerRegistry';
import { setGlobalFilter } from './Store/Actions/Actions';
import { VulnerabilityRoutes } from './Utilities/VulnerabilityRoutes';
import { useLocation } from 'react-router-dom';
import NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';
import './App.scss';
import ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';
import { useRbac } from './Helpers/Hooks';
import { PERMISSIONS } from './Helpers/constants';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';

ReducerRegistry.register({ notifications });

const App = () => {
    const { pathname } = useLocation();
    const chrome = useChrome();
    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);
    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);

    const dispatch = useDispatch();

    const appNavClick = useMemo(() => ({
        cves(redirect) { chrome.appNavClick({ id: 'cves', redirect }); },
        systems(redirect) { chrome.appNavClick({ id: 'systems', redirect }); },
        reports(redirect) { chrome.appNavClick({ id: 'reports', redirect }); }
    }), []);

    useEffect(() => {
        const baseComponentUrl = pathname.split('/')[1];
        chrome &&
            baseComponentUrl &&
            appNavClick[baseComponentUrl] !== undefined &&
            appNavClick[baseComponentUrl](false);

        const unregister = chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {
            const [workloads, SIDs, tags] = chrome.mapGlobalFilter(data, true, true) ?? [null, null, null];
            dispatch(setGlobalFilter({ workloads, SIDs, tags }));
        });

        return () => unregister();
    }, [appNavClick, pathname, dispatch]);

    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);

    return (
        isLoading ? <Spinner size="lg" /> : isUserAuthorized ?
            <Fragment>
                <NotificationPortal />
                {isReadOnlyBannerVisible && <ReadOnlyBanner />}
                <VulnerabilityRoutes />
            </Fragment>
            : <NoAccessPage />
    );
};

export default App;
