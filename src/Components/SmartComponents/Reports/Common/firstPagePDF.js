import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text, View } from '@react-pdf/renderer';
import messages from '../../../../Messages';
import tablePage from './tablePage';
import { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';
import { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';
import styles from './styles';

const firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {
    // if data isn't converted to object convert it
    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {
        obj[item.key] = {
            filter: item.category,
            values: item.key === 'publish_date'
                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label
                : item.chips.map(({ name }) => name).join(', ')
        };
        return obj;
    }, {});

    let filterStringSegments = [
        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },
        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },
        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },
        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue },
        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue }
    ];

    // iterate from right to find last existing filter segment
    for (let i = filterStringSegments.length - 1; i >= 0; i--) {
        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {
            filterStringSegments[i].isLast = true;
            break;
        }
    }

    const generateCvesFiltersParagraph = () =>
        <Paragraph>
            {
                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,
                    {
                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',
                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,
                        score: (
                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values
                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +
                             DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),
                        published: (
                            filtersBuilder.publish_date && filtersBuilder.publish_date.values
                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)
                    }
                )
            }
            {
                filterStringSegments.map(filter =>
                    filtersBuilder.hasOwnProperty(filter.name) && intlFormatWithBold(filter.msg,
                        {
                            values: filtersBuilder[filter.name].values.toLowerCase(),
                            prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')
                        }
                    )
                )
            }
            <Text>.</Text>
            {'\n\n'}
        </Paragraph>;

    const generateSystemsFiltersParagraph = () =>
        <Paragraph>
            {
                filtersBuilder.filter
                    ? intlFormatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values })
                    : ''
            }
        </Paragraph>;

    return (
        <Fragment key="first-section">
            {
                isReportDynamic && (
                    <Paragraph>
                        {intlFormatWithBold(messages.customReportIntroductionText)}
                    </Paragraph>
                )
            }

            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }

            { type === 'cves' && (
                <Paragraph>
                    <Text>
                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {
                            cve_count: meta.total_items.toString(),
                            system_count: meta.system_count.toString()
                        })}

                        { (isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&
                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {
                                knownExploitCount: meta.knownExploitCount.toString()
                            })
                        }
                    </Text>
                </Paragraph>
            )}

            {
                reportData && reportData.userNotes ?
                    (
                        <View style={styles.userNotes}>
                            <Paragraph style={styles.userNotesTitle}>
                                <Text style={styles.bold}>
                                    {intl.formatMessage(messages.customReportUserNoteLabel)}
                                </Text>
                            </Paragraph>
                            <Paragraph>
                                <Text>{reportData.userNotes}</Text>
                            </Paragraph>
                            <Paragraph>
                                { user && user.identity &&
                                <Text style={styles.italic}>
                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {
                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`
                                    })}
                                </Text>
                                }
                            </Paragraph>
                        </View>
                    ) : null
            }

            <View style={styles.mt16}>
                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}
            </View>
        </Fragment>
    );
};

firstPagePDF.defaultProps = {
    user: undefined
};

firstPagePDF.propTypes = {
    intl: PropTypes.any,
    filters: PropTypes.array,
    data: PropTypes.object,
    meta: PropTypes.object,
    reportData: PropTypes.object,
    isReportDynamic: PropTypes.bool,
    user: PropTypes.object,
    type: PropTypes.string
};

export default firstPagePDF;
