import { Tooltip } from '@patternfly/react-core';
import { ExclamationTriangleIcon } from '@patternfly/react-icons';
import { Shield } from '@redhat-cloud-services/frontend-components/Shield';
import parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';
import { flatMap } from 'lodash';
import React from 'react';
import { Link } from 'react-router-dom';
import { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH } from './constants';
import SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';
import { FormattedMessage } from 'react-intl';
import messages from '../Messages';
import CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';
import AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';
import GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';

export function createCveListByAccount(cveList, columns) {
    let isLoading = cveList && cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload;
        let { data, meta, errors } = payload;
        const cvesCount = data && data.length;

        const flatColumns = columns.reduce((acc, curr) => curr.isShown ? acc.concat(curr.key) : acc, []);

        data =
            data &&
            flatMap(data, (row, index) => [
                {
                    id: row.id,
                    business_risk_id: row.attributes.business_risk_id,
                    business_risk_justification: row.attributes.business_risk_text,
                    status_id: row.attributes.status_id,
                    status_justification: row.attributes.status_text,
                    rules: row.attributes.rules,
                    exposed_systems_count: row.attributes.systems_affected,
                    cells: [
                        ...flatColumns.includes('synopsis') ? [{
                            title: (
                                <span key={row.id}>
                                    <Link
                                        to={'/cves/' + row.attributes.synopsis}
                                        className="pf-u-mr-sm cve-synopsis"
                                    >
                                        {row.attributes.synopsis}
                                    </Link>
                                    <GroupedCVELabels
                                        hasExploit={row.attributes.known_exploit}
                                        hasRule={row.attributes?.rules?.length > 0}
                                    />
                                </span>
                            )
                        }] : [],
                        ...flatColumns.includes('public_date') ? [{
                            title: <span key={row.id}>{processDate(row.attributes.public_date)}</span>
                        }] : [],
                        ...flatColumns.includes('impact') ? [{
                            title: (
                                <span key={row.id}>
                                    <Shield impact={row.attributes.impact} hasLabel />
                                </span>
                            )
                        }] : [],
                        ...flatColumns.includes('cvss_score') ? [{
                            title: (
                                <span key={row.id}>
                                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                </span>
                            )
                        }] : [],
                        ...flatColumns.includes('systems_affected') ? [{
                            title: (
                                <span key={row.id}>
                                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}
                                </span>
                            )
                        }] : [],
                        ...flatColumns.includes('business_risk') ? [{
                            title: (
                                <span key={row.id}>
                                    {
                                        BUSINESS_RISK_OPTIONS.find(
                                            option => option.value === row.attributes.business_risk_id.toString()
                                        ).label
                                    }
                                </span>
                            )
                        }] : [],
                        ...flatColumns.includes('status') ? [{
                            title: (
                                <span key={row.id}>
                                    {row.attributes.systems_status_divergent > 0 ? (
                                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>
                                            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />
                                        </Tooltip>
                                    ) : (
                                        ''
                                    )}{' '}
                                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}
                                </span>
                            )
                        }] : []
                    ],
                    isOpen: false,
                    selected: false
                },
                {
                    cells: [
                        {
                            title: (
                                <CVETableExpandedCell
                                    description={row.attributes.description}
                                    rules={row.attributes.rules}
                                    cve={row.attributes.synopsis}
                                />
                            )
                        }
                    ],
                    fullWidth: true,
                    parent: index * 2
                }
            ]);
        return { data, meta: { ...meta, cvesCount }, isLoading, errors };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

export function createCveListBySystem(systemId, cveList) {
    let isLoading = cveList && cveList.isLoading;
    if (!isLoading) {
        const {
            payload: { data, meta, errors }
        } = cveList;
        const cvesCount = data && data.length;

        let rows =
                data &&
                flatMap(data, (row, index) => [
                    {
                        id: row.id,
                        business_risk_id: row.attributes.business_risk_id,
                        business_risk_justification: row.attributes.business_risk_text,
                        status_id: row.attributes.status_id,
                        rules: row.attributes.rule,
                        cve_status_id: row.attributes.cve_status_id,
                        status_justification: row.attributes.status_text,
                        cve_status_justification: row.attributes.cve_status_text,
                        cells: [
                            {
                                title: (
                                    <span key={row.id}>
                                        {handleCVELink(row.attributes.synopsis, undefined,
                                            { className: 'pf-u-mr-sm', style: { display: 'block' } })
                                        }
                                        <GroupedCVELabels
                                            hasExploit={row.attributes.known_exploit}
                                            hasRule={!!row.attributes.rule}
                                        />
                                    </span>
                                )

                            },
                            {
                                title: <span key={row.id}>{processDate(row.attributes.public_date)}</span>
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        <Shield impact={row.attributes.impact} hasLabel />
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={'advisory'}>
                                        <AdvisoryColumn cve={row?.id} advisoriesList={row?.attributes?.advisories_list} />
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {
                                            BUSINESS_RISK_OPTIONS.find(
                                                option => option.value === row.attributes.business_risk_id.toString()
                                            ).label
                                        }
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        <SnippetWithPopover row={row} type={1}/>
                                    </span>
                                )
                            }
                        ],
                        isOpen: false,
                        selected: false
                    },
                    {
                        cells: [
                            {
                                title: (
                                    <CVETableExpandedCell
                                        description={row.attributes.description}
                                        rules={[row.attributes.rule]}
                                        cve={row.attributes.synopsis}
                                    />
                                )
                            }
                        ],
                        fullWidth: true,
                        parent: index * 2
                    }
                ]);

        if (!meta?.patch_access) {
            rows = rows?.map(row => {
                return {
                    ...row,
                    cells: row.cells.filter(cell => cell?.title?.key !== 'advisory')
                };
            });
        }

        return {
            data: rows,
            meta: { ...meta, cvesCount },
            errors,
            isLoading
        };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

/**
 * Handle CVE link
 * inside vulnerability app use Link route
 * otherwise, create a link to access the cve page (ex, inventory tab)
 * @param {String} synopsis cve ID
 * @param {String} body link tezt
 * @return {HTMLElement} a href link
 */
export function handleCVELink(synopsis, body, linkProps) {
    if (location.href.indexOf('vulnerability') !== -1) {
        return <Link to={'/cves/' + synopsis} {...linkProps}>{body || synopsis}</Link>;
    } else {
        return <a href={`${CVES_PATH}/${synopsis}`} {...linkProps}>{body || synopsis}</a>;
    }
}
