import TablePage from './tablePage';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { intl } from '../../../../Utilities/IntlProvider';
import TestWrapper from '../../../../Utilities/TestWrapper';
import { render } from '@testing-library/react';

const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

describe('TablePage component', () => {
    const cveData = [
        {
            "attributes": {
                "business_risk": "Not defined",
                "business_risk_id": 0,
                "business_risk_text": null,
                "cvss2_score": null,
                "cvss3_score": "4.300",
                "description": "As specified in the W3C Content Security Policy draft, when creating a violation report, \"User agents need to ensure that the source file is the URL requested by the page, pre-redirects. If thatâ€™s not possible, user agents need to strip the URL down to an origin to avoid unintentional leakage.\" Under certain types of redirects, Firefox incorrectly set the source file to be the destination of the redirects. This was fixed to be the redirect destination's origin. This vulnerability affects Firefox < 86, Thunderbird < 78.8, and Firefox ESR < 78.8.",
                "impact": "Important",
                "known_exploit": false,
                "public_date": "2021-02-23T00:00:00+00:00",
                "rules": [],
                "status": "Not reviewed",
                "status_id": 0,
                "status_text": null,
                "synopsis": "CVE-2021-23969",
                "systems_affected": 0,
                "systems_status_divergent": 0,
                "cvss_score": "4.3"
            },
            "id": "CVE-2021-23969",
            "type": "cve"
        },
        {
            "attributes": {
                "business_risk": "Not defined",
                "business_risk_id": 0,
                "business_risk_text": null,
                "cvss2_score": null,
                "cvss3_score": "4.300",
                "description": "A flaw was found in wildfly. The JBoss EJB client has publicly accessible privileged actions which may lead to information disclosure on the server it is deployed on. The highest threat from this vulnerability is to data confidentiality.",
                "impact": "Moderate",
                "known_exploit": false,
                "public_date": "2021-02-17T00:00:00+00:00",
                "rules": [],
                "status": "Not reviewed",
                "status_id": 0,
                "status_text": null,
                "synopsis": "CVE-2021-20250",
                "systems_affected": 0,
                "systems_status_divergent": 0,
                "cvss_score": "4.3"
            },
            "id": "CVE-2021-20250",
            "type": "cve"
        },
        {
            "attributes": {
                "business_risk": "Not defined",
                "business_risk_id": 0,
                "business_risk_text": null,
                "cvss2_score": null,
                "cvss3_score": "3.800",
                "description": "Vulnerability in the MySQL Server product of Oracle MySQL (component: Server: Optimizer). Supported versions that are affected are 8.0.20 and prior. Easily exploitable vulnerability allows high privileged attacker with network access via multiple protocols to compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Server accessible data and unauthorized ability to cause a partial denial of service (partial DOS) of MySQL Server. CVSS 3.1 Base Score 3.8 (Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:L).",
                "impact": "Low",
                "known_exploit": false,
                "public_date": "2021-01-19T00:00:00+00:00",
                "rules": [],
                "status": "Not reviewed",
                "status_id": 0,
                "status_text": null,
                "synopsis": "CVE-2021-1998",
                "systems_affected": 0,
                "systems_status_divergent": 0,
                "cvss_score": "3.8"
            },
            "id": "CVE-2021-1998",
            "type": "cve"
        }
    ]

    const systemData = [
        {
            "attributes": {
                "cve_count": 238,
                "display_name": "iqe-patch-6f78561c-df69-4edd-88e9-5d77d93c3743",
                "inventory_id": "c989a288-85f7-4601-9ba6-0798ca331870",
                "last_evaluation": "2021-04-07T07:05:37.913613+00:00",
                "last_upload": "2021-04-07T07:05:37.879012+00:00",
                "opt_out": false,
                "rules_evaluation": "2021-04-07T07:05:39.267313+00:00",
                "rules": [
                    {
                        "associated_cves": [
                            "CVE-2020-25681",
                            "CVE-2020-25682",
                            "CVE-2020-25683",
                            "CVE-2020-25684",
                            "CVE-2020-25685",
                            "CVE-2020-25686",
                            "CVE-2020-25687"
                        ],
                        "change_risk": 3,
                        "description": "dnsmasq: DNS cache poisoning",
                        "kbase_node_id": 5709611,
                        "playbook_count": 0,
                        "reboot_required": false,
                        "rule_id": "CVE_2020_25681_7_dnsmasq|CVE_2020_25681_7_RH7_ENABLED",
                        "rule_impact": 4,
                        "summary": "Vulnerable software versions are enabled but not running.\n"
                    }
                ],
                "stale_timestamp": "2021-04-08T12:05:37.503730+00:00",
                "stale_warning_timestamp": "2021-04-15T12:05:37.503730+00:00",
                "tags": [],
                "updated": "2021-04-07T07:05:37.575227+00:00"
            },
            "id": "c989a288-85f7-4601-9ba6-0798ca331870",
            "type": "system"
        },
        {
            "attributes": {
                "cve_count": 0,
                "display_name": "RHIQE.CZZUlPFpah.test",
                "inventory_id": "bf42072f-7427-4cd8-b735-c261538bb054",
                "last_evaluation": "2021-04-01T16:18:33.631542+00:00",
                "last_upload": "2021-04-01T16:18:33.603778+00:00",
                "opt_out": true,
                "rules_evaluation": null,
                "stale_timestamp": "2021-04-02T21:18:33.483304+00:00",
                "stale_warning_timestamp": "2021-04-09T21:18:33.483304+00:00",
                "tags": [],
                "updated": "2021-04-01T16:18:33.555920+00:00"
            },
            "id": "bf42072f-7427-4cd8-b735-c261538bb054",
            "type": "system"
        }
    ]

    const header = [
        "known_exploit",
        "rule_presence",
        "publish_date",
        "impact",
        "cvss_filter"
    ]

    it.skip('Should match dynamic CVE report snapshot with custom header.', () => {
        const { asFragment } = render(
            <TestWrapper store={ store }>
                <TablePage data={cveData} intl={intl} header={header} type="cves" isReportDynamic/>
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it.skip('Should match static CVE report snapshot with default header.', () => {
        const { asFragment } = render(
            <Provider store={store}>
                <Router>
                    <TablePage data={cveData} intl={intl} type="cves"/>
                </Router>
            </Provider>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it.skip('Should match CVE report with no data.', () => {
        const { asFragment } = render(
            <Provider store={store}>
                <Router>
                    <TablePage data={[]} intl={intl} type="cves"/>
                </Router>
            </Provider>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it.skip('Should match static system report snapshot with default header', () => {
        const { asFragment } = render(
            <Provider store={store}>
                <Router>
                    <TablePage data={systemData} intl={intl} type="systems"/>
                </Router>
            </Provider>
        );

        expect(asFragment()).toMatchSnapshot();
    });
});
