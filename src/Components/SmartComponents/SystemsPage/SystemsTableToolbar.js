import React, { useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch } from 'react-redux';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';
import DownloadReport from '../../../Helpers/DownloadReport';
import excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';
import { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';
import { useBulkSelect } from '../../../Helpers/Hooks';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';

const SystemsTableToolbar = ({
    selectedRows,
    selectedRowsCount,
    intl,
    canExport,
    canSetExcludedIncluded,
    canReadExcluded,
    parameters,
    rawData,
    methods
}) => {
    const { apply, handleSelect, doOptOut, setColumnManagementModalOpen } = methods;
    const dispatch = useDispatch();

    const downloadReport = format => {
        let params = { ...parameters };
        DownloadReport.exec(
            fetchSystems,
            params,
            format,
            'system-list',
            notification => dispatch(
                addNotification(notification)
            ),
            () => dispatch(clearNotifications())
        );
    };

    const kebabProps = useMemo(() => {
        return {
            selectedExcluded: selectedRows.some(({ opt_out: optOut }) => optOut === true),
            selectedIncluded: selectedRows.some(({ opt_out: optOut }) => optOut === false)
        };
    }, [selectedRows]);

    const kebabOptions = [
        '',
        ...canSetExcludedIncluded ? [{
            label: intl.formatMessage(messages.systemKebabDisableAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRows?.[0].display_name, true),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }
        },
        {
            label: intl.formatMessage(messages.systemKebabEnableAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRows?.[0].display_name, false, selectedRows),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }
        }] : [],
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => setColumnManagementModalOpen(true)
        }
    ];

    const bulkSelectProps = useBulkSelect({
        rawData,
        selectedRows,
        selectedRowsCount,
        handleSelect,
        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })
    });

    const osVersionFilter = useOsVersionFilter(
        parameters.rhel_version,
        apply
    );

    const filterConfigItems = [
        useSearchFilter(
            'filter',
            messages.systemsSearchName,
            messages.searchFilterByName,
            parameters.filter,
            apply
        ),
        ...(canReadExcluded ? [excludedFilter(apply, parameters)] : []),
        ...osVersionFilter
    ];

    return <PrimaryToolbar
        className="vuln-systems-primary-toolbar"
        bulkSelect={bulkSelectProps}
        actionsConfig={{
            actions: kebabOptions,
            dropdownProps: { ouiaId: 'toolbar-actions' }
        }}
        filterConfig={{
            items: filterConfigItems
        }}
        activeFiltersConfig={{
            filters: buildActiveFilters(parameters),
            onDelete: (_, chips, reset) => removeFilters(chips, apply, reset, SYSTEMS_DEFAULT_FILTERS),
            deleteTitle: intl.formatMessage(messages.resetFilters),
            showDeleteButton: !isFilterInDefaultState(
                parameters,
                canReadExcluded ? SYSTEMS_DEFAULT_FILTERS : {},
                SYSTEMS_FILTER_PARAMS)
        }}
        exportConfig={canExport ? {
            isDisabled: rawData.meta.totalItems === 0,
            ouiaId: 'export',
            ...exportConfig({ downloadReport })
        } : null}
    />;

};

SystemsTableToolbar.propTypes = {
    rawData: dataShape,
    canExport: propTypes.bool,
    canSetExcludedIncluded: propTypes.bool,
    canReadExcluded: propTypes.bool,
    parameters: propTypes.object,
    selectedRows: propTypes.array,
    selectedRowsCount: propTypes.number,
    methods: propTypes.shape({
        doOptOut: propTypes.func,
        apply: propTypes.func,
        handleSelect: propTypes.func,
        setColumnManagementModalOpen: propTypes.func
    }),
    intl: propTypes.any
};

export default injectIntl(SystemsTableToolbar);
