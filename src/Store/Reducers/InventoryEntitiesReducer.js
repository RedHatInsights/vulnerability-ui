// Initial State
export const init = {
    columns: [],
    rows: [],
    entities: [],
    selectedRows: []
};
// Reducer

function modifyInventory(columns, state) {
    if (!state.selectedRows) {state.selectedRows = [];}

    if (state.loaded) {
        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');
        return {
            ...state,
            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),
            columns: [
                ...columns || [],
                ...lastSeenColumn || []
            ]
        };
    }

    return state;
}

function selectEntities(state, selected) {
    const myRows = state.rows.slice();
    if (!state.selectedRows) {state.selectedRows = [];}

    const retval = {
        ...state,
        rows: myRows
        .map(item => {
            const newValue =  { ...item, selected: selected.some(system => system === item.id) };
            return newValue;
        }),
        selectedRows: [...selected]
    };
    return retval;
}

export const inventoryEntitiesReducer = (columns) => (state = init, action) => {
    switch (action.type) {
        case 'LOAD_ENTITIES_FULFILLED':
            return modifyInventory(columns, state);
        case 'SELECT_MULTIPLE_ENTITIES':
            return selectEntities(state, action.payload);

        default:
            return state;
    }
};
