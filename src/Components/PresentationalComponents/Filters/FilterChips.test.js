import FilterChips from './FilterChips'

describe('FilterChips', () => {

    const filterValues = {
        cvss_filter: 'from7to10', 
        impact: '1,2'
    }

    const filterCategories = [
        {
            type: 'radio',
            title: 'CVE Base',
            urlParam: 'cvss_filter',
            values: [{ value: '7.0 - 10.0', label: 'from7to10' }]
        },
        {    
            type: 'checkbox',
            title: 'Impact',
            urlParam: 'impact',
            values: [
                { label: 'Critical', value: '1' },
                { label: 'Important', value: '2' }
            ]
        }
    ];

    const applyMock = jest.fn(filters => { return filters });


    it('Should remove a single filter chip', () => {
        const wrapper = mount(<FilterChips filterValues={filterValues} filterCategories={filterCategories} apply={applyMock} />)
        const cveChip = wrapper.find({categoryName: 'CVE Base'});
        cveChip.find('ChipButton .pf-c-button').last().simulate('click')
        expect(applyMock).toHaveReturnedWith({ cvss_filter: undefined, impact: '1,2', page: 1, })
    })

    it('Should remove one of the available chips', () => {
        const wrapper = mount(<FilterChips filterValues={filterValues} filterCategories={filterCategories} apply={applyMock} />)
        wrapper.find('ChipButton').last().simulate('click')
        const impactChip = wrapper.find({categoryName: 'Impact'});
        impactChip.find('button').last().simulate('click')

        expect(applyMock).toHaveBeenCalledWith({ cvss_filter: undefined, impact: '1', page: 1, })
    })


    it('Should remove all filter chips', () => {
        const wrapper = mount(<FilterChips filterValues={filterValues} filterCategories={filterCategories} apply={applyMock} />)
        const c = wrapper.find('.pf-c-button').last().simulate('click')
        expect(applyMock).toHaveBeenCalledWith({ cvss_filter: undefined, impact: undefined, page: 1})
    })

})
