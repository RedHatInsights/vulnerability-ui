import React from 'react';
import WithLoader from './WithLoader';
import { render } from '@testing-library/react';

describe('WithLoader component', () => {
    it('should render with loading prop is undefined', () => {
        const { asFragment } = render(
            <WithLoader isLoading={undefined}>
                children
            </WithLoader>
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with loading prop is true', () => {
        const { asFragment } = render(
            <WithLoader isLoading/>
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with loading prop is false', () => {
        const { asFragment } = render(
            <WithLoader isLoading={false}>
                children
            </WithLoader>
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with spinner', () => {
        const { asFragment } = render(
            <WithLoader isLoading={true} variant='spinner' />
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with SkeletonTable', () => {
        const { asFragment } = render(
            <WithLoader isLoading={true} variant='table' />
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with CompactTable', () => {
        const { asFragment } = render(
            <WithLoader isLoading={true} variant='compactTable' />
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with rectangle', () => {
        const { asFragment } = render(
            <WithLoader isLoading={true} variant='rectangle' />
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('should render with inline Skeleton', () => {
        const { asFragment } = render(
            <WithLoader isLoading={true} variant='inlineSkeleton' />
        );
        expect(asFragment()).toMatchSnapshot();
    });
});
