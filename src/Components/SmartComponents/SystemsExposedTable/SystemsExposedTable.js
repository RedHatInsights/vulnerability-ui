import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { useUrlParams } from '../../../Helpers/MiscHelper';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import React, { useEffect, useState } from 'react';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';
import { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import DownloadReport from '../../../Helpers/DownloadReport';
import {
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    expandRow,
    changeExposedSystemsParameters,
    clearInventoryStore,
    selectRows,
    changeColumnsCveDetail
} from '../../../Store/Actions/Actions';
import { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';
import { TableVariant } from '@patternfly/react-table';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';
import { useColumnManagement, useGetEntities, useRbac } from '../../../Helpers/Hooks';
import * as APIHelper from '../../../Helpers/APIHelper';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';

const SystemsExposedTable = ({
    intl, cveName, cveStatusDetails, filterRuleValues,
    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory
}) => {
    const [[
        canReadHostsInventory],
    isLoadingInventory] = useRbac([
        PERMISSIONS.readHosts
    ], 'inventory');

    const dispatch = useDispatch();
    const [isAllExpanded, setIsAllExpanded] = useState(false);
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);

    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);
    const meta = useSelector(({ entities }) => entities?.meta);
    const error = useSelector(({ entities }) => entities?.error || {});
    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);
    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);
    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);

    const parameters = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,
        shallowEqual
    );
    const columns = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns
    );

    const apply = (params) => dispatch(changeExposedSystemsParameters(params));

    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));

    const [ColumnManagementModal, setColumnManagementModalOpen]
        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveDetail(newColumns)));

    useEffect(() => apply(urlParameters), []);

    useEffect(() => setUrlParams({ ...parameters, ...meta }), [parameters, meta]);

    useEffect(() => {
        return () => {
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    const downloadReport = format => {
        DownloadReport.exec(
            fetchAffectedSystemsByCVE,
            { id: cveName, ...parameters },
            format,
            'systems-exposed',
            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())
        );
    };

    const showStatusModal = (cves, inventories) => {
        setStatusModal(
            () => () =>
                <CvePairStatusModal
                    cveList={cves}
                    updateRef={() => {
                        refreshInventory();
                        dispatch(fetchCveDetails(cveName));
                    }}
                    inventoryList={inventories}
                    type="systemsExposed"
                />
        );
    };

    const expandAll = (rawData, isAllExpanded) => {
        rawData.data.forEach(row => {
            dispatch((expandRow(row.id, !isAllExpanded)));
        });
        setIsAllExpanded(!isAllExpanded);
    };

    const getEntities = useGetEntities(
        APIHelper.getAffectedSystemsByCVE,
        {
            id: cveName,
            createRows: createExposedSystemsRows
        }
    );

    const [columnCounter, setColumnCount] = useState(0);
    useEffect(() => setColumnCount(columnCounter + 1), [columns]);

    const mergeColumns = inventoryColumns => {
        return columns
            .filter(column => column.isShown ?? column.isShownByDefault)
            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));
    };

    // TODO: let InventoryTable render its own toolbar instead of using custom one
    return (
        <Stack hasGutter>
            <StackItem>
                <TextContent>
                    <Text component={TextVariants.h2} id="systems-exposed-table-header">
                        {intl.formatMessage(messages.affectsSystems)}
                    </Text>
                </TextContent>
            </StackItem>
            <StackItem>
                {isLoadingInventory ? <Spinner centered/> :
                    error?.hasError && !canReadHostsInventory
                        ? <ErrorHandler code={error?.errorCode}/>
                        : <InventoryTable
                            disableDefaultColumns
                            onLoad={({ mergeWithEntities }) => {
                                ReducerRegistry.register({
                                    ...mergeWithEntities(
                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),
                                        {
                                            page: Number(parameters.page || 1),
                                            perPage: 20,
                                            ...(parameters.sort && {
                                                sortBy: {
                                                    key: parameters.sort.replace(/^-/, ''),
                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'
                                                }
                                            })
                                        }
                                    )
                                });
                            }}
                            tableProps={{
                                isStickyHeader: true,
                                canSelectAll: false,
                                actionResolver: () => canEditPairStatus && totalItems &&
                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),
                                variant: TableVariant.compact
                            }}
                            paginationProps={{
                                isDisabled: !totalItems
                            }}
                            showTagModal
                            isFullView
                            ref={inventoryRef}
                            autoRefresh
                            key="inventory"
                            customFilters={{
                                vulnerabilityParams: {
                                    ...parameters
                                }
                            }}
                            expandable={hasSecurityRule}
                            columnsCounter={columnCounter}
                            columns={defaultColumns => mergeColumns(defaultColumns)}
                            getEntities={getEntities}
                            hasCheckbox={totalItems !== 0}
                            showActions={totalItems !== 0}
                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}
                            hideFilters={{ all: true }}
                            noSystemsTable={<EmptyStateNoSystems/>}
                        >
                            <SystemsExposedTableToolbar
                                rawData={{ data: items, meta: { totalItems }, isLoaded }}
                                parameters={parameters}
                                cveName={cveName}
                                expandAll={expandAll}
                                hasSecurityRule={hasSecurityRule}
                                isAllExpanded={isAllExpanded}
                                selectedRows={selectedRows}
                                selectedRowsCount={selectedRowsCount}
                                cveStatusDetails={cveStatusDetails}
                                filterRuleValues={filterRuleValues}
                                methods={{
                                    downloadReport,
                                    apply,
                                    handleSelect,
                                    showStatusModal,
                                    setColumnManagementModalOpen
                                }}
                                canEditPairStatus={canEditPairStatus}
                                canExport={canExport}
                            >
                                {StatusModal && <StatusModal/>}

                                { ColumnManagementModal }
                            </SystemsExposedTableToolbar>
                        </InventoryTable>}
            </StackItem>
        </Stack>
    );
};

SystemsExposedTable.propTypes = {
    intl: propTypes.object,
    cveName: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.array,
    hasSecurityRule: propTypes.bool,
    canEditPairStatus: propTypes.bool,
    canExport: propTypes.bool,
    inventoryRef: propTypes.object,
    refreshInventory: propTypes.func
};

export default injectIntl(SystemsExposedTable);
