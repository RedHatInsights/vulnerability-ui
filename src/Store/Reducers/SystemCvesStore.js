import {
    CHANGE_COLUMNS_SYSTEM_DETAIL,
    CHANGE_SYSTEM_CVE_LIST_PARAMETERS,
    CLEAR_SYSTEM_CVES_STORE,
    EXPAND_SYSTEM_CVE,
    FETCH_SYSTEM_CVE_LIST,
    SELECT_SYSTEM_CVE
} from '../ActionTypes';
import { SYSTEM_DETAILS_HEADER } from '../../Helpers/constants';
import { isTimestampValid } from './reducersHelper';

export const initialState = {
    parameters: {
        page: 1,
        page_size: 20,
        sort: '-public_date'
    },
    cveList: {
        isLoading: true,
        payload: [],
        meta: new Date(),
        error: false
    },
    expandedRows: [],
    selectedCves: [],
    isAllExpanded: false,
    columns: SYSTEM_DETAILS_HEADER
};

export const SystemCvesStore = (state = initialState, action) => {
    let newState = { ...state };

    const { payload, meta } = action;

    switch (action.type) {
        case FETCH_SYSTEM_CVE_LIST + '_PENDING':
            newState.timestamp = meta;
            newState.cveList.isLoading = true;

            return newState;

        case FETCH_SYSTEM_CVE_LIST + '_REJECTED':
            newState.timestamp = meta;
            newState.cveList = {
                payload: { errors: payload },
                isLoading: false
            };

            return newState;

        case FETCH_SYSTEM_CVE_LIST + '_FULFILLED':
            if (isTimestampValid(state.timestamp, meta)) {
                newState.timestamp = meta;
                newState.cveList = {
                    payload,
                    isLoading: false
                };

                if (state.isAllExpanded) {
                    newState.expandedRows = payload.data.map(({ id }) => ({ id, isOpen: true }));
                }
            }

            return newState;

        case CHANGE_SYSTEM_CVE_LIST_PARAMETERS:
            newState.parameters = { ...state.parameters, ...payload };

            return newState;

        case CHANGE_COLUMNS_SYSTEM_DETAIL:
            newState.columns = payload;
            return newState;

        case SELECT_SYSTEM_CVE: {
            let selectedCves = newState.selectedCves.slice();

            if (Array.isArray(payload)) {
                selectedCves = payload;
            } else {
                const selectedCve = selectedCves.find(cve => cve.id === payload.id);

                if (selectedCve) {
                    selectedCves.splice(selectedCves.indexOf(selectedCve), 1);
                } else {
                    selectedCves.push(payload);
                }
            }

            newState.selectedCves = selectedCves;

            return newState;
        }

        case EXPAND_SYSTEM_CVE: {
            const { isOpen, cves, isAllExpanded } = payload;
            let expandedRows = newState.expandedRows.slice();

            if (cves.length > 0) {
                cves.map(cve => {
                    const index = expandedRows.findIndex(element => element.id === cve);
                    if (index > -1) { expandedRows[index] = ({ id: cve, isOpen }); }
                    else { expandedRows.push({ id: cve, isOpen }); }
                });
            }
            else {
                expandedRows = expandedRows.map(cve => ({ id: cve.id, isOpen: false }));
            }

            newState.expandedRows = expandedRows;
            newState.isAllExpanded = isAllExpanded;

            return newState;
        }

        case CLEAR_SYSTEM_CVES_STORE:
            newState.selectedCves = [];
            newState.expandedRows = [];
            newState.parameters = {
                page: 1,
                page_size: 20
            };

            return newState;

        default:
            return state;
    }
};
