import React, { useEffect, Fragment, useState, useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import SystemsTableToolbar from './SystemsTableToolbar';
import { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import Header from '../../PresentationalComponents/Header/Header';
import { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeSystemsParams,
    selectMultipleEntities,
    clearSystemStore,
    clearInventoryStore
} from '../../../Store/Actions/Actions';
import { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { TableVariant } from '@patternfly/react-table';
import { useNotification } from '../../../Helpers/Hooks';
import useDeepCompareEffect from 'use-deep-compare-effect';

const createRows = ({ data }) => {
    const items = data?.map(item => {
        const { cve_count: cveCount, ...rest } = item.attributes;
        return {
            cve_count: cveCount,
            id: item.attributes.inventory_id,
            ...rest
        };
    });
    return items || [];
};

const SystemsPage = ({ intl }) => {
    const [selectedHosts, setSelectedHosts] = useState(undefined);
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);
    const [isFirstMount, setFirstMount] = useState(true);
    const addNotification = useNotification({ variant: 'success' });

    const inventory = React.createRef();
    const dispatch = useDispatch();

    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);

    const parameters = useSelector(
        ({ SystemsPageStore }) => SystemsPageStore.params,
        shallowEqual
    );

    const metadata = useSelector(
        ({ SystemsPageStore }) => SystemsPageStore.metadata
    );

    const { hasError, errorCode } = useSelector(
        ({ SystemsPageStore }) => SystemsPageStore.error
    );

    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);

    const items = useMemo(() => createRows(systems), [systems]);

    useEffect(() => {
        return () => {
            dispatch(clearSystemStore());
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    useEffect(()=>{
        if (selectedHosts) {
            dispatch(selectMultipleEntities(selectedHosts));
        }
    }, [selectedHosts, dispatch]);

    const apply = (config) => {
        dispatch(changeSystemsParams(config));
    };

    //DRY: SystemsExposed page has also the same function
    const inventoryRefresh = ({ page, per_page: pageSize }) => {
        if (metadata.page !== page || metadata.limit !== pageSize) {
            apply({ page, page_size: pageSize });
        }

        if (metadata && metadata.total_items <= pageSize && inventory.current) {
            inventory.current.onRefreshData({ page, page_size: pageSize });
        }
    };

    useEffect(() => {
        apply(urlParameters);
        setFirstMount(false);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useDeepCompareEffect(() => {
        if (!isFirstMount) {
            setUrlParams({ ...parameters });
            dispatch(fetchSystems(parameters));
        }
    }, [parameters, isFirstMount]);

    const handleSelect = (isChecked, payload) => {
        if (!payload) { payload = []; }

        setSelectedHosts(payload);
    };

    const doOptOut = (systemId = null, optOut) => {
        if (selectedHosts && (selectedHosts.length > 0) || systemId) {
            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {
                dispatch(fetchSystems({ ...parameters, page: 1 }));

                let count = systemId ? 1 : selectedHosts.length || 0;

                if (optOut) {
                    addNotification({ msg: intl.formatMessage(messages.systemsExcludedNotification, { count }) });
                } else {
                    addNotification({
                        msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),
                        description: intl.formatMessage(messages.systemsResumedNotificationBody)
                    });
                }

                setSelectedHosts([]);
            });
        }
    };

    const sortBy = () =>
        createSortBy(
            SYSTEMS_SORTING_HEADER,
            metadata.sort
        );

    const onSort = (event, index, direction) =>
        handleSortColumn(
            index,
            direction,
            SYSTEMS_SORTING_HEADER,
            urlParameters.sort,
            apply
        );

    return (
        <Fragment>
            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />
            <Main>
                <Fragment>
                    { hasError
                        ? <ErrorHandler code={errorCode} />
                        : (<InventoryTable
                            disableDefaultColumns
                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {
                                ReducerRegistry.register({
                                    ...mergeWithEntities(
                                        inventoryEntitiesReducer(SYSTEMS_HEADER)
                                    ),
                                    ...mergeWithDetail()
                                });
                            }}
                            tableProps={{
                                isStickyHeader: true,
                                canSelectAll: false,
                                onSort: (items.length > 0) && onSort,
                                sortBy: (items.length > 0) && sortBy(),
                                actionResolver: (rowData) => systemTableRowActions(rowData,  doOptOut),
                                variant: TableVariant.compact
                            }}
                            showTags
                            isFullView
                            ref={inventory}
                            items={items}
                            page={metadata && metadata.page || 1 }
                            perPage={metadata && metadata.page_size || 20}
                            total={metadata && metadata.total_items || 0}
                            onRefresh={inventoryRefresh}
                            isLoaded = {!isLoading}
                            hasCheckbox={systems.length !== 0}
                        >
                            {systems.data && (<SystemsTableToolbar
                                parameters = {parameters}
                                systems = {systems}
                                selectedHosts = {selectedHosts || []}
                                methods = {{
                                    doOptOut,
                                    apply,
                                    handleSelect,
                                    setSelectedHosts
                                }}
                                actions
                            />)}
                        </InventoryTable>
                        )}
                </Fragment>
            </Main>
        </Fragment>
    );
};

SystemsPage.propTypes  = {
    intl: propTypes.any
};

export default injectIntl(SystemsPage);
