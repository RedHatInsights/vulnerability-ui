import React, { useState } from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    Form,
    FormGroup,
    TextInput,
    Checkbox,
    TextArea,
    Dropdown,
    DropdownItem,
    DropdownToggle,
    Stack
} from '@patternfly/react-core';
import { AngleDownIcon } from '@patternfly/react-icons';
import CustomReportFilter from '../Reports/CustomReportFilter';
import { createCustomReport } from '../Reports/ReportsHelper';
import { FILTERS } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';

const ReportConfigModal = ({ isOpen, onClose }) => {
    const [isFilterMenuOpen, setFilterMenuOpen] = useState(false);
    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));
    const [userNotes, setUserNotes] = useState('');
    const [activeFilters, setActiveFilters] = useState([]);
    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(FILTERS));
    const [filterData, setFilterData] = useState({
        businessRiskId: [],
        statusId: [],
        severity: [],
        publishDate: 'all',
        securityRules: 'all',
        exposedSystems: 'hide',
        cvssScore: {
            min: 0.0,
            max: 10.0
        }
    });

    const requestCustomReport = () => {
        createCustomReport(filterData, {
            activeFilters,
            columnsToInclude,
            userNotes,
            reportTitle
        });
    };

    const toggleFilterDropdown = () => {
        setFilterMenuOpen(!isFilterMenuOpen);
    };

    const closeFilterDropdown = () => {
        setFilterMenuOpen(false);
    };

    const addFilter = (newFilter) => {
        if (!activeFilters.includes(newFilter)) {
            setActiveFilters([...activeFilters, newFilter]);
        }
    };

    const removeFilter = (filterToDelete) => {
        const index = activeFilters.indexOf(filterToDelete);

        if (index > -1) {
            // necessary to prevent state mutation with splice
            let temp = activeFilters.slice();
            temp.splice(index, 1);
            setActiveFilters(temp);
        }
    };

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        } else {
            setColumnsToInclude(
                columnsToInclude.filter((item) => item !== parameter)
            );
        }
    };

    const filterDropdownOptions = Object.entries(FILTERS).map(([key, value]) => (
        <DropdownItem
            key={key}
            isDisabled={activeFilters.includes(key)}
            onClick={() => addFilter(key)}
        >
            {value.dropdownOverrideTitle || value.title}
        </DropdownItem>
    ));

    return (
        <Modal
            title={intl.formatMessage(messages.configModalTitle)}
            variant="small"
            isOpen={isOpen}
            onClose={onClose}
            actions={[
                <Button
                    key="save"
                    variant="primary"
                    onClick={requestCustomReport}
                    isDisabled={
                        +filterData.cvssScore.min < 0 ||
                        +filterData.cvssScore.max > 10 ||
                        +filterData.cvssScore.min > +filterData.cvssScore.max
                    }
                >
                    {intl.formatMessage(messages.configModalExportReport)}
                </Button>,
                <Button
                    key="cancel"
                    variant="secondary"
                    onClick={onClose}
                >
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <Form>
                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId="horizontal-form-name">
                    <TextInput
                        value={reportTitle}
                        onChange={(value) => setReportTitle(value)}
                        type="text"
                        id="horizontal-form-name"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}
                    fieldId="horizontal-form-name"
                >
                    {/* maybe isolate this div inside variable?*/}
                    <div style={{ columnCount: 2 }}>
                        <Checkbox
                            id="cve_id"
                            label="CVE ID"
                            isChecked
                            isDisabled
                            className="pf-u-mb-md"
                        />
                        {
                            Object.entries(FILTERS).map(([key, value]) => {return (
                                <Checkbox
                                    id={key}
                                    key={key}
                                    label={value.checkboxOverrideTitle || value.title}
                                    isChecked={columnsToInclude.includes(key)}
                                    onChange={(newValue) =>
                                        handleCheckboxChange(key, newValue)
                                    }
                                    className="pf-u-mb-md"
                                />
                            );})
                        }
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}
                    fieldId="horizontal-form-name"
                >
                    {activeFilters.length === 0 ? (
                        <span style={{ color: 'var(--pf-global--Color--200)' }}>
                            {intl.formatMessage(messages.configModalNoFilters)}
                            <br />
                        </span>
                    ) : (
                        <Stack hasGutter>
                            {activeFilters &&
                                    activeFilters.map((item) => {
                                        return (
                                            <CustomReportFilter
                                                key={item}
                                                filterName={item}
                                                handleRemove={(item) =>
                                                    removeFilter(item)
                                                }
                                                filterData={filterData}
                                                setFilterData={setFilterData}
                                            />
                                        );
                                    })}
                        </Stack>
                    )}

                    <Dropdown
                        isPlain
                        direction="up"
                        onSelect={closeFilterDropdown}
                        toggle={
                            <DropdownToggle
                                id="filterToggle"
                                onToggle={toggleFilterDropdown}
                                toggleIndicator={AngleDownIcon}
                                style={{
                                    padding: '0px',
                                    color: 'var(--pf-global--link--Color)'
                                }}
                            >
                                {intl.formatMessage(messages.configModalAddFilter)}
                            </DropdownToggle>
                        }
                        isOpen={isFilterMenuOpen}
                        dropdownItems={filterDropdownOptions}
                        className="pf-u-mt-md"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportUserNotesLabel)}
                    fieldId="horizontal-form-name"
                >
                    <TextArea
                        value={userNotes}
                        onChange={(value) => setUserNotes(value)}
                        type="text"
                        id="horizontal-form-name"
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
};

ReportConfigModal.propTypes = {
    isOpen: propTypes.bool,
    onClose: propTypes.func
};

export default ReportConfigModal;
