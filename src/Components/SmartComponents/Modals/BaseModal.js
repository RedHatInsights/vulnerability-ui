import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextInput } from '@patternfly/react-core';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { connect } from 'react-redux';
import { STATUS_OPTIONS } from '../../../Helpers/constants';

export function useStatusSelect(initialValue) {
    const [statusId, setStatusId] = useState(initialValue);
    const [props, setProps] = useState({});
    const StatusSelect = (
        <FormGroup label="Status" fieldId={'statusId'}>
            <FormSelect aria-label="Select Input" onChange={selection => setStatusId(selection)} value={statusId} {...props}>
                {STATUS_OPTIONS.map(({ value, label }) => (
                    <FormSelectOption key={value} value={value} label={label} />
                ))}
            </FormSelect>
        </FormGroup>
    );
    return { StatusSelect, statusId, setStatusId, setProps };
}

export function useJustificationInput(initialValue) {
    const [justification, setJustification] = useState(initialValue);
    const [props, setProps] = useState({});
    const JustificationInput = (
        <FormGroup label="Justification" fieldId={'label'}>
            <TextInput
                key="input"
                type="text"
                onChange={value => setJustification(value)}
                value={justification}
                aria-label={'justification'}
                {...props}
            />
        </FormGroup>
    );
    return { JustificationInput, justification, setJustification, setProps };
}

export const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {
    const [targetItems, setTargetItems] = useState(items);

    const createNotification = notification => {
        return props.addNotification(notification);
    };

    const handleClose = () => {
        setTargetItems(undefined);
    };

    const handleSave = () => {
        onSave().then(() => createNotification(onSuccessNotification));
        handleClose();
    };

    return (
        <React.Fragment>
            <Modal
                isSmall
                title={title}
                isOpen={Boolean(targetItems)}
                isFooterLeftAligned
                onClose={handleClose}
                actions={[
                    <Button key="save" variant="primary" onClick={handleSave}>
                        Save
                    </Button>,
                    <Button key="cancel" variant="secondary" onClick={handleClose}>
                        Cancel
                    </Button>
                ]}
            >
                {props.children}
            </Modal>
        </React.Fragment>
    );
};

BaseModal.propTypes = {
    children: propTypes.any,
    onClose: propTypes.func,
    items: propTypes.array,
    updateRef: propTypes.func,
    addNotification: propTypes.func,
    title: propTypes.string,
    onSave: propTypes.func,
    onSuccessNotification: propTypes.object
};

const mapDispatchToProps = dispatch => {
    return {
        addNotification: data => dispatch(addNotification(data))
    };
};

export default connect(
    null,
    mapDispatchToProps
)(BaseModal);
