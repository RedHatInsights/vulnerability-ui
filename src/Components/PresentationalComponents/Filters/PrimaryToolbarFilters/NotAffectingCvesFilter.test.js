import notAffectingCvesFilter from './NotAffectingCVEsFilter'

describe('NotAffectingCvesFilter', () => {
    const applyMock = jest.fn();

    it('Should render the option items', () => {
        const options = [ 
            { 
                label: 'Hide CVEs that do not affect my inventory',
                value: 'hide' 
            },
            { 
                label: 'Show CVEs that do not affect my inventory',
                value: 'show' 
            } 
        ]
        const comp = notAffectingCvesFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue', () => {
        let comp = notAffectingCvesFilter(applyMock)
        expect(comp.filterValues.value).toBe('show')
    })

    it('Should use currentValue show', () => {
        let currentFilter = { show_all: '' }
        let comp = notAffectingCvesFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('show')

        currentFilter = { show_all: undefined }
        comp = notAffectingCvesFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('show')
    })

    it('Should use currentValue hide', () => {
        let currentFilter = { show_all: 'hide' }
        let comp = notAffectingCvesFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('hide')
    })

    it('Should call apply with params', () => {
        let currentFilter = { show_all: 'hide' }
        let comp = notAffectingCvesFilter(applyMock, currentFilter)
        comp.filterValues.onChange('event', 'show')
        expect(applyMock).toBeCalledWith({ show_all: '', page: 1 })

        comp.filterValues.onChange('event', 'hide')
        expect(applyMock).toBeCalledWith({ show_all: true, page: 1 })
       
    })

})
