import some from 'lodash/some';
import propTypes from 'prop-types';
import React from 'react';
import { Redirect, Route, Switch, withRouter } from 'react-router-dom';
import { getSystems } from '../../../Helpers/APIHelper';
import asyncComponent from '../../../Utilities/asyncComponent';
import { paths } from '../../../Utilities/Routes';

const VulnerabilitiesCVEs = asyncComponent(() => import(/* webpackChunkName: "VulnerabilitiesCVEs" */ '../CVEs/CVEs'));
const CVEPage = asyncComponent(() => import(/* webpackChunkName: "CVEPage" */ '../CVEPage/CVEPage'));

const Systems = asyncComponent(() => import(/* webpackChunkName: "Systems" */ '../Systems/Systems'));
const InventoryDetail = asyncComponent(() =>
    import(/* webpackChunkName: "InventoryDetail" */ '../InventoryDetail/InventoryDetail')
);
const Upgrade = asyncComponent(() => import(/* webpackChunkName: "Upgrade" */ '../EmptyPage/EmptyPage'));

class Vulnerabilities extends React.Component {
    static propTypes = {
        location: propTypes.object.isRequired,
        history: propTypes.object
    };

    constructor(props) {
        super(props);
    }

    componentDidMount() {
        const { location, history } = this.props;
        if (location.pathname !== paths.upgrade.to) {
            getSystems({ page_size: 1 }).then(res => {
                res.meta && res.meta.total_items <= 0 && history.replace(paths.upgrade.to);
            });
        }
    }

    render() {
        const { props } = this;

        let path = props.location.pathname;
        return (
            <React.Fragment>
                <Switch>
                    <Route exact path={paths.vulnerabilitiesCves.to} component={VulnerabilitiesCVEs} />
                    <Route exact path={paths.systems.to} component={Systems} />
                    <Route path={paths.inventoryDetail.to} component={InventoryDetail} />
                    <Route exact path={paths.cvePage.to} component={CVEPage} />
                    <Route exact path={paths.upgrade.to} component={Upgrade} />
                    <Redirect from={paths.cvepagePath.to} to={paths.inventoryDetail.to} />
                    <Route
                        render={() => (some(paths, p => p.to === path) ? null : <Redirect to={paths.vulnerabilitiesCves.to} />)}
                    />
                </Switch>
            </React.Fragment>
        );
    }
}

export default withRouter(Vulnerabilities);
