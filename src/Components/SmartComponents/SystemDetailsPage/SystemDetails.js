import React from 'react';
import propTypes from 'prop-types';
import { useSelector } from 'react-redux';
import { ConnectedSystemCves } from '../SystemCves/SystemCves';
import {
    EmptyStateExcludedSystem,
    NotAuthorized
} from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';
import { intl } from '../../../Utilities/IntlProvider';
import messages from '../../../Messages';
import { PERMISSIONS } from '../../../Helpers/constants';
import { useRbac } from '../../../Helpers/Hooks';

const SystemDetails = ({ optOutSystemHandler }) => {
    const { entity, loaded, opt_out: isOptOut } = useSelector(state => state.entityDetails) ?? {};

    const [[
        canExport,
        canReadVulnerabilityResults,
        canEditPairStatus,
        canReadExcluded
    ], isRbacLoading] = useRbac([
        PERMISSIONS.basicReporting,
        PERMISSIONS.readVulnerabilityResults,
        PERMISSIONS.setPairStatus,
        PERMISSIONS.readExcluded]
    );

    if (isRbacLoading) {
        return <Spinner centered />;
    } else if (canReadVulnerabilityResults) {
        if (entity && loaded && isOptOut) {
            if (canReadExcluded) {
                return <EmptyStateExcludedSystem buttonAction={() => optOutSystemHandler(entity.display_name, false)} />;
            } else {
                return <NotAuthorized title={intl.formatMessage(messages.notAuthorizedNoAccessForSystem)} />;
            }
        } else {
            return <ConnectedSystemCves
                entity={{ id: entity?.id, display_name: entity?.display_name }}
                showHeaderLabel
                setPageTitle
                canExport={canExport}
                canEditPairStatus={canEditPairStatus}
            />;
        }
    } else {
        return <NotAuthorized />;
    }
};

SystemDetails.propTypes = {
    optOutSystemHandler: propTypes.func
};

export default SystemDetails;
