
import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';
import { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';
import { intl } from '../../../../Utilities/IntlProvider';
import messages from '../../../../Messages';
import unionWith from 'lodash/unionWith';
import isEqual from 'lodash/isEqual';

const securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {
    let currentValue = [];
    if (currentFilter.rule_presence) {
        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));
    }

    if (currentFilter.rule_key) {
        currentValue = currentValue.concat(currentFilter.rule_key.split(','));
    }

    const filterBySecurityRule = values => {
        apply({
            rule_presence: values.filter(value => ['true', 'false'].includes(value)).join(',') || undefined,
            rule_key: values.filter(value => !['true', 'false'].includes(value)).join(',') || undefined,
            page: 1
        });
    };

    return {
        label: intl.formatMessage(messages.securityRules),
        type: conditionalFilterType.checkbox,
        filterValues: {
            onChange: (event, value) => {
                filterBySecurityRule(value);
            },
            items:
                unionWith(RULE_PRESENCE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),
            value: currentValue
        }
    };
};

export default securityRuleFilter;
