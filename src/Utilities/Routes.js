import some from 'lodash/some';
import PropTypes from 'prop-types';
import React from 'react';
import { Route, Switch, matchPath } from 'react-router-dom';
import asyncComponent from './asyncComponent';

/**
 * Aysnc imports of components
 *
 * https://webpack.js.org/guides/code-splitting/
 * https://reactjs.org/docs/code-splitting.html
 *
 * pros:
 *      1) code splitting
 *      2) can be used in server-side rendering
 * cons:
 *      1) nameing chunk names adds unnecessary docs to code,
 *         see the difference with DashboardMap and InventoryDeployments.
 *
 */
const Vulnerabilities = asyncComponent(() =>
    import(/* webpackChunkName: "Vulnerabilities" */ '../Components/SmartComponents/Vulnerabilities/Vulnerabilities')
);
export const paths = {
    vulnerabilities: '/:subpage?'
};

const InsightsRoute = ({ component: Component, rootClass, ...rest }) => {
    const root = document.getElementById('root');
    root.removeAttribute('class');

    root.classList.add(`page__${rootClass}`, 'pf-l-page__main');
    root.setAttribute('role', 'main');

    return <Route {...rest} component={Component} />;
};

function checkPaths(routes) {
    return some(Object
    .values(routes), route => matchPath(location.href, { path: `${document.baseURI}platform/vulnerability${route}` }));
}

InsightsRoute.propTypes = {
    component: PropTypes.func,
    rootClass: PropTypes.string
};

/**
 * the Switch component changes routes depending on the path.
 *
 * Route properties:
 *      exact - path must match exactly,
 *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules
 *      component - component to be rendered when a route has been chosen.
 */
export const Routes = ({ childProps: { history } }) => {
    if (!checkPaths(paths)) {
        history.push(paths.cve_browser);
    }

    return (
        <Switch>
            <InsightsRoute path={paths.vulnerabilities} component={Vulnerabilities} rootClass="Vulnerabilities" />
        </Switch>
    );
};

Routes.propTypes = {
    childProps: PropTypes.shape({
        history: PropTypes.shape({
            push: PropTypes.func
        })
    })
};
