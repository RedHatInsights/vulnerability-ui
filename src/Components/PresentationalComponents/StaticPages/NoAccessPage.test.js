import NoAccessPage from './NoAccessPage';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { intl } from '../../../Utilities/IntlProvider';

const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

describe('NoAccessPage component', () => {
    it('Should match snapshot', () => {
        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <NoAccessPage intl={intl} />
                </Router>
            </Provider>);

        expect(toJson(wrapper)).toMatchSnapshot();
    })

    it('Should correct button text depending on the referrer', () => {
        const wrapperWithoutReferer = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <NoAccessPage intl={intl} />
                </Router>
            </Provider>);

        expect(wrapperWithoutReferer.find('a').text()).toEqual('Go to landing page');
        expect(wrapperWithoutReferer.find('a').prop('href')).toEqual('.');

        Object.defineProperty(document, 'referrer', { value: 'Referrer Test', configurable: true });

        const wrapperWithReferer = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <NoAccessPage intl={intl} />
                </Router>
            </Provider>);

        expect(wrapperWithReferer.find('button').text()).toEqual('Return to previous page');
    })
});
