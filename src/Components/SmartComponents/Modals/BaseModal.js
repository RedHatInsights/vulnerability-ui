import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';
import {
    addNotification
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

export function useStatusSelect(initialValue) {
    const [statusId, setStatusId] = useState(initialValue);
    const [props, setProps] = useState({});

    const StatusSelect = (
        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId="statusId">
            <FormSelect aria-label="Select Input" onChange={selection => setStatusId(selection)} value={statusId} {...props}>
                {STATUS_OPTIONS.map(({ value, label }) => (
                    <FormSelectOption key={value} value={value} label={label} />
                ))}
            </FormSelect>
        </FormGroup>
    );

    return { StatusSelect, statusId, setStatusId, setProps };
}

export function useJustificationInput(initialValue) {
    const [justification, setJustification] = useState(initialValue);
    const [props, setProps] = useState({});

    const JustificationInput = (
        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId="label">
            <TextArea
                key="input"
                type="text"
                onChange={value => setJustification(value)}
                value={justification}
                resizeOrientation="vertical"
                aria-label="justification note"
                style={{ minHeight: '2.25rem' }}
                {...props}
            />
        </FormGroup>
    );
    return { JustificationInput, justification, setJustification, setProps };
}

export const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {
    const [targetItems, setTargetItems] = useState(items);

    const dispatch = useDispatch();

    const handleClose = () => {
        setTargetItems(undefined);
    };

    const handleSave = () => {
        onSave()
            .then(() => dispatch(addNotification(onSuccessNotification)))
            .catch((error) => dispatch(addNotification(error.status === '503' ? ReadOnlyNotification : onFailureNotification)));
        handleClose();
    };

    return (
        <Modal
            variant="small"
            title={title}
            isOpen={Boolean(targetItems)}
            onClose={handleClose}
            actions={[
                <Button key="save" variant="primary" ouiaId="save" onClick={handleSave}>
                    <FormattedMessage {...messages.save} />
                </Button>,
                <Button key="cancel" variant="secondary" ouiaId="close" onClick={handleClose}>
                    <FormattedMessage {...messages.cancel} />
                </Button>
            ]}
            ouiaId={ouiaId}
        >
            {children}
        </Modal>
    );
};

BaseModal.propTypes = {
    children: propTypes.any,
    onClose: propTypes.func,
    items: propTypes.array,
    updateRef: propTypes.func,
    title: propTypes.string,
    onSave: propTypes.func,
    onSuccessNotification: propTypes.object,
    onFailureNotification: propTypes.object,
    ouiaId: propTypes.string
};

export default BaseModal;
