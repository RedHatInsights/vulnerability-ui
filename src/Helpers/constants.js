import {
    Bullseye,
    Button,
    Card,
    CardBody,
    CardHeader,
    EmptyStateVariant,
    EmptyState,
    EmptyStateBody,
    EmptyStateIcon,
    Text,
    TextVariants,
    TextContent,
    Title
} from '@patternfly/react-core';
import { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';
import moment from 'moment';
import React from 'react';
/* eslint react/prop-types: 0 */

export const DEFAULT_PAGE_SIZE = 25;
export const PER_PAGE_OPTIONS = [
    { title: '10', value: 10 },
    { title: '25', value: 25 },
    { title: '50', value: 50 },
    { title: '100', value: 100 }
];

export const SystemExludedFromAnalysis = ({ buttonAction }) => (
    <Bullseye>
        <EmptyState variant={EmptyStateVariant.large}>
            <EmptyStateIcon icon={SecurityIcon} size={'lg'} />
            <Title headingLevel="h5" size="lg">
                Excluded from vulnerability analysis
            </Title>
            <EmptyStateBody>
                This system has been excluded from vulnerability analysis. It is not being evaluated for potential vulnerabilities
                by Red Hat Cloud Management Services.
            </EmptyStateBody>
            <Button variant="primary" component="a" onClick={buttonAction}>
                Resume vulnerability analysis
            </Button>
        </EmptyState>
    </Bullseye>
);

export const impactTextList = {
    critical:
        'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +
        ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +
        ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +
        ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.',
    important:
        'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +
        ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +
        ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +
        ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +
        ' of service.',
    moderate:
        'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +
        ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +
        ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +
        ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +
        ' configurations.',
    low:
        'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +
        ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +
        ' would give minimal consequences.'
};

export const impactColorList = {
    unknown: 'severity-unknown',
    default: 'severity-low',
    danger: 'severity-critical',
    warning: 'severity-moderate',
    orange: 'severity-color-important'
};

export const impactList = {
    Critical: {
        title: 'Critical',
        color: impactColorList.danger,
        text: impactTextList.critical
    },
    High: {
        title: 'High',
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Important: {
        title: 'Important',
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Medium: {
        title: 'Medium',
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Moderate: {
        title: 'Moderate',
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Low: {
        title: 'Low',
        color: impactColorList.default,
        text: impactTextList.low
    }
};

// Reports that no CVEs were found after filtering results
export const FilterNotFoundForCVE = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                No matching CVEs found
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    This may be for one of the following reasons:
                    <Text>
                        - The criteria/filters youâ€™ve specified result in no/zero CVEs being reported in your environment
                    </Text>
                    If you think these systems have applicable CVEs or would like more information, please
                    contact{' '}
                    <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                        Red Hat Product Security <ExternalLinkAltIcon />
                    </a>
                    .
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

export const FilterNotFoundForSystem = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                No matching systems found
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    This may be for one of the following reasons:
                    <Text component={TextVariants.p}>
                        - There are no systems that match your filter criteria
                    </Text>
                    <Text component={TextVariants.p}>
                        - The system may be excluded from vulnerability analysis
                    </Text>
                    {<br></br>}
                    <Text component={TextVariants.p}>
                    If you think this system has applicable CVEs, or would like more information,
                    please contact{' '}
                        <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                            Red Hat Product Security  <ExternalLinkAltIcon />
                        </a>
                    </Text>
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);
// Selected system do not have any CVEs
export const EmptyCVEListForSystem = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                No CVEs reported for this system
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <Text>
                            No published CVEs in the Vulnerability service affect this system.
                    </Text>
                    <Text component={TextVariants.p}>
                        If you think this system has applicable CVEs, or would like more information, please contact{' '}
                        <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                            Red Hat Product Security <ExternalLinkAltIcon />
                        </a>
                                .
                    </Text>

                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

// None of my systems is affected
export const EmptyCVEList = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                No CVEs reported for connected systems
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <Text>
                        No published CVEs in the Vulnerability service affect affect your connected systems
                    </Text>
                    If you think your systems have applicable CVEs, or would like more information, please contact{' '}
                    <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                        Red Hat Product Security <ExternalLinkAltIcon />
                    </a>
                    .
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

// Indicates that Insights is not activated
export const NoVulnerabilityData = (
    <Bullseye>
        <EmptyState>
            <EmptyStateIcon icon={CubesIcon} />
            <Title headingLevel="h5" size="lg">
                No vulnerability data
            </Title>
            <EmptyStateBody>Activate the Insights client for this system to report for vulnerabilities</EmptyStateBody>
            <Button
                variant="primary"
                component="a"
                href="http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted"
            >
                Learn about the Insights client
            </Button>
        </EmptyState>
    </Bullseye>
);

// Generic error
export const GenericError = (
    <Card className="ins-empty-rule-cards">
        <CardHeader>
            <FrownOpenIcon size="lg" />
        </CardHeader>
        <CardBody>There was an error getting data. Reload the page and try again</CardBody>
    </Card>
);

// Read-only mode notification text
export const ReadOnlyNotification = {
    title: 'Changes not saved',
    detail:
        ' The application is temporarily in read-only mode due to normal system maintenance.\
    Please try again later. Check status.redhat.com for more information.'
};

//CVSS Base score label to value
export const CVSSOptions = [
    { value: 'all', label: 'All' },
    { value: 'less4', label: '0.0 - 3.9', from: 0, to: 3.999 },
    { value: 'from4to8', label: '4.0 - 7.9', from: 4, to: 7.999 },
    { value: 'from8to10', label: '8.0 - 10.0', from: 8, to: 10 }
];

//Public date labels to value

export const PublicDateOptions = [
    { value: 'all', label: 'All' },
    { value: 'last7', label: 'Last 7 days', from: moment().subtract(7, 'days') },
    { value: 'last30', label: 'Last 30 days', from: moment().subtract(30, 'days') },
    { value: 'last90', label: 'Last 90 days', from: moment().subtract(90, 'days') },
    { value: 'lastYear', label: 'Last year', from: moment().subtract(1, 'years') },
    { value: 'MoreThanYear', label: 'More than 1 year ago', to: moment().subtract(1, 'years') }
];

// Filter categories
export const filtersShowAll = {
    type: 'checkbox',
    title: '',
    urlParam: 'show_all',
    isChecked: true,
    values: [{ label: 'Hide CVEs that do not affect my inventory', value: 'true' }]
};

export const filterCveSearchTerm = {
    type: 'input',
    title: 'Search term',
    urlParam: 'filter',
    values: []
};

export const filterSystemName = {
    type: 'input',
    title: 'Name',
    urlParam: 'filter',
    values: []
};

export const filtersSeverity = {
    type: 'checkbox',
    title: 'Impact',
    urlParam: 'impact',
    values: [
        { label: 'Critical', value: '7' },
        { label: 'Important', value: '5' },
        { label: 'Moderate', value: '4' },
        { label: 'Low', value: '2' },
        { label: 'Unknown', value: '1' }
    ]
};

export const filtersCVSSScore = {
    type: 'radio',
    title: 'CVSS base score',
    urlParam: 'cvss_filter',
    values: CVSSOptions.map(item => ({ label: item.label, value: item.value }))
};

export const filtersPublishDate = {
    type: 'radio',
    title: 'Publish date',
    urlParam: 'publish_date',
    values: PublicDateOptions.map(item => ({ label: item.label, value: item.value }))
};

export const STATUS_OPTIONS = [
    { label: 'Not reviewed', value: '0' },
    { label: 'In-review', value: '1' },
    { label: 'On-hold', value: '2' },
    { label: 'Scheduled for patch', value: '3' },
    { label: 'Resolved', value: '4' },
    { label: 'No action - risk accepted', value: '5' },
    { label: 'Resolved via mitigation', value: '6' }
];

export const filtersStatus = {
    type: 'checkbox',
    title: 'Status',
    urlParam: 'status_id',
    values: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))
};

export const businessRiskOptions = [
    {
        value: '3',
        label: 'High'
    },

    {
        value: '2',
        label: 'Medium'
    },
    {
        value: '1',
        label: 'Low'
    },
    {
        value: '0',
        label: 'Not defined'
    }
];

export const filtersBusinessRisk = {
    type: 'checkbox',
    title: 'Business risk',
    urlParam: 'business_risk_id',
    values: businessRiskOptions.map(item => ({ label: item.label, value: item.value }))
};

export const CVSSHeader =  ['CVSS score range', 'Number of CVEs'];
export const recentCvesHeader =  ['Time frame', 'Number of CVEs'];

export const CVSSMapping = {
    '8to10': '8.0 - 10.0',
    '4to7.9': '4.0 - 7.9',
    '0to3.9': '0.0 - 3.9'
};

export const recentCvesMapping = {
    last7days: 'Last 7 days',
    last30days: 'Last 30 days',
    last90days: 'Last 90 days'
};
