import { Main } from '@redhat-cloud-services/frontend-components/Main';
import React, { useMemo, useState, useEffect, Fragment } from 'react';
import { createCveDetailsPage } from '../../../Helpers/CVEHelper';
import { useDispatch, useSelector } from 'react-redux';
import {
    fetchCveDetails,
    changeExposedSystemsParameters,
    clearInventoryStore,
    clearCveStore
} from '../../../Store/Actions/Actions';
import { PATHS, PERMISSIONS } from '../../../Helpers/constants';
import CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';
import { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import CveStatusModal from '../Modals/CveStatusModal';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import Header from '../../PresentationalComponents/Header/Header';
import GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { useRbac } from '../../../Helpers/Hooks';
import { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useRouteMatch } from 'react-router-dom';
import { useIntl } from 'react-intl';
import messages from '../../../Messages';

export const CVEPageContext = React.createContext({ isLoading: true });

const CVEDetailsPage = () => {
    const dispatch = useDispatch();
    const inventoryRef = React.createRef();
    const match = useRouteMatch();
    const intl = useIntl();

    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([
        PERMISSIONS.setPairStatus,
        PERMISSIONS.setCveStatusAndBusinessRisk,
        PERMISSIONS.basicReporting,
        PERMISSIONS.readVulnerabilityResults
    ]);

    const [cveName] = useState(match.params.cve);
    const [BusinessModal, setBusinessRisk] = useState(() => () => null);
    const [StatusModal, setStatusModal] = useState(() => () => null);

    const details = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails
    );
    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);
    const totalItems = useSelector(({ entities }) => entities?.total);

    useEffect(() => {
        dispatch(fetchCveDetails(cveName));
    }, [dispatch, cveName]);

    const refreshInventory = () => (
        dispatch(clearInventoryStore()),
        inventoryRef.current.onRefreshData(({ page: 1 }))
    );

    const showBusinessRiskModal = cves => {
        setBusinessRisk(
            () => () =>
                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />
        );
    };

    const showStatusModal = cves => {
        setStatusModal(
            () => () =>
                <CveStatusModal
                    cves={cves}
                    updateRef={overwriteSystemsStatus => {
                        dispatch(fetchCveDetails(cveName));
                        overwriteSystemsStatus && refreshInventory();
                    }}
                    canEditPairStatus={canEditPairStatus}
                />
        );
    };

    useEffect(() => {
        return () => {
            dispatch(clearCveStore());
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const { error, data } = cveDetails;

    const cveStatusDetails = {
        id: cveName,
        status_id: cveDetails.data.status_id,
        justification: cveDetails.data.status_justification,
        exposed_systems_count: totalItems || 0
    };

    const cveBusinessRiskDetails = {
        business_risk_id: cveDetails.data.business_risk_id,
        id: cveName,
        justification: cveDetails.data.business_risk_justification
    };

    const kebabItems = [
        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),
        kebabItemEditStatus(showStatusModal, [cveStatusDetails])
    ];
    const { rules } = data;
    const filterRuleValues = rules && rules.map(
        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })
    );

    const createBreadcrumbs = lastSegment =>
        [
            {
                title: PATHS.cvesPage.title,
                to: PATHS.cvesPage.to,
                loaded: true
            },
            {
                title: lastSegment,
                isActive: true,
                loaded: true
            }
        ];

    return (
        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>
            {canReadVulnerabilityResults ? (
                error?.hasError ? (
                    <React.Fragment>
                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>
                        <ErrorHandler code={error?.errorCode} />
                    </React.Fragment>
                ) : (
                    <Fragment>
                        <Header
                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}
                            actions={canEditStatusOrBusinessRisk && kebabItems}
                            actionsOuiaId="cve-actions"
                            breadcrumbs={createBreadcrumbs(cveName)}
                            labels={[
                                <GroupedCVELabels
                                    key="labels"
                                    hasExploit={!!details.payload.data?.attributes.known_exploit}
                                    hasRule={details.payload.data?.attributes.rules.length > 0}
                                />
                            ]}
                        >
                            <CVEDetailsPageSummary
                                changeExposedSystemsParameters={changeExposedSystemsParameters}
                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}
                                data={cveDetails}
                                showStatusModal={() => showStatusModal([cveStatusDetails])}
                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}
                            />
                            <StatusModal />
                            <BusinessModal />
                        </Header>
                        <Main>
                            <SystemsExposedTable
                                cveName={cveName}
                                filterRuleValues={filterRuleValues}
                                cveStatusDetails={cveStatusDetails}
                                hasSecurityRule={rules?.length > 0}
                                canEditPairStatus={canEditPairStatus}
                                canExport={canExport}
                                inventoryRef={inventoryRef}
                                refreshInventory={refreshInventory}
                            />
                        </Main>
                    </Fragment>
                )) : (
                <React.Fragment>
                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />
                    <NotAuthorized />
                </React.Fragment>
            )}
        </CVEPageContext.Provider>
    );
};

export default CVEDetailsPage;
