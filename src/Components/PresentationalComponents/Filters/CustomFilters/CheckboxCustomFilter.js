import React, { useState } from 'react';
import propTypes from 'prop-types';
import { Select, SelectOption } from '@patternfly/react-core';

const CheckboxCustomFilter = ({ filterData, setFilterData, selectProps, options, filterName, filterId }) => {
    const [isOpen, setOpen] = useState(false);

    const handleOnCheckboxChange = (filterId, optionName) => {
        const optionId = options.find(item => item.label === optionName).value;
        if (!filterData[filterId].includes(optionId)) { // uncheck
            setFilterData({ ...filterData, [filterId]: [...filterData[filterId], optionId] });
        }
        else { // check
            let index = filterData[filterId].indexOf(optionId);
            let temp = filterData[filterId].slice();
            temp.splice(index, 1);
            setFilterData({ ...filterData, [filterId]: temp });
        }
    };

    return (
        <Select
            variant="checkbox"
            aria-label="Select Input"
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={`${filterName}: ${filterData[filterId].length === 0
                || filterData[filterId].length === options.length ? `All` :
                filterData[filterId].map(id =>
                    options.find(item => item.value === id).label).join(', ')}`}
            key={filterId}
            width='auto'
            className="custom-report-filter-select"
            onSelect={(event, optionName) => { handleOnCheckboxChange(filterId, optionName); }}
            selections={filterData[filterId].map(
                id => options.find(item => item.value === id).label)}
            isCheckboxSelectionBadgeHidden
            {... selectProps}
        >
            {options.map(item =>
                <SelectOption
                    key={filterId + item.label}
                    value={item.label}
                />
            )}
        </Select>
    );
};

CheckboxCustomFilter.propTypes = {
    filterName: propTypes.string,
    filterId: propTypes.string,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    selectProps: propTypes.object,
    options: propTypes.array
};

export default CheckboxCustomFilter;
