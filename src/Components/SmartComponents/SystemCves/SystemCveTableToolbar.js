import React, { useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './SystemCves';
import Remediation from '../Remediation/Remediation';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';

const SystemCveToolbarWithContext = ({ entity, intl, context }) => {

    const onExpandAllClick = () => {
        const { cves, methods, isAllExpanded } = context;
        const isOpen = !isAllExpanded;
        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(isOpen, expandedRows, !isAllExpanded);
    };

    const { cves, parameters, methods, selectedCves, isAllExpanded, canEditStatus, canRemediate } = context;
    const { filter, advisory } = parameters;
    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);

    const selectOptions  = useMemo(() => selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),
        multiRow: true
    }), [selectedCves, cves, parameters, methods]);

    const actions = ['',
        ...(canEditStatus ?
            [({
                label: intl.formatMessage(messages.editStatus),
                onClick: () => methods.showStatusModal(
                    [...selectedCves].map(item => ({
                        id: item,
                        ...cves.data.filter(cve => item === cve.id)
                        .map(item => ({
                            status_id: item.status_id,
                            cve_status_id: item.cve_status_id,
                            justification: item.status_justification,
                            cve_justification: item.cve_status_justification
                        }))[0]
                    })), []
                ),
                props: { isDisabled: !selectedCvesCount }
            })] : [])
    ];

    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));

    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    itemCount: cves.meta.total_items || 0,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    ouiaId: 'pagination-top',
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}
                actionsConfig={{
                    actions,
                    kebabToggleProps: { isDisabled: !selectedCvesCount || cves.meta.total_items === 0 },
                    dropdownProps: { ouiaId: 'toolbar-actions' }
                } }
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                    checked: Boolean(selectedCvesCount),
                    ouiaId: 'bulk-select',
                    onSelect: ()=> selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),
                        securityRuleFilter(methods.apply, parameters),
                        knownExploitFilter(methods.apply, parameters),
                        impactFilter(methods.apply, parameters),
                        cvssBaseScoreFilter(methods.apply, parameters),
                        businessRiskFilter(methods.apply, parameters),
                        publishDateFilter(methods.apply, parameters),
                        statusFilter(methods.apply, parameters),
                        searchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(parameters),
                    onDelete: (e, i) => removeFilters(i, methods.apply)
                }}
                exportConfig = {{
                    isDisabled: cves.meta.total_items === 0,
                    ouiaId: 'export',
                    ...exportConfig(methods)
                }}
                expandAll = {{
                    isAllExpanded,
                    onClick: onExpandAllClick
                }}
            />
        </React.Fragment>
    );

};

SystemCveToolbarWithContext.defaultProps = {
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

SystemCveToolbarWithContext.propTypes = {
    entity: propTypes.string,
    context: propTypes.object,
    intl: propTypes.any
};

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default injectIntl(SystemCveToolbar);
