import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Skeleton, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { getAffectedSystemsByCVE } from '../../../Helpers/APIHelper';
import useFeatureFlag from '../../../Utilities/useFeatureFlag';

const CVEDetailTableTitle = ({ cveName }) => {
    const [isLoading, setLoading] = useState(true);
    const [edgeDeviceExist, setEdgeDeviceExist] = useState(false);
    const [totalSystems, setTotalSystems] = useState(0);
    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');
    
    useEffect(() => {
        getAffectedSystemsByCVE({ id: cveName, host_type: 'edge', limit: 1 }).then(edgeDevice => {
            setEdgeDeviceExist(edgeDevice?.meta.total_items > 0);
            getAffectedSystemsByCVE({ id: cveName }).then(result => {
                setTotalSystems(result?.meta?.total_items || 0);
                setLoading(false);
            });
        }).catch(() => {
            setEdgeDeviceExist(false);
            setTotalSystems(0);
            setLoading(false);
        });
    }, []);

    return isLoading
        ?
        <Skeleton width="25%" screenreaderText="Loading contents" />
        : (<TextContent aria-label="Affected systems table title">
            <Text component={TextVariants.h2} id="systems-exposed-table-header">
                {edgeDeviceExist && isEdgeParityEnabled
                    ? `${totalSystems} Total ${totalSystems > 1 ? 'systems' : 'system' } affected`
                    : 'Systems'
                }
            </Text>
        </TextContent>);
};

CVEDetailTableTitle.propTypes = {
    cveName: PropTypes.string.isRequired
};
export default CVEDetailTableTitle;
