import React, { useState } from 'react';
import propTypes from 'prop-types';
import { Split, SplitItem, Radio, Text, TextInput, Select, SelectOption } from '@patternfly/react-core';
import {
    CVE_REPORT_FILTERS,
    BUSINESS_RISK_OPTIONS,
    STATUS_OPTIONS,
    PUBLIC_DATE_OPTIONS,
    IMPACT_OPTIONS
} from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import { ExclamationCircleIcon } from '@patternfly/react-icons';

const CustomReportFilter = ({ filterName, filterData, setFilterData }) => {
    const [isOpen, setOpen] = useState(false);

    const handleOnCheckboxChange = (filterName, optionName) => {
        const optionId = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;
        if (!filterData[filterName].includes(optionId)) { // uncheck
            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], optionId] });
        }
        else { // check
            let index = filterData[filterName].indexOf(optionId);
            let temp = filterData[filterName].slice();
            temp.splice(index, 1);
            setFilterData({ ...filterData, [filterName]: temp });
        }
    };

    const handleOnRadioChange = (filterName, optionName) => {
        const optionValue = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;
        setFilterData({ ...filterData, [filterName]: optionValue });
    };

    const handleCvssInputChange = (value, inputName) => {
        setFilterData({
            ...filterData, cvss_filter: {
                ...filterData.cvss_filter,
                [inputName]: value
            }
        });
    };

    const validateCvssInput = (inputName) => {
        const valueThis = +filterData.cvss_filter[inputName];
        const valueMin = +filterData.cvss_filter.min;
        const valueMax = +filterData.cvss_filter.max;

        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {
            return 'error';
        }

        return 'default';
    };

    const filterCheckboxes = (options, filterName) => (
        <Select
            variant="checkbox"
            aria-label="Select Input"
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}: ${filterData[filterName].length === 0
                || filterData[filterName].length === CVE_REPORT_FILTERS[filterName].items.length ? `All` :
                filterData[filterName].map(id =>
                    CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label).join(', ')}`}
            direction="up"
            key={filterName}
            width='auto'
            className="pf-u-mr-sm pf-u-mb-sm custom-report-filter-select"
            onSelect={(event, optionName) => { handleOnCheckboxChange(filterName, optionName); }}
            selections={filterData[filterName].map(
                id => CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label)}
            isCheckboxSelectionBadgeHidden
        >
            {options.map(item =>
                <SelectOption
                    key={filterName + item.label}
                    value={item.label}
                />
            )}
        </Select>
    );

    const filterRadios = (options, filterName) => (
        <Select
            variant="single"
            aria-label="Select Input"
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}:
                ${CVE_REPORT_FILTERS[filterName].items.find(item => item.value === filterData[filterName]).label}`}
            direction="up"
            key={filterName}
            onSelect={(event, optionName) => { handleOnRadioChange(filterName, optionName); }}
            className="pf-u-mr-sm pf-u-mb-sm"
            width="auto"
        >
            {options.map(item =>
                <SelectOption
                    width="100%"
                    key={filterName + item.label}
                    value={item.label}
                >
                    <Radio
                        aria-label="Select Input"
                        label={item.label}
                        value={item.label}
                        isChecked={filterData[filterName] === item.value}
                    />
                </SelectOption>
            )}
        </Select>
    );

    const filterCvssContent = (<Split className='pf-u-m-md'>
        <SplitItem>
            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br />
            <TextInput
                type="number"
                onChange={(v) => handleCvssInputChange(v, 'min')}
                validated={validateCvssInput('min')}
                id="cvss-min"
                value={filterData.cvss_filter.min}
                style={{ width: '5em' }}
            />
        </SplitItem>
        <SplitItem>
            <br /><span className="pf-u-m-sm">-</span>
        </SplitItem>
        <SplitItem>
            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br />
            <TextInput
                type="number"
                onChange={(v) => handleCvssInputChange(v, 'max')}
                validated={validateCvssInput('max')}
                id="cvss-max"
                value={filterData.cvss_filter.max}
                style={{ width: '5em' }}
            />
        </SplitItem>
    </Split>);

    const filterCvssGetLabel = () => {
        const min = +filterData.cvss_filter.min;
        const max = +filterData.cvss_filter.max;

        if (min === 0 && max === 10) {
            return `${CVE_REPORT_FILTERS.cvss_filter.title}: ${intl.formatMessage(messages.optionsAll)}`;
        }
        else {
            return (
                <Text>
                    {`${CVE_REPORT_FILTERS.cvss_filter.title}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}
                    {(min < 0 || max > 10 || min > max) &&
                        <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className="pf-u-ml-xs" />}
                </Text>
            );
        }
    };

    const filterCvssWrapper = (
        <Select
            variant="panel"
            aria-label="Select Input"
            customContent={filterCvssContent}
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={filterCvssGetLabel()}
            className="pf-u-mr-sm pf-u-mb-sm"
            direction="up"
            width="auto"
        />
    );

    const filterContent = name => {
        switch (name) {
            case 'status_id':
                return filterCheckboxes(STATUS_OPTIONS, 'status_id');
            case 'business_risk_id':
                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');
            case 'publish_date':
                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');
            case 'impact':
                return filterCheckboxes(IMPACT_OPTIONS, 'impact');
            case 'cvss_filter':
                return filterCvssWrapper;
            default:
                return null;
        }
    };

    return (filterContent(filterName));
};

CustomReportFilter.propTypes = {
    filterName: propTypes.string,
    filterData: propTypes.object,
    setFilterData: propTypes.func
};

export default CustomReportFilter;
