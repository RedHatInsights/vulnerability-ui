import './Systems.scss';
import propTypes from 'prop-types';
import React from 'react';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import { dataShape, useCreateUrlParams } from '../../../Helpers/MiscHelper';
import { fetchSystems } from '../../../Store/Actions/Actions';
import { SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';
import { middlewareListener } from '../../../Utilities/ReducerRegistry';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import DownloadReport from '../../../Helpers/DownloadReport';

const SystemsTableToolbar = (props) => {
    const [createUrlParams] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);

    const onSelect = (payload) => {
        const newSelected = payload.data.selected ? [payload.data.id, ...props.selectedHosts]
            : props.selectedHosts.filter(item => item !== payload.data.id);

        props.handleSelect(false, newSelected);
    };

    middlewareListener.addNew({
        on: 'SELECT_ENTITY',
        callback: payload => onSelect(payload)
    });

    const downloadReport = format => {
        let params = { ...props.params };
        DownloadReport.exec(fetchSystems, params,  format, 'system-list');
    };

    const handleRefresh = ({ page, page_size: pageSize, filter, opt_out: optOut }, callback) => {
        const { meta } = props.systems;
        if (meta.page !== page || meta.page_size !== pageSize) {
            const config = {
                page,
                page_size: pageSize || meta.page_size,
                filter,
                opt_out: optOut || props.params().opt_out
            };
            createUrlParams(config);
            props.setFilter(config.filter);
            if (callback) {return callback(config);}
        }
    };

    const handleOptOut = () => {
        props.setOptOut(!props.params().opt_out);
        props.setSelectedHosts([]);
        props.setPage(1);
    };

    const kebabOptions = [
        '',
        {
            label: props.params().opt_out ? props.intl.formatMessage(messages.kebabResumeAnalysis)
                : props.intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),
            onClick: () => props.doOptOut(),
            props: { isDisabled: !props.selectedHosts.length }
        },
        {
            label: props.params().opt_out ? props.intl.formatMessage(messages.kebabHideExcludedSystems)
                : props.intl.formatMessage(messages.kebabShowExcludedSystems),
            onClick: handleOptOut
        }
    ];

    const selectOptions = selectAllCheckbox({
        selectedItems: props.selectedHosts,
        selectorHandler: props.handleSelect,
        items: props.systems,
        fetchResource: ops =>handleRefresh(ops, (config) => fetchSystems(config))
    });

    return (
        <PrimaryToolbar
            bulkSelect={{
                count: props.selectedHosts.length,
                items: selectOptions.items,
                checked: Boolean(props.selectedHosts.length),
                onSelect: () => selectOptions.handleOnCheckboxChange()
            }}
            actionsConfig={{
                actions: kebabOptions,
                dropdownProps: { className: 'custom-class' }
            }}
            filterConfig={{
                items: [
                    searchFilter(
                        messages.systemsSearchName,
                        messages.searchFilterByName,
                        props.params().filter,
                        (f) => handleRefresh(f, props.onRefresh)
                    )
                ]
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters(props.parameters),
                onDelete: (e, i) => removeFilters(i, (f) => handleRefresh(f, props.onRefresh))
            }}
            exportConfig={exportConfig({ downloadReport })}
        >
        </PrimaryToolbar>

    );

};

SystemsTableToolbar.propTypes = {
    systems: dataShape,
    params: propTypes.func,
    setPage: propTypes.func,
    setFilter: propTypes.func,
    setOptOut: propTypes.func,
    selectedHosts: propTypes.array,
    setSelectedHosts: propTypes.func,
    doOptOut: propTypes.func,
    onRefresh: propTypes.any,
    parameters: propTypes.object,
    handleSelect: propTypes.func,
    intl: propTypes.any
};

export default withRouter(
    injectIntl(SystemsTableToolbar)
);

