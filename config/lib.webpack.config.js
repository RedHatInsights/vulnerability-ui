/* global require, module */

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const config = require('./webpack.common.js');
const _ = require('lodash');

const libConfig = {
    mode: 'production',
    devtool: false,
    entry: {
        index: config.paths.libEntry
    },
    output: {
        filename: 'index.js',
        path: config.paths.public,
        publicPath: config.paths.public + '/',
        libraryTarget: 'umd',
        library: 'lib'
    },
    module: {
        rules: [
            {
                test: /src\/.*\.js$/,
                exclude: /(node_modules|bower_components)/i,
                use: [{ loader: 'babel-loader' }]
            },
            {
                test: /\.s?[ac]ss$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    {
                        loader: 'css-loader'
                    },
                    {
                        loader: 'sass-loader'
                    }
                ]
            },
            {
                test: /\.(woff(2)?|ttf|jpg|png|eot|gif)(\?v=\d+\.\d+\.\d+)?$/,
                use: [
                    {
                        loader: 'file-loader',
                        options: {
                            name: '[name].[ext]',
                            outputPath: 'fonts/'
                        }
                    }
                ]
            },
            {
                test: /\.(svg)$/i,
                use: [
                    {
                        loader: 'url-loader',
                        options: {
                            limit: 8192
                        }
                    }
                ]
            }
        ]
    },
    externals: {
        '@redhat-cloud-services/frontend-components-utilities': {
            commonjs: '@redhat-cloud-services/frontend-components-utilities',
            commonjs2: '@redhat-cloud-services/frontend-components-utilities',
            amd: '@redhat-cloud-services/frontend-components-utilities',
            root: 'FECUtilities'
        },
        '@patternfly/react-icons': {
            commonjs: '@patternfly/react-icons',
            commonjs2: '@patternfly/react-icons',
            amd: '@patternfly/react-icons',
            root: 'PFReactIcons'
        },
        '@patternfly/react-core': {
            commonjs: '@patternfly/react-core',
            commonjs2: '@patternfly/react-core',
            amd: '@patternfly/react-core',
            root: 'PFReactCore'
        },
        '@patternfly/react-table': {
            commonjs: '@patternfly/react-table',
            commonjs2: '@patternfly/react-table',
            amd: '@patternfly/react-table',
            root: 'PFReactTable'
        },
        '@redhat-cloud-services/frontend-components': '@redhat-cloud-services/frontend-components',
        '@redhat-cloud-services/frontend-components-notifications': '@redhat-cloud-services/frontend-components-notifications',
        '@redhat-cloud-services/frontend-components-remediations': '@redhat-cloud-services/frontend-components-remediations',
        'prop-types': 'prop-types',
        react: 'react',
        'react-redux': 'react-redux',
        'react-dom': 'react-dom',
        'react-router-dom': {
            commonjs: 'react-router-dom',
            commonjs2: 'react-router-dom',
            amd: 'react-router-dom',
            root: 'ReactRouterDOM'
        },
        classnames: 'classnames',
        moment: 'moment'
    }
};

module.exports = [].concat(libConfig).map(config => _.merge({}, config, require('./base.webpack.plugins.js')));
