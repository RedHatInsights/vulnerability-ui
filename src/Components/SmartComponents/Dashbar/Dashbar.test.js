import Dashbar from './Dashbar';
import { Card, Grid } from '@patternfly/react-core';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { BrowserRouter as Router } from 'react-router-dom';
window.insights = {};

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn(),
    useDispatch: jest.fn()
}));

const mockStore = configureStore([store => next => action => { }]);
let store = mockStore({});

jest.mock('../../../Helpers/MiscHelper', () => ({
    ...jest.requireActual('../../../Helpers/MiscHelper'),
    useUrlParams: () => [{ dashbar: "true" }, jest.fn()]
}))

describe('Dashbar', () => {
    it('Should match the snapshot', () => {
        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>);
        expect(toJson(wrapper)).toMatchSnapshot();
    })
    it('Should render Grid with props hasGutter = true', () => {
        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>
        );
        expect(wrapper.find(Grid)).toHaveLength(1);
        expect(wrapper.find(Grid).prop('hasGutter')).toBeTruthy();
    });
    it('Should have 3 card items', () => {
        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>
        );
        expect(wrapper.find(Card)).toHaveLength(3);
    })
})