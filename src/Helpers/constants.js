/* eslint-disable no-console */
import {
    Bullseye,
    Button,
    Card,
    CardBody,
    CardHeader,
    EmptyStateVariant,
    EmptyState,
    EmptyStateBody,
    EmptyStateIcon,
    Text,
    TextVariants,
    TextContent,
    Title
} from '@patternfly/react-core';
import { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';
import moment from 'moment';
import React from 'react';
import { FormattedMessage, createIntl, createIntlCache  } from 'react-intl';
import { intlHelper } from '@redhat-cloud-services/frontend-components-translations';
import messages from '../Messages';

const cache = createIntlCache();
const locale = navigator.language;
const intl = createIntl({
    // eslint-disable-next-line no-console
    onError: console.log,
    locale
}, cache);
const intlSettings = { locale };

export const DEFAULT_PAGE_SIZE = 20;

// eslint-disable-next-line react/prop-types
export const SystemExludedFromAnalysis = ({ buttonAction }) => (
    <Bullseye>
        <EmptyState variant={EmptyStateVariant.large}>
            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />
            </Title>
            <EmptyStateBody>
                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />
            </EmptyStateBody>
            <Button variant="primary" component="a" onClick={buttonAction}>
                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />
            </Button>
        </EmptyState>
    </Bullseye>
);

export const impactTextList = {
    critical: intl.formatMessage(messages.impactTextListCritical),
    important: intl.formatMessage(messages.impactTextListImportant),
    moderate: intl.formatMessage(messages.impactTextListModerate),
    low: intl.formatMessage(messages.impactTextListLow)
};

export const impactColorList = {
    unknown: 'severity-unknown',
    default: 'severity-low',
    danger: 'severity-critical',
    warning: 'severity-moderate',
    orange: 'severity-color-important'
};

export const impactList = {
    Critical: {
        title: intl.formatMessage(messages.impactListCritical),
        color: impactColorList.danger,
        text: impactTextList.critical
    },
    High: {
        title: intl.formatMessage(messages.impactListHigh),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Important: {
        title: intl.formatMessage(messages.impactListImportant),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Medium: {
        title: intl.formatMessage(messages.impactListMedium),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Moderate: {
        title: intl.formatMessage(messages.impactListModerate),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Low: {
        title: intl.formatMessage(messages.impactListLow),
        color: impactColorList.default,
        text: impactTextList.low
    }
};

// Reports that no CVEs were found after filtering results
export const FilterNotFoundForCVE = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateNoMatchingCves} />
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />
                    <Text>
                        <FormattedMessage {...messages.emptyStateNoCveReported} />
                    </Text>
                    <Text component={TextVariants.p}>
                        <FormattedMessage {...messages.emptyStateForMoreInfo} />
                        <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />
                        </a>
                    </Text>
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

export const FilterNotFoundForSystem = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateNoMatchingCves} />
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />
                    {<br></br>}
                    <Text component={TextVariants.p}>
                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />
                    </Text>
                    <Text component={TextVariants.p}>
                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />
                    </Text>
                    {<br></br>}
                    <Text component={TextVariants.p}>
                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />
                        <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />
                        </a>
                    </Text>
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);
// Selected system do not have any CVEs
export const EmptyCVEListForSystem = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateNoReportedSystem} />
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <Text>
                        <FormattedMessage {...messages.emptyStateNoCveAffects} />
                    </Text>
                    <Text component={TextVariants.p}>
                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>
                        <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />
                        </a>.
                    </Text>

                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

// None of my systems is affected
export const EmptyCVEList = (
    <Bullseye style={{ height: 'auto' }}>
        <EmptyState variant={EmptyStateVariant.large}>
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateNoReportedSystem} />
            </Title>
            <TextContent>
                <EmptyStateBody style={{ whiteSpace: 'normal' }}>
                    <Text>
                        <FormattedMessage {...messages.emptyStateNoCveAffects} />
                    </Text>
                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>
                    <a href="https://access.redhat.com/security/team/contact/" target="__blank" rel="noopener noreferrer">
                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />
                    </a>
                    .
                </EmptyStateBody>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

// Indicates that Insights is not activated
export const NoVulnerabilityData = (
    <Bullseye>
        <EmptyState>
            <EmptyStateIcon icon={CubesIcon} />
            <Title headingLevel="h5" size="lg">
                <FormattedMessage {...messages.emptyStateNoData} />
            </Title>
            <EmptyStateBody>
                <FormattedMessage {...messages.emptyStateActivateInsights} />
            </EmptyStateBody>
            <Button
                variant="primary"
                component="a"
                href="http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted"
            >
                <FormattedMessage {...messages.emptyStateLearnInsights} />
            </Button>
        </EmptyState>
    </Bullseye>
);

// Generic error
export const GenericError = (
    <Card className="ins-empty-rule-cards">
        <CardHeader>
            <FrownOpenIcon size="lg" />
        </CardHeader>
        <CardBody>
            <FormattedMessage {...messages.errorReload} />
        </CardBody>
    </Card>
);

// Read-only mode notification text
export const ReadOnlyNotification = {
    title: intl.formatMessage(messages.readOnlyNotificationTitle),
    detail: intl.formatMessage(messages.readOnlyNotificationBody)
};

//CVSS Base score label to value
export const CVSSOptions = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'less4', label: '0.0 - 3.9', from: 0, to: 3.999 },
    { value: 'from4to8', label: '4.0 - 7.9', from: 4, to: 7.999 },
    { value: 'from8to10', label: '8.0 - 10.0', from: 8, to: 10 }
];

//Public date labels to value
export const PublicDateOptions = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'last7', label: intl.formatMessage(messages.last7), from: moment().subtract(7, 'days') },
    { value: 'last30', label: intl.formatMessage(messages.last30), from: moment().subtract(30, 'days') },
    { value: 'last90', label: intl.formatMessage(messages.last90), from: moment().subtract(90, 'days') },
    { value: 'lastYear', label: intl.formatMessage(messages.lastYear), from: moment().subtract(1, 'years') },
    { value: 'MoreThanYear', label: intl.formatMessage(messages.moreThanYear), to: moment().subtract(1, 'years') }
];

// Filter categories
export const filtersShowAll = {
    type: 'checkbox',
    title: '',
    urlParam: 'show_all',
    isChecked: true,
    values: [{ label: intl.formatMessage(messages.hideCvesNoEffecting), value: 'true' }]
};

export const filterCveSearchTerm = {
    type: 'input',
    title: intlHelper(intl.formatMessage(messages.cveId), intlSettings),
    urlParam: 'filter',
    values: []
};

export const filterSystemName = {
    type: 'input',
    title: intl.formatMessage(messages.systemsColumnHeaderName),
    urlParam: 'filter',
    values: []
};

export const filtersSeverity = {
    type: 'checkbox',
    title: 'Impact',
    urlParam: 'impact',
    values: [
        { label: intl.formatMessage(messages.impactListCritical), value: '7' },
        { label: intl.formatMessage(messages.impactListImportant), value: '5' },
        { label: intl.formatMessage(messages.impactListModerate), value: '4' },
        { label: intl.formatMessage(messages.impactListLow), value: '2' },
        { label: intl.formatMessage(messages.impactListUnknown), value: '1' }
    ]
};

export const filtersCVSSScore = {
    type: 'radio',
    title: intl.formatMessage(messages.cvssBaseScore),
    urlParam: 'cvss_filter',
    values: CVSSOptions.map(item => ({ label: item.label, value: item.value }))
};

export const filtersPublishDate = {
    type: 'radio',
    title: intl.formatMessage(messages.publishDate),
    urlParam: 'publish_date',
    values: PublicDateOptions.map(item => ({ label: item.label, value: item.value }))
};

export const STATUS_OPTIONS = [
    { label: intl.formatMessage(messages.notReviewed), value: '0' },
    { label: intl.formatMessage(messages.inReview), value: '1' },
    { label: intl.formatMessage(messages.onHold), value: '2' },
    { label: intl.formatMessage(messages.scheduledPatch), value: '3' },
    { label: intl.formatMessage(messages.resolved), value: '4' },
    { label: intl.formatMessage(messages.noAction), value: '5' },
    { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }
];

export const filtersStatus = {
    type: 'checkbox',
    title: intl.formatMessage(messages.status),
    urlParam: 'status_id',
    values: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))
};

export const businessRiskOptions = [
    {
        value: '3',
        label: intl.formatMessage(messages.high)
    },

    {
        value: '2',
        label: intl.formatMessage(messages.medium)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.low)
    },
    {
        value: '0',
        label: intl.formatMessage(messages.notDefined)
    }
];

export const filtersBusinessRisk = {
    type: 'checkbox',
    title: intl.formatMessage(messages.businessRisk),
    urlParam: 'business_risk_id',
    values: businessRiskOptions.map(item => ({ label: item.label, value: item.value }))
};

export const CVSSHeader =  [
    intl.formatMessage(messages.cvssScoreRange),
    intl.formatMessage(messages.numberOfCves)
];

export const recentCvesHeader =  [
    intl.formatMessage(messages.timeFrame),
    intl.formatMessage(messages.numberOfCves)
];

export const CVSSMapping = {
    '8to10': '8.0 - 10.0',
    '4to7.9': '4.0 - 7.9',
    '0to3.9': '0.0 - 3.9'
};

export const recentCvesMapping = {
    last7days: intl.formatMessage(messages.last7),
    last30days: intl.formatMessage(messages.last30),
    last90days: intl.formatMessage(messages.last90)
};
