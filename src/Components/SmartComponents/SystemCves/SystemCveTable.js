import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';
import { systemCveTableRowActions } from '../../../Helpers/CVEHelper';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { CVETableContext } from './SystemCves';
import messages from '../../../Messages';

const SystemCvesTableWithContext = ({ context, header, entity, canSelect }) => {
    const { cves, methods, selectedCves, expandedRows, canEditPairStatus } = context;

    // TODO Material for refatoring when we'll introduce "manage column"
    if (!cves?.meta?.patch_access) {
        header = header.filter(item => item.key !== 'advisory');
    }

    const noCves = () => {
        return ([{
            heightAuto: true,
            cells: [
                {
                    props: { colSpan: 8 },
                    title: (
                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />
                    )
                }
            ]
        }]);
    };

    const handleOnCollapse = (event, rowKey, isOpen) => {
        const { cves, methods, isAllExpanded } = context;
        const cveName = cves.data[rowKey] && cves.data[rowKey].id;
        methods.openCves(isOpen, [cveName], isAllExpanded);
    };

    const handleOnSelect = (event, isSelected, rowId) => {
        const { systemCVEs, methods } = context;
        const cve = systemCVEs.payload.data[rowId / 2];
        methods.selectCves(isSelected, cve);
    };

    const isEmpty = !cves.data || cves.data.length === 0;

    const rows = !isEmpty ? cves.data
        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)
        .map((cve, index) => {
            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };
            return ({ ...cve, isOpen: current && current.isOpen });
        }) : [];

    const sortingHeader = [{ key: 'collapse' }, ...canSelect ? [{ key: 'checkbox' }] : [], ...header];

    return (
        !cves.isLoading ? (
            <Fragment>
                <Table
                    isStickyHeader
                    canCollapseAll={false}
                    canSelectAll={false}
                    aria-label="Vulnerability CVE table"
                    cells={header}
                    rows={isEmpty ? noCves() : rows}
                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}
                    actionResolver={(!isEmpty && canEditPairStatus) &&
                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}
                    sortBy={!isEmpty
                        ? createSortBy(sortingHeader, cves.meta.sort) : undefined}
                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}
                    onSort={!isEmpty ?
                        (event, key, direction) =>
                            handleSortColumn(
                                key,
                                direction,
                                sortingHeader,
                                cves.meta.sort,
                                methods.apply
                            ) : undefined
                    }
                    gridBreakPoint="grid-lg"
                    ouiaId="cves-table"
                    variant={TableVariant.compact}
                >
                    <Fragment>
                        <TableHeader />
                        <TableBody />
                    </Fragment>
                </Table>
                <PaginationWrapper meta={cves.meta} apply={methods.apply} />
            </Fragment>
        ) : (
            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />
        )
    );
};

SystemCvesTableWithContext.propTypes = {
    context: propTypes.any,
    header: propTypes.array,
    entity: propTypes.string,
    canSelect: propTypes.bool
};

const SystemCvesTable = props => (
    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default SystemCvesTable;
