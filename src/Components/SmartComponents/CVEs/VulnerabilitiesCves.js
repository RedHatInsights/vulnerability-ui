/* eslint-disable camelcase */
import { Stack, StackItem, InputGroup } from '@patternfly/react-core';
import { classNames, expandable, sortable } from '@patternfly/react-table';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import propTypes from 'prop-types';
import qs from 'query-string';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';
import { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';
import { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import StatusModal from '../Modals/CveStatusModal';
import './vulnerabilities.scss';
import SystemCveTable from './VulnerabilitiesTable';
import SystemCveTableToolbar from './VulnerabilitiesTableToolbar';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const CVETableContext = React.createContext({});

class VulnerabilitiesCves extends Component {
    static propTypes = {
        cveList: propTypes.any,
        fetchData: propTypes.func,
        history: propTypes.object,
        location: propTypes.object,
        parameters: propTypes.object,
        changeParameters: propTypes.func,
        selectCve: propTypes.func,
        openCve: propTypes.func,
        showReportLink: propTypes.func,
        intl: propTypes.any
    };

    constructor(props) {
        super(props);
        this.state = {
            isBusinessRiskOpen: false,
            isStatuskOpen: false,
            BusinessRiskModal: () => null,
            StatusModal: () => null,
            expandCveDescription: false
        };
    }

    componentDidMount() {
        const { parameters } = this.props;
        const queryObject = qs.parse(this.props.location.search);
        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';
        if (queryObject.show_irrelevant) {
            queryObject.show_all = undefined;
        }

        this.apply({ ...parameters, ...queryObject });
    }

    processError = () => {
        return GenericError;
    };

    apply = (config = {}) => {
        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {
            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);

            if (typeof cvssEntry === 'undefined' &&
                typeof config.cvss_filter !== 'undefined'
            ) {
                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));
                cvssEntry = { from: values[0], to: values[1] };
            }
            else if (typeof cvssEntry === 'undefined' &&
                typeof config.cvss_filter === 'undefined') {
                cvssEntry = { from: undefined, to: undefined };
            }

            config.cvss_from = cvssEntry.from;
            config.cvss_to = cvssEntry.to;
        }

        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {
            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);

            if (typeof publicEntry !== 'undefined') {
                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');
                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');
            } else {
                config.public_from = undefined;
                config.public_to = undefined;
                config.publish_date = undefined;
            }
        }

        this.props.changeParameters(config).then(this.sendRequest);
    };

    selectCves = (isSelected, cveNames) => {
        this.props.selectCve(cveNames || []);
    };

    toggleCveDescription = (cveList) => {
        const { parameters } = this.props;
        const { expandCveDescription } = parameters;
        const openedCves = expandCveDescription
            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)
            : parameters.openedCves.length ? parameters.openedCves : [];

        this.props.openCve(openedCves);
    }

    createUrlParams = allParams => {
        const params = { ...allParams };
        params.show_irrelevant = !params.show_all;
        const allowedParams = [
            'show_irrelevant',
            'cvss_filter',
            'publish_date',
            'filter',
            'limit',
            'offset',
            'page',
            'page_size',
            'sort',
            'impact',
            'business_risk_id',
            'status_id'
        ];
        Object.keys(allParams).forEach(
            key =>
                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&
                delete params[key]
        );
        const queryString = qs.stringify(params);
        this.props.history.push('?' + queryString);
    };

    sendRequest = () => {
        const { fetchData, parameters, showReportLink } = this.props;
        //TODO: need a better way of doing this
        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;
        // eslint-disable-next-line camelcase
        fetchData && fetchData({ ...parameters, show_all: showAllParam })
        .then(response => {
            const { value } = response;
            if (parameters.expandCveDescription) {
                this.toggleCveDescription(value);
            }

            showReportLink(true);
        });

        this.createUrlParams(parameters);
    };

    downloadReport = format => {
        const { parameters } = this.props;
        const params = { ...parameters, show_all: !parameters.show_all };
        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });
        payload &&
            payload.then(({ data: response }) => {
                const data = format === 'json' ? JSON.stringify(response) : response;
                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);
            });
    };

    showBusinessRiskModal = cves => {
        this.setState({
            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />
        });
    };

    showStatusModal = cves => {
        this.setState({
            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />
        });
    };

    render() {
        const { cveList, parameters, openCve } = this.props;
        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;
        const { BusinessRiskModal, StatusModal } = this.state;
        const cves = cveList;
        const { errors } = cves;
        const header = [
            {
                title: this.props.intl.formatMessage(messages.cveId),
                key: 'synopsis',
                transforms: [sortable, classNames('col-width-10')],
                columnTransforms: [classNames('no-wrap')],
                cellFormatters: [expandable]
            },
            {
                title: this.props.intl.formatMessage(messages.publishDate),
                key: 'public_date',
                transforms: [sortable, classNames('col-width-10')],
                columnTransforms: [classNames('hide-description')]
            },
            {
                title: this.props.intl.formatMessage(messages.impact),
                key: 'impact',
                transforms: [sortable, classNames('col-width-10')],
                columnTransforms: [classNames('no-wrap')]
            },
            {
                title: this.props.intl.formatMessage(messages.cvssBaseScore),
                key: 'cvss_score',
                transforms: [sortable, classNames('col-width-10')]
            },
            {
                title: this.props.intl.formatMessage(messages.systemsExposed),
                key: 'systems_affected',
                transforms: [sortable, classNames('col-width-10')] },
            {
                title: this.props.intl.formatMessage(messages.businessRisk),
                key: 'business_risk',
                transforms: [sortable, classNames('col-width-10')]
            },
            {
                title: this.props.intl.formatMessage(messages.status),
                key: 'status',
                transforms: [sortable, classNames('col-width-10')] }
        ];

        if (!errors) {
            return (
                <CVETableContext.Provider
                    value={{
                        cves,
                        params: { ...this.state, ...parameters },
                        methods: {
                            apply,
                            downloadReport,
                            selectCves,
                            showBusinessRiskModal,
                            showStatusModal,
                            fetchResource: fetchCveListByAccount,
                            openCve
                        }
                    }}
                >
                    <BusinessRiskModal />
                    <StatusModal />

                    <Stack>
                        <StackItem>
                            <SystemCveTableToolbar showAllCheckbox />
                        </StackItem>
                        <StackItem>
                            <SystemCveTable header={header} showAllCheckbox />
                        </StackItem>
                    </Stack>
                </CVETableContext.Provider>
            );
        } else {
            return this.processError(errors);
        }
    }
}

function mapStateToProps({ VulnerabilitiesStore }) {
    return {
        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),
        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: params => dispatch(fetchCveListByAccount(params)),
        selectCve: params => dispatch(selectCve(params)),
        changeParameters: params => dispatch(changeCveListParameters(params)),
        openCve: params => dispatch(expandCve(params))
    };
};

export default withRouter(
    injectIntl(connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCves))
);
