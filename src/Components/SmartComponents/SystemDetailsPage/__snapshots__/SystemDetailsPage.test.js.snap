// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemDetailPage Should match the snapshots 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(injectIntl(Connect(InventoryDetail)))
        addNotification={[MockFunction]}
        fetchSystemDetails={[MockFunction]}
        match={
          Object {
            "params": Object {
              "inventoryId": "testCve",
            },
          }
        }
        optOutSystem={[MockFunction]}
      >
        <injectIntl(Connect(InventoryDetail))
          addNotification={[MockFunction]}
          fetchSystemDetails={[MockFunction]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          optOutSystem={[MockFunction]}
        >
          <Connect(InventoryDetail)
            addNotification={[MockFunction]}
            fetchSystemDetails={[MockFunction]}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {
                  "default.cancel": "Cancel",
                  "default.delete": "Delete",
                  "default.remove": "Remove",
                  "default.save": "Save",
                },
                "onError": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            optOutSystem={[MockFunction]}
          >
            <InventoryDetail
              addNotification={[Function]}
              fetchSystemDetails={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "formatDate": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {
                    "default.cancel": "Cancel",
                    "default.delete": "Delete",
                    "default.remove": "Remove",
                    "default.save": "Save",
                  },
                  "onError": [Function],
                  "textComponent": Symbol(react.fragment),
                  "timeZone": undefined,
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              optOutSystem={[Function]}
              systemDetails={
                Object {
                  "entity": "testEntity",
                  "opt_out": false,
                }
              }
            >
              <Page
                defaultManagedSidebarIsOpen={true}
                isManagedSidebar={false}
                mainTabIndex={-1}
                onPageResize={[Function]}
              >
                <div
                  className="pf-c-page"
                >
                  <main
                    className="pf-c-page__main"
                    tabIndex={-1}
                  >
                    <withRouter(Connect(VulnerabilityHeader))
                      title=""
                    >
                      <Connect(VulnerabilityHeader)
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "createHref": [Function],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        title=""
                      >
                        <VulnerabilityHeader
                          dispatch={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "createHref": [Function],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          showBreadcrumb={true}
                          title=""
                        >
                          <PageHeader>
                            <section
                              className="pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light"
                              widget-type="InsightsPageHeader"
                            >
                              <PageHeaderTitle
                                title=""
                              >
                                <Component
                                  className=""
                                  headingLevel="h1"
                                  size="2xl"
                                  widget-type="InsightsPageHeaderTitle"
                                >
                                  <h1
                                    className="pf-c-title pf-m-2xl"
                                    widget-type="InsightsPageHeaderTitle"
                                  >
                                     
                                     
                                  </h1>
                                </Component>
                              </PageHeaderTitle>
                              <InventoryDetailHead
                                actions={
                                  Array [
                                    Object {
                                      "onClick": [Function],
                                      "title": "Exclude from vulnerability analysis",
                                    },
                                  ]
                                }
                                hideBack={true}
                              >
                                <div>
                                  A mock with '
                                  ' passed!
                                </div>
                              </InventoryDetailHead>
                            </section>
                          </PageHeader>
                        </VulnerabilityHeader>
                      </Connect(VulnerabilityHeader)>
                    </withRouter(Connect(VulnerabilityHeader))>
                    <Connect(Main)>
                      <Main>
                        <section
                          className="pf-l-page__main-section pf-c-page__main-section"
                          page-type=""
                        >
                          <AppInfo
                            optOutSystemHandler={[Function]}
                          >
                            <div>
                              this is inventory body
                            </div>
                          </AppInfo>
                        </section>
                      </Main>
                    </Connect(Main)>
                  </main>
                </div>
              </Page>
            </InventoryDetail>
          </Connect(InventoryDetail)>
        </injectIntl(Connect(InventoryDetail))>
      </withRouter(injectIntl(Connect(InventoryDetail)))>
    </Router>
  </BrowserRouter>
</Provider>
`;
