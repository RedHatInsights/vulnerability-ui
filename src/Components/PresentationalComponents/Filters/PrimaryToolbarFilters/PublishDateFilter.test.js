import publishDateFilter from './PublishDateFilter'

describe('PublishDateFilter', () => {
    const applyMock = jest.fn();

    it('Should render the date option items', () => {
        const options = [ 
            { label: 'All', value: 'all' },
            { label: 'Last 7 days', value: 'last7' },
            { label: 'Last 30 days', value: 'last30' },
            { label: 'Last 90 days', value: 'last90' },
            { label: 'Last year', value: 'lastYear' },
            { label: 'More than 1 year ago', value: 'MoreThanYear' } 
        ]
  
        const comp = publishDateFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue 0', () => {
        let comp = publishDateFilter(applyMock, '')
        expect(comp.filterValues.value).toBe('0')

        comp = publishDateFilter(applyMock, undefined)
        expect(comp.filterValues.value).toBe('0')

        comp = publishDateFilter(applyMock, '5')
        expect(comp.filterValues.value).toBe('0')

    })

    it('Should use the passed currentValue ', () => {
        let currentFilter = { publish_date: 'last7' }
        let comp = publishDateFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('last7')
    })

    it('Should call apply with params', () => {
        let comp = publishDateFilter(applyMock, '1')
        comp.filterValues.onChange('event', 'last7')
        expect(applyMock).toBeCalledWith({"page": 1, "publish_date": "last7"})

        comp.filterValues.onChange('event', '')
        expect(applyMock).toBeCalledWith({"page": 1, "publish_date": ""})

    })

})
