import impactFilter from './ImpactFilter'

describe('ImpactFilter', () => {
    const applyMock = jest.fn();

    it('Should render the option items', () => {
        const values =  [ '7', '5', '4', '2', '1' ]

        const comp = impactFilter(applyMock, '')
        let expectedvalues = comp.filterValues.items.map(f => f.value)
        expect(values).toStrictEqual(expectedvalues)
    })

    it('Should use default currentValue', () => {
        let comp = impactFilter(applyMock)
        expect(comp.filterValues.value).toStrictEqual([])
    })


    it('Should use passed currentValues', () => {
        let currentFilter = { impact: '1' }
        let expected = ['1']
        let comp = impactFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)

        currentFilter = { impact: '1,4,65,6' }
        expected = ['1', '4', '65', '6']
        comp = impactFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)
    })

    it('Should call apply with params', () => {
        let currentFilter = { impact: '1' }
        let comp = impactFilter(applyMock, currentFilter)

        comp.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ impact: '', page: 1 })

        comp.filterValues.onChange('event', [',', '2'])
        expect(applyMock).toBeCalledWith({ impact: '', page: 1 })
    })

})
