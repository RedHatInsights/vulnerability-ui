export const error = {
    errorCode: null,
    message: null,
    hasError: false
};

const hasResetFilters = (
    workloads,
    SIDs,
    tags
) => (workloads === undefined || workloads?.SAP === undefined) && SIDs.length === 0 && tags.length === 0;

const hasSetAnyFilter = (state) => ['sap_system', 'tags', 'sap_sids'].some(key => state.hasOwnProperty(key));

export const applyGlobalFilter = (state, { workloads, SIDs, tags }) => {
    // DO nothing in first load
    if (!hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        return state;
    }

    if (hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        // reset the filters
        state = {
            ...state,
            sap_system: undefined,
            tags: undefined,
            sap_sids: undefined,
            page: 1
        };
    } else {
        state = {
            ...state,
            ...workloads && { sap_system: workloads?.SAP?.isSelected === true ? true : undefined },
            ...SIDs && { sap_sids: SIDs },
            ...tags && { tags },
            page: 1
        };
    }

    return state;
};

export const isTimestampValid = (stateTimestamp, actionTimestamp) => actionTimestamp >= stateTimestamp;

/**
 * Adds or removes item from the given (targetObj) object based on the value
 *
 * @param {Object} targetObj
 * @param {Array} inputArr
 * @returns {Object}
 */
export const addOrRemoveItemFromObj = (targetObj, inputArr) => {
    const inputObj = inputArr.reduce((obj, item) => {
        if (item.value === false) {
            delete targetObj[item.rowId];
        } else {
            obj[item.rowId] = item.value;
        }

        return  obj;

    }, {});

    return { ...targetObj, ...inputObj };
};

export const getNewSelectedItems = (selectedItems, currentItems) => {
    let payload = [].concat(selectedItems).map(({ id, selected }) => ({ rowId: id, value: selected }));

    return addOrRemoveItemFromObj(currentItems, payload);
};

export const selectRows = (state, action) => {
    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);
    let prevLoadedRows = [].concat(state.prevLoadedRows);
    let selectedRowsRawData = prevLoadedRows.filter(({ id }) => selectedUpdated[id] === true);

    return {
        ...state,
        selectedRows: selectedUpdated,
        selectedRowsRawData
    };
};

