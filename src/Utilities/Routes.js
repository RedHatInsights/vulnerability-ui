import React, { useEffect, useState } from 'react';
import some from 'lodash/some';
import PropTypes from 'prop-types';
import { Redirect, Route, Switch, useLocation } from 'react-router-dom';
import { getSystems } from '../Helpers/APIHelper';
import asyncComponent from './asyncComponent';
import { PATHS } from '../Helpers/constants';
import { intl } from './IntlProvider';
import messages from '../Messages';

const SystemsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "Systems" */ '../Components/SmartComponents/SystemsPage/SystemsPage'
    )
);

const LandingPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "LandingPage" */ '../Components/SmartComponents/LandingPage/LandingPage'
    )
);

const Upgrade = asyncComponent(() =>
    import(
        /* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'
    )
);

const CVEDetailsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "CVEDetailsPage" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'
    )
);

const SystemDetailsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "SystemDetailsPage" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'
    )
);
const Reports = asyncComponent(() =>
    import(/* webpackChunkName: "Reports" */ '../Components/SmartComponents/Reports/ReportsPage')
);

const InsightsRoute = ({ component: Component, rootClass = 'vulnerability', title, ...rest }) => {
    const [hasSystems, setHasSystems] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            const result = await getSystems();
            setHasSystems(result?.meta?.total_items > 0);
        };

        fetchData();
    }, []);

    /**
     * @deprecated
     * Mutating chrome root element is deprecated.
     * Please add custom classes on different elements exclusive to vulnerability UI DOM.
     * This functionality will no longer exist in chrome 2 to prevent global styling issues
     */
    const root = document.getElementById('root');
    root.removeAttribute('class');

    root.classList.add(`page__${rootClass}`, 'pf-l-page__main');
    /**
     * Addong root class to root element to scope the CSS classes.
     * Chrome 2 will add this class automatically to root element.
     */
    root.classList.add(`page__${rootClass}`, 'pf-c-page__main', rootClass);
    root.setAttribute('role', 'main');

    if (title) {
        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];
        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;
    }

    return (
        <Route
            {...rest}
            render={routeProps => (
                !hasSystems ? <Upgrade /> : <Component {...routeProps} />
            )}
        />
    );
};

InsightsRoute.propTypes = {
    component: PropTypes.func,
    rootClass: PropTypes.string,
    title: PropTypes.string
};

export const Routes = () => {
    let location = useLocation();
    let path = location.pathname;
    return (
        <Switch>
            <Redirect
                from={PATHS.cvepagePath.to}
                to={PATHS.systemDetailsPage.to}
            />

            <InsightsRoute
                exact
                path={PATHS.cveDetailsPage.to}
                component={CVEDetailsPage}
                title={intl.formatMessage(messages.cvesHeader)}
            />

            <InsightsRoute
                exact
                path={PATHS.systemDetailsPage.to}
                component={SystemDetailsPage}
            />

            <InsightsRoute
                exact
                path={PATHS.home.to}
                component={LandingPage}
                title={intl.formatMessage(messages.cvesHeader)}
            />

            <InsightsRoute
                exact
                path={PATHS.cvesPage.to}
                component={LandingPage}
                title={intl.formatMessage(messages.cvesHeader)}
            />

            <InsightsRoute
                exact
                path={PATHS.systemsPage.to}
                component={SystemsPage}
                title={intl.formatMessage(messages.systemsHeader)}
            />

            <InsightsRoute
                exact
                path={PATHS.upgrade.to}
                component={Upgrade}
                title={intl.formatMessage(messages.upgradePageTitle)}
            />

            <InsightsRoute
                exact
                path={PATHS.reports.to}
                component={Reports}
                title={intl.formatMessage(messages.reportsPageTitle)}
            />
            <Route
                render={() => (
                    some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />
                )}
            />
        </Switch>
    );
};
