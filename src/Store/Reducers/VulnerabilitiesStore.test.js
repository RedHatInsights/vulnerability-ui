import * as ActionTypes from '../ActionTypes';
import { initialState, VulnerabilitiesStore } from './VulnerabilitiesStore';

let action;
describe('CVE reducer:', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
    });

    it('Should return initial state', () => {
        expect(VulnerabilitiesStore(undefined, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(VulnerabilitiesStore(undefined, action)).toEqual(initialState);
    });

    it('Should start loading CVE_List', () => {
        action.type = ActionTypes.FETCH_CVE_LIST + '_PENDING';
        expect(VulnerabilitiesStore(undefined, action).cveList.isLoading).toEqual(true);
    });

    it('Should load CVE_List', () => {
        let testObject = { testObject: 'value' };
        let timestamp = new Date();
        action.type = ActionTypes.FETCH_CVE_LIST + '_FULFILLED';
        action.payload = testObject;
        action.meta = timestamp;
        expect(VulnerabilitiesStore(undefined, action).cveList).toEqual({ timestamp, isLoading: false, payload: testObject });
    });

    it('Should not load CVE_List, race condition', () => {
        let testObject = { testObject: 'value' };
        let timestamp = new Date(Date.now() - 100);
        action.type = ActionTypes.FETCH_CVE_LIST + '_FULFILLED';
        action.payload = testObject;
        action.meta = timestamp;
        expect(VulnerabilitiesStore(undefined, action).cveList.timestamp).not.toEqual(timestamp);
    });

    it('Should empty the store', () => {
        action.type = ActionTypes.EMPTY_CVE_LIST + '_FULFILLED';
        expect(VulnerabilitiesStore(undefined, action)).toEqual(initialState);
    });

    it('Should load CVE Statuses', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.SYSTEM_CVE_STATUS_LIST + '_FULFILLED';
        action.payload = testObject;
        expect(VulnerabilitiesStore(undefined, action).statusList).toEqual({ isLoading: false, payload: testObject });
    });

    it('Should reject the CVE list', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.FETCH_CVE_LIST + '_REJECTED';
        action.payload = testObject;
        let retval = VulnerabilitiesStore(undefined, action).cveList
        expect(retval.isLoading).toEqual(false);
        expect(retval.payload.errors).toEqual(testObject);
    });
});
