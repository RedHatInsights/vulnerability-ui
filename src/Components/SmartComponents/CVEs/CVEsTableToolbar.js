import React, { useState } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './CVEs';
import { fetchCvesIds } from '../../../Store/Actions/Actions';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters,
    isFilterInDefaultState
} from '../../../Helpers/TableToolbarHelper';
import { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';

const CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, intl }) => {
    const [exportPDF, setExportPDF] = useState(false);

    const onExpandAllClick = () => {
        const { cves, methods, isAllExpanded } = context;

        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(expandedRows);
    };

    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;
    const { filter } = params;
    const selectedCvesCount = selectedCves && selectedCves.length;

    const selectOptions  = selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),
        multiRow: true
    });

    const actions = [
        '', // #NOTE empty intentionally, Remediation holder
        ...canEditStatusOrBusinessRisk ? [
            {
                label: intl.formatMessage(messages.editBusinessRisk),
                onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({
                    id,
                    business_risk_id: attributes.business_risk_id,
                    justification: attributes.business_risk_text
                })), true),
                props: { isDisabled: !selectedCvesCount }
            },
            {
                label: intl.formatMessage(messages.editStatus),
                onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({
                    id,
                    exposed_systems_count: attributes.systems_affected,
                    justification: attributes.status_text,
                    status_id: attributes.status_id
                }), []), true),
                props: { isDisabled: !selectedCvesCount }
            }
        ] : [],
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => methods.setColumnModalOpen(true)
        }
    ];

    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    isDisabled: cves.meta.total_items === 0,
                    itemCount: cves.meta.total_items || 0,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    ouiaId: 'pagination-top',
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions,
                    dropdownProps: { ouiaId: 'toolbar-actions' }
                }}
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                    checked: Boolean(selectedCvesCount),
                    ouiaId: 'bulk-select',
                    onSelect: ()=> selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),
                        securityRuleFilter(methods.apply, params),
                        knownExploitFilter(methods.apply, params),
                        impactFilter(methods.apply, params),
                        useCvssBaseScoreFilter(methods.apply, params),
                        businessRiskFilter(methods.apply, params),
                        affectingFilter(methods.apply, params),
                        publishDateFilter(methods.apply, params),
                        statusFilter(methods.apply, params)
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(params),
                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),
                    deleteTitle: intl.formatMessage(messages.resetFilters),
                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)
                }}
                exportConfig={canExport && {
                    isDisabled: cves.meta.total_items === 0,
                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],
                    ouiaId: 'export',
                    ...exportConfig(methods)
                }}
                expandAll={{
                    isAllExpanded,
                    onClick: onExpandAllClick
                }}
            />
            { exportPDF &&
                <DownloadCVEsReport
                    showButton={false}
                    params={params}
                    filters={buildActiveFilters(params)}
                    onSuccess={() => setExportPDF(false)}
                />
            }

        </React.Fragment>
    );
};

CVEsTableToolbarWithContext.propTypes = {
    context: propTypes.object,
    intl: propTypes.object,
    canEditStatusOrBusinessRisk: propTypes.bool,
    canExport: propTypes.bool
};

CVEsTableToolbarWithContext.defaultProps = {
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

const CVEsTableToolbar = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableToolbarWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default injectIntl(CVEsTableToolbar);
