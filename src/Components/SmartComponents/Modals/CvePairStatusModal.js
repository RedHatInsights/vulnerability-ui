import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React, { useState, useEffect } from 'react';
import { setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {
    const {
        JustificationInput,
        justification,
        setJustification,
        setProps: setJustificationProps
    } = useJustificationInput(getJustification());
    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());
    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());
    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);
    const inventoryNames = inventoryList.map(item => item.display_name);

    useEffect(() => {
        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });
        setJustificationProps({ disabled: isOverallChecked });
        setStatusId(getCveStatus());
        setJustification(getJustification());
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isOverallChecked, setSelectProps, setJustificationProps]);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        const setStatusParams = !isOverallChecked
            ? {
                status_id: parseInt(statusId),
                cve: cveIds,
                status_text: justification,
                inventory_id: inventoryIds
            }
            : { cve: cveIds, inventory_id: inventoryIds };
        return setSystemCveStatus(setStatusParams).then(updateRef);
    };

    function getDefaultCheckboxState() {
        switch (type) {
            case 'systemsExposed': {
                const sameAsOverall = inventoryList.every(item =>
                    item.status_id === cveList[0].status_id && item.justification === cveList[0].justification
                );

                if (sameAsOverall) { // overall is only one therefore they are also same to each other
                    return true;
                }

                break;
            }

            case 'systemDetail': {
                const sameAsEachOther = cveList.every((item, _, arr) =>
                    item.status_id === arr[0].status_id && item.justification === arr[0].justification
                );

                const sameAsOverall = cveList.every(item =>
                    item.status_id === item.cve_status_id && item.justification === item.cve_justification
                );

                if (sameAsEachOther && sameAsOverall) {
                    return true;
                }

                break;
            }
        }

        return false;
    }

    function getCveStatus() {
        switch (type) {
            case 'systemsExposed': {
                if (isOverallChecked) {
                    return cveList[0].status_id;
                }
                else {
                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);

                    return sameAsEachOther ? inventoryList[0].status_id : '0';
                }
            }

            case 'systemDetail': {
                if (isOverallChecked) {
                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);

                    return sameOverallAsEachOther ? cveList[0].cve_status_id : '0';
                }
                else {
                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);

                    return sameAsEachOther ? cveList[0].status_id : '0';
                }
            }
        }
    }

    function getJustification() {
        switch (type) {
            case 'systemsExposed': {
                if (isOverallChecked) {
                    return cveList[0].justification;
                }
                else {
                    const sameAsEachOther = inventoryList.every((item, _, arr) =>
                        item.justification === arr[0].justification);

                    return sameAsEachOther ? inventoryList[0].justification || '' : '';
                }
            }

            case 'systemDetail': {
                if (isOverallChecked) {
                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>
                        item.cve_justification === arr[0].cve_justification);

                    return sameOverallAsEachOther ? cveList[0].cve_justification || '' : '';
                }
                else {
                    const sameAsEachOther = cveList.every((item, _, arr) =>
                        item.justification === arr[0].justification);

                    return sameAsEachOther ? cveList[0].justification || '' : '';
                }
            }
        }
    }

    const showDifferentStatusesWarning = () => {
        switch (type) {
            case 'systemsExposed': {
                return inventoryList.some((item, _, arr) => item.status_id !== arr[0].status_id);
            }

            case 'systemDetail': {
                return cveList.some((item, _, arr) => item.status_id !== arr[0].status_id);
            }
        }
    };

    const successNotification = {
        variant: 'success',
        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)
    };

    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });

    return (
        <BaseModal
            items={cveList}
            onSave={handleSave}
            onSuccessNotification={successNotification}
            title={modalTitle}
            ouiaId={'status-modal'}
        >
            <Stack hasGutter>
                {showDifferentStatusesWarning() &&
                    <StackItem>
                        <Alert
                            variant="warning"
                            isInline
                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}
                        />
                    </StackItem>
                }
                <StackItem>
                    {intl.formatMessage(
                        messages.cvePairStatusModalSelected,
                        {
                            cveCount: cveList.length || 0,
                            cveId: cveList[0].id, // only used when length is 1
                            systemCount: inventoryList.length || 0,
                            systemName: inventoryNames[0], // only used when length is 1
                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold
                        }
                    )}
                </StackItem>
                <StackItem>
                    <Form key="key">
                        <FormGroup fieldId={'overall'}>
                            <Split>
                                <SplitItem>
                                    <Checkbox
                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}
                                        id="alt-form-checkbox-1"
                                        name="alt-form-checkbox-1"
                                        isChecked={isOverallChecked}
                                        onChange={checked => setOverallCheckbox(checked)}
                                    />
                                </SplitItem>
                                <SplitItem>
                                    <Tooltip
                                        trigger='mouseenter focus click'
                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}
                                    >
                                        <OutlinedQuestionCircleIcon
                                            className="pf-u-ml-xs"
                                            color="var(--pf-global--Color--200)"
                                            style={{ verticalAlign: '0' }}
                                        />
                                    </Tooltip>
                                </SplitItem>
                            </Split>
                        </FormGroup>
                        {StatusSelect}
                        {JustificationInput}
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CvePairStatusModal.propTypes = {
    cveList: propTypes.array,
    updateRef: propTypes.func,
    inventoryList: propTypes.array,
    intl: propTypes.any,
    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])
};

export default injectIntl(CvePairStatusModal);
