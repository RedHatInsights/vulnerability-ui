import * as reactCore from '@patternfly/react-core';
import {
    Dropdown,
    DropdownItem,
    KebabToggle,
    Text,
    TextContent,
    TextVariants,
    ToolbarGroup,
    ToolbarItem
} from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { FilterDropdown, SimpleTableFilter } from '@redhat-cloud-services/frontend-components';
import RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';
import { StatusDropdown } from '@redhat-cloud-services/frontend-components-inventory-vulnerabilities';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import debounce from 'lodash/debounce';
import omit from 'lodash/omit';
import { PaginationRow } from 'patternfly-react';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchAffectedSystemsByCVE, fetchSystemCveStatusList } from '../../../Store/Actions/Actions';
import { FETCH_AFFECTED_SYSTEMS_BY_CVE } from '../../../Store/ActionTypes';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';
import './SystemsExposedTable.scss';
/*eslint camelcase: 0*/

class SystemsExposedTable extends React.Component {
    constructor(props) {
        super(props);
        this.dataProvider = this.dataProvider.bind(this);
        this.onCreated = this.onCreated.bind(this);
        this.getSelectedSystems = this.getSelectedSystems.bind(this);
        this.onRefresh = this.onRefresh.bind(this);
        this.dataReload = this.dataReload.bind(this);

        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => {},
            filter: '',
            columns: [
                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'display_name'] },
                {
                    key: 'status',
                    title: 'Status',
                    props: {
                        width: 20
                    }
                },
                {
                    key: 'updated',
                    title: 'Last Seen',
                    isTime: true,
                    props: {
                        width: 10
                    }
                }
            ],
            isKebabOpen: false
        };
    }

    componentDidMount() {
        this.apply();
        this.props.fetchStatusList();
        StatusDropdown.setCallback(this.dataReload);
        this.setState({
            removeListener: middlewareListener.addNew({
                on: FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED',
                callback: () => this.fetchInventory()
            })
        });
    }

    onCreated(result) {
        dispatchAction(addNotification(result.getNotification()));
    }

    addFilter = (param, value, type) => {
        let newFilter;
        if (type === 'radio' || param === 'show_all') {
            newFilter = { [param]: value };
        } else {
            newFilter = this.state[param] ? { [param]: `${this.state[param]},${value}` } : { [param]: value };
        }

        this.setState({ ...this.state, ...newFilter, page: 1 }, this.apply);
    };

    removeFilter = (key, value) => {
        const newFilter = {
            [key]: this.state[key]
            .split(',')
            .filter(item => item !== value)
            .join(',')
        };

        if (newFilter.length !== 0) {
            this.setState({ ...this.state, ...newFilter, page: 1 }, this.apply);
        } else {
            const filter = { ...this.state, [key]: undefined };
            this.setState({ ...this.state, ...filter, page: 1 }, this.apply);
        }
    };

    getSelectedSystems() {
        let systems =
            (this.props.entities &&
                this.props.entities.loaded &&
                this.props.entities.rows.filter(system => system.selected).map(system => system.id)) ||
            0;
        return systems;
    }

    dataProvider() {
        return {
            issues: [
                {
                    id: `vulnerabilities:${this.props.cve}`,
                    description: this.props.cve
                }
            ],
            systems: this.getSelectedSystems()
        };
    }

    dataReload() {
        const { meta } = this.props.affectedSystems;
        this.setState({ ...this.state, page: meta.page, page_size: meta.page_size, filter: this.state.filter }, this.apply);
    }

    onKebabToggle = isKebabOpen => {
        this.setState({
            isKebabOpen
        });
    };

    onKebabSelect = () => {
        this.setState({
            isKebabOpen: !this.state.isKebabOpen
        });
    };

    apply = () => {
        const ignoredProps = ['isKebabOpen', 'columns'];
        const params = omit(this.state, ignoredProps);

        this.props.fetchData(this.props.cve, { ...params });
    };

    onRefresh({ page, per_page: perPage }) {
        const { meta } = this.props.affectedSystems;
        if (meta.page !== page || meta.page_size !== perPage) {
            this.setState(
                {
                    ...this.state,
                    page: meta.page_size !== perPage ? 1 : page,
                    page_size: perPage,
                    filter: this.state.filter
                },
                this.apply
            );
        }
    }

    downloadReport = format => {
        const { payload } =
            // eslint-disable-next-line camelcase
            fetchAffectedSystemsByCVE(this.props.cve, {
                ...this.state,
                data_format: format,
                page: 1
            });
        payload &&
            payload.then(({ data: response }) => {
                const data = format === 'json' ? JSON.stringify(response) : response;
                return downloadFile(data, `systems_affected-${this.props.cve}-${new Date().toISOString()}`, format);
            });
    };

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReact: { PaginationRow }
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
    }

    filterChange = debounce(value => {
        this.setState({ ...this.state, filter: value }, this.apply);
    }, 400);

    render() {
        const { InventoryCmp } = this.state;
        const { affectedSystems, statusList } = this.props;
        const { data, meta } = affectedSystems;
        const filtersStatusList = statusList &&
            statusList.payload && {
            type: 'checkbox',
            title: 'Status',
            urlParam: 'status_id',
            values: statusList.payload.data.map(item => ({ label: item.name, value: String(item.id) }))
        };
        return (
            <React.Fragment>
                <TextContent>
                    <Text component={TextVariants.h2}>Affected systems</Text>
                </TextContent>
                <InventoryCmp
                    hasCheckbox={data.length !== 0}
                    page={meta.page}
                    total={meta.total_items}
                    perPage={meta.page_size}
                    onRefresh={this.onRefresh}
                    items={data.map(item => ({
                        id: item.attributes.inventory_id,
                        ...item.attributes
                    }))}
                >
                    <ToolbarGroup className={'affected-systems-toolbar'}>
                        <ToolbarItem>
                            <SimpleTableFilter
                                onFilterChange={this.filterChange}
                                buttonTitle={null}
                                placeholder="Find a system by UUID"
                            />
                        </ToolbarItem>
                        <ToolbarItem>
                            {filtersStatusList && (
                                <FilterDropdown
                                    filterCategories={[filtersStatusList]}
                                    addFilter={this.addFilter}
                                    removeFilter={this.removeFilter}
                                    filters={this.state}
                                />
                            )}
                        </ToolbarItem>
                        <ToolbarItem>
                            <RemediationButton
                                dataProvider={this.dataProvider}
                                isDisabled={!this.getSelectedSystems().length}
                                onRemediationCreated={this.onCreated}
                            />
                        </ToolbarItem>
                        <ToolbarItem>
                            <Dropdown
                                onSelect={this.onKebabSelect}
                                toggle={<KebabToggle onToggle={this.onKebabToggle} />}
                                isOpen={this.state.isKebabOpen}
                                isPlain
                                dropdownItems={[
                                    <DropdownItem key="json" component="button" onClick={() => this.downloadReport('json')}>
                                        Export as JSON
                                    </DropdownItem>,
                                    <DropdownItem key="csv" component="button" onClick={() => this.downloadReport('csv')}>
                                        Export as CSV
                                    </DropdownItem>
                                ]}
                            />
                        </ToolbarItem>
                    </ToolbarGroup>
                </InventoryCmp>
            </React.Fragment>
        );
    }
}

SystemsExposedTable.propTypes = {
    cve: propTypes.string,
    fetchData: propTypes.func,
    affectedSystems: dataShape,
    entities: propTypes.object,
    statusList: propTypes.object,
    fetchStatusList: propTypes.func
};

function mapStateToProps(state, ownProps) {
    return {
        affectedSystems: sExposedSystemsTable(state, ownProps.cve),
        statusList: state.VulnerabilitiesStore.statusList,
        entities: state.entities
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: (cve, options) => dispatchAction(fetchAffectedSystemsByCVE(cve, options)),
        fetchStatusList: () => dispatchAction(fetchSystemCveStatusList())
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemsExposedTable)
);
