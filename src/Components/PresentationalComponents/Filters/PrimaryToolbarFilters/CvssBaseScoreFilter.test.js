import cvssBaseScoreFilter from './CvssBaseScoreFilter'

describe('cvssBaseScoreFilter', () => {
    const applyMock = jest.fn();

    it('Should render the option items', () => {
        const options =  [ 
            { label: 'All', value: 'all' },
            { label: '0.0 - 3.9', value: 'less4' },
            { label: '4.0 - 7.9', value: 'from4to8' },
            { label: '8.0 - 10.0', value: 'from8to10' } 
        ]
        const comp = cvssBaseScoreFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue', () => {
        let comp = cvssBaseScoreFilter(applyMock)
        expect(comp.filterValues.value).toStrictEqual('0')
    })


    it('Should use passed currentValues', () => {
        let comp = cvssBaseScoreFilter(applyMock, '')
        expect(comp.filterValues.value).toBe('0')

        comp = cvssBaseScoreFilter(applyMock, undefined)
        expect(comp.filterValues.value).toBe('0')

        comp = cvssBaseScoreFilter(applyMock, '5')
        expect(comp.filterValues.value).toBe('0')
    })

    it('Should use the passed currentValue ', () => {
        let currentFilter = { cvss_filter: 'from8to10' }
        let comp = cvssBaseScoreFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('from8to10')
    })

    it('Should call apply with params', () => {
        let currentFilter = { cvss_filter: 'from8to10' }
        let comp = cvssBaseScoreFilter(applyMock, currentFilter)

        comp.filterValues.onChange('event', 'from8to10')
        expect(applyMock).toBeCalledWith({ cvss_filter: 'from8to10', page: 1 })

        comp.filterValues.onChange('event', '0')
        expect(applyMock).toBeCalledWith({ cvss_filter: '', page: 1 })

        comp.filterValues.onChange('event', '')
        expect(applyMock).toBeCalledWith({ cvss_filter: '', page: 1 })

    })

})
