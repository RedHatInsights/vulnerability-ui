import { Text, TextVariants } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React from 'react';
import './SeverityRating.scss';

class SeverityRating extends React.Component {
    constructor(props) {
        super(props);

        this.severityTextList = {
            critical: 'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker'
                + ' and lead to system compromise (arbitrary code execution) without requiring user interaction.'
                + ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated'
                + ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.',
            important: 'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability'
                + ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow'
                + ' unauthenticated remote users to view resources that should otherwise be protected by authentication,'
                + ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial'
                + ' of service.',
            moderate: 'This rating is given to flaws that may be more difficult to exploit but could still lead to some'
                + ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.'
                + ' These are the types of vulnerabilities that could have had a Critical impact or Important impact'
                + ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely'
                + ' configurations.',
            low: 'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities'
                + ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit'
                + ' would give minimal consequences.'
        };

        this.colorList = {
            default: 'severity-low',
            danger: 'severity-critical',
            warning: 'severity-moderate',
            orange: 'severity-color-important'
        };

        /* I'm not shure that the list of impacts is ordered correctly by relevancy */
        this.impactList = {
            Critical: {
                title: 'Critical',
                color: this.colorList.danger,
                text: this.severityTextList.critical
            },
            High: {
                title: 'High',
                color: this.colorList.orange,
                text: this.severityTextList.important
            },
            Important: {
                title: 'Important',
                color: this.colorList.orange,
                text: this.severityTextList.important
            },
            Medium: {
                title: 'Medium',
                color: this.colorList.warning,
                text: this.severityTextList.moderate
            },
            Moderate: {
                title: 'Moderate',
                color: this.colorList.warning,
                text: this.severityTextList.moderate
            },
            Low: {
                title: 'Low',
                color: this.colorList.default,
                text: this.severityTextList.low
            }
        };
    }

    getColoredTextByImpact(impact) {
        let text;

        if (Object.keys(this.impactList).includes(impact)) {
            text = {
                title: this.impactList[impact].title,
                color: this.impactList[impact].color,
                text: this.impactList[impact].text
            };
        } else {
            text = {
                title: 'Unknown',
                color: this.colorList.default,
                text: ''
            };
        }

        return text;
    }

    render() {
        const content = this.getColoredTextByImpact(this.props.impact);

        return (
            <React.Fragment>
                {this.props.format === 'title' ? (
                    <Text component={TextVariants.p} className={content.color}>{content.title}</Text>
                ) : (
                    <Text component={TextVariants.p}>{content.text}</Text>
                )}
            </React.Fragment>
        );
    }
}

SeverityRating.propTypes = {
    impact: propTypes.string,
    format: propTypes.string // (title) || text
};

export default SeverityRating;
