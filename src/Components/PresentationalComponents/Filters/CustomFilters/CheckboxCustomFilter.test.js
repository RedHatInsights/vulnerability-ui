import userEvent from '@testing-library/user-event';
import CheckboxCustomFilter from './CheckboxCustomFilter';
import { render, screen } from '@testing-library/react';

const selectProps = null
const options = [
    { value: "op1", label: "option 1" },
    { value: "op2", label: "option 2" },
    { value: "op3", label: "option 3" }
]
const filterName = "My filter"
const filterId = "my_filter"

describe('CheckboxCustomFilter component', () => {
    it('Should update filter data when checking checkbox.', async () => {
        let filterData = { my_filter: [] }
        const setFilterData = newData => filterData = newData

        render(
            <CheckboxCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        userEvent.click(screen.getByLabelText('Options menu'));
        const checkbox = screen.getByRole('checkbox', { name: /option 1/i });
        userEvent.click(checkbox);

        expect(filterData).toStrictEqual({ my_filter: ["op1"] });
    });

    it('Should update filter data when unchecking checkbox.', () => {
        let filterData = { my_filter: ["op1"] }
        const setFilterData = newData => filterData = newData

        render(
            <CheckboxCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        userEvent.click(screen.getByLabelText('Options menu'));
        const checkbox = screen.getByRole('checkbox', { name: /option 1/i });
        userEvent.click(checkbox);

        expect(filterData).toStrictEqual({ my_filter: [] });
    });
});
