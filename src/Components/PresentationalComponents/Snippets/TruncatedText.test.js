import React from 'react';
import TruncatedText from './TruncatedText';

describe('TruncatedText component', () => {
    const shortText = `It was found that ghostscript could leak sensitive operators on the operand stack when a pseudo-operator.`;
    const longText = `A heap use-after-free vulnerability was found in systemd, where asynchronous Polkit queries are performed while 
    handling dbus messages. A local unprivileged attacker can abuse this flaw to crash systemd services or potentially execute code 
    and elevate their privileges, by sending specially crafted dbus messages.`;

    const wrapperShort = mount(<TruncatedText content={shortText} characterLimit={200}/>);
    const wrapperLong  = mount(<TruncatedText content={longText}  characterLimit={200}/>);

    it('should show read more if description is too long', () => {
        expect(wrapperShort.find('a').exists()).toBeFalsy();
        expect(wrapperLong.find('a').exists()).toBeTruthy();
    });

    it('should truncate the description string if too long', () => {
        expect(wrapperShort.find('p').text()).toEqual(shortText);
        expect(wrapperLong.find('p').text()).not.toEqual(longText);
    });

    it('should expand on first click and collapse on second', () => {
        wrapperLong.find('a').simulate('click');
        expect(wrapperLong.find('p').text()).toEqual(longText);
        wrapperLong.find('a').simulate('click');
        expect(wrapperLong.find('p').text()).not.toEqual(longText);
    })
});
