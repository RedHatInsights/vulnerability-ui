
import React, { useState } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getCveListByAccount } from '../../../Helpers/APIHelper';
import messages from '../../../Messages';
import firstPagePDF from './Common/firstPagePDF';
import tablePage from './Common/tablePage';
import DownloadReport from '../../../Helpers/DownloadReport';

const DownloadCVEsReport = ({ filters, params, reportData, buttonProps, isReportDynamic = false }) => {
    const intl = useIntl();
    const [loading, setLoading] = useState(false);

    const dataFetch = async () => {
        let user;
        setLoading(true);

        let { data, meta } = await getCveListByAccount({
            ...params,
            ...DownloadReport.defaultParams,
            sort: params.sort || '-cvss_score'
        });

        if (reportData && reportData.userNotes) {
            user = await insights.chrome.auth.getUser();
        }

        data = data.map(cve => ({
            ...cve,
            attributes: {
                ...cve.attributes,
                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)
            }
        }));

        const firstPage = firstPagePDF({ cves: data.slice(0, 13), meta, filters, intl, isReportDynamic, reportData, user });

        const otherPages = data.slice(13, data.length).reduce((resultArray, item, index) => {
            const chunkIndex = Math.floor(index / 23);
            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);
            resultArray[chunkIndex].push(item);

            return resultArray;
        }, []);

        setLoading(false);

        return [firstPage, ...otherPages.map((pageCves, index) =>
            tablePage({ data: pageCves, page: index, intl, header: reportData && reportData.header }))];
    };

    return (
        <div>
            <DownloadButton
                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.kebabExportAsPDF)}
                asyncFunction={dataFetch}
                buttonProps={{ component: 'button', ...buttonProps }}
                reportName={isReportDynamic ? reportData.reportTitle : intl.formatMessage(messages.cvePDFReportName)}
                type={''}
                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}
                allPagesHaveTitle={false}
                size={'A4'}
                orientation={'landscape'}
            />
        </div>
    );
};

DownloadCVEsReport.propTypes = {
    filters: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ]),
    params: propTypes.object,
    reportData: propTypes.object,
    buttonProps: propTypes.object,
    isReportDynamic: propTypes.bool
};

export default DownloadCVEsReport;
