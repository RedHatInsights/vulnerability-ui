import { Provider } from "react-redux";
import { BrowserRouter as Router } from "react-router-dom";
import configureStore from "redux-mock-store";

import { mountWithIntl } from "../../../Helpers/MiscHelper";
import { SystemsExposedTableToolbar } from "./SystemsExposedTableToolbar";
import useOsVersionFilter from "../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter";
import toJson from "enzyme-to-json";
import { systems } from "../../../Helpers/fixtures";

const mockStore = configureStore([(store) => (next) => (action) => {}]);

let store = mockStore({});

const applyMock = jest.fn();
const handleSelectMock = jest.fn();
const doOptOutMock = jest.fn();

jest.mock(
  "../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter"
);

let wrapper;

describe("SystemsExpostedTableToolbar component", () => {
  beforeEach(() => {
    wrapper = mountWithIntl(
      <Provider store={store}>
        <Router>
          <SystemsExposedTableToolbar
            methods={{
              apply: applyMock,
              handleSelect: handleSelectMock,
              doOptOut: doOptOutMock,
            }}
            selectedRows={[]}
            canExport
            parameters={{
              excluded: "false",
              page: 1,
              page_size: 20,
              sort: "-updated",
            }}
            rawData={{ data: systems.data, meta: { totalItems: 10 } }}
          />
        </Router>
      </Provider>
    );
  });

  it("Renders toolbar", () => {
    expect(
      wrapper.find({
        ouiaId: "PrimaryToolbar",
      })
    ).toHaveLength(1);
  });

  it("Toolbar matches snapshot", () => {
    expect(toJson(wrapper.find('Toolbar'))).toMatchSnapshot();
  });

  it("The default filter is set by name", () => {
    const container = wrapper.find('button[data-ouia-component-id="ConditionalFilter"]');
    expect(container).toHaveLength(1);
    expect(container.text()).toBe('Name');
  })
});
