import React from 'react';
import { Provider } from 'react-redux';
import * as deps from '../../../Helpers/APIHelper';
import { BusinessRiskModal } from './BusinessRiskModal';
import { createIntl, createIntlCache  } from 'react-intl';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';

const cache = createIntlCache();
const intl = createIntl({
    // eslint-disable-next-line no-console
    onError: console.log,
    locale:'en'
}, cache);


const MockStore = ({ children }) => <Provider store={ReducerRegistry.getStore()}>{children}</Provider>;

describe('BusinessRiskModal', () => {
    const setBusinessRiskMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
    deps.setBusinessRisk = setBusinessRiskMock;

    it('Should render with one CVE', () => {
        const cves = [{ id: 'SOME CVE', business_risk_id: '3' }];
        const modal = mount(
            <MockStore>
                <BusinessRiskModal open cves={cves} intl={intl}/>
            </MockStore>
        );
        const radios = modal.find('Radio');
        const checkedValue = [...radios].find(item => item.props.isChecked === true);

        expect(checkedValue.props.id).toEqual('3');
    });
    it('Should render with list of CVE', () => {
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        const modal = mount(
            <MockStore>
                <BusinessRiskModal open cves={cves} intl={intl}/>
            </MockStore>
        );
        const radios = modal.find('Radio');
        const checkedValue = [...radios].find(item => item.props.isChecked === true);

        expect(checkedValue.props.id).toEqual('0');
    });
    it('Should save a list of CVEs', () => {
        const [resultId, resultText] = [3, 'Test'];
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        const modal = mount(
            <MockStore>
                <BusinessRiskModal open cves={cves} updateRef={jest.fn()} intl={intl}/>
            </MockStore>
        );

        const saveButton = modal.find({ variant: 'primary' }).last();
        const changeRadio = modal.find({ label: 'High' }).prop('onChange');
        const changeLabel = modal.find('TextArea').prop('onChange');
        changeRadio(null, { currentTarget: { value: resultId.toString() } });
        changeLabel(resultText);
        saveButton.simulate('click');
        expect(setBusinessRiskMock).toBeCalledWith({
            business_risk_id: resultId,
            business_risk_text: resultText,
            cve: ['SOME CVE1', 'SOME CVE2', 'SOME CVE3', 'SOME CVE4']
        });
    });
});
