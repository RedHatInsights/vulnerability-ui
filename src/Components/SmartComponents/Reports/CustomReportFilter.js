import React from 'react';
import propTypes from 'prop-types';
import { StackItem, Split, SplitItem, Text, TextVariants, TextContent, Radio, Checkbox, TextInput } from '@patternfly/react-core';
import { CloseIcon } from '@patternfly/react-icons';
import {
    FILTERS,
    BUSINESS_RISK_OPTIONS,
    STATUS_OPTIONS,
    PUBLIC_DATE_OPTIONS,
    IMPACT_OPTIONS
} from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';

const CustomReportFilter = ({ filterName, handleRemove, filterData, setFilterData }) => {
    const handleOnCheckboxChange = (newValue, event, filterName) => {
        const { value: id } = event.currentTarget;
        if (newValue) {
            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], id] });
        }
        else {
            let index = filterData[filterName].indexOf(id);
            let temp = filterData[filterName].slice();
            temp.splice(index, 1);
            setFilterData({ ...filterData, [filterName]: temp });
        }
    };

    const handleOnRadioChange = (event, filterName) => {
        const { value: id } = event.currentTarget;
        setFilterData({ ...filterData, [filterName]: id });
    };

    const handleCvssInputChange = (value, inputName) => {
        setFilterData({ ...filterData, cvss_filter: {
            ...filterData.cvss_filter,
            [inputName]: value
        } });
    };

    const validateCvssInput = (inputName) => {
        const valueThis = +filterData.cvss_filter[inputName];
        const valueMin = +filterData.cvss_filter.min;
        const valueMax = +filterData.cvss_filter.max;

        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {
            return 'error';
        }

        return 'default';
    };

    const filterCheckboxes = (options, filterName) => (
        <React.Fragment>
            {options.map(item => (
                <Checkbox
                    className={'pf-u-ml-md pf-u-mt-xs'}
                    value={item.value}
                    isChecked={filterData[filterName].includes(item.value)}
                    onChange={(v, e) => handleOnCheckboxChange(v, e, filterName)}
                    label={item.label}
                    key={filterName + item.label}
                    id={filterName + item.label}
                    name={filterName + item.label}
                    aria-label={item.label}
                />
            ))}
        </React.Fragment>
    );

    const filterRadios = (options, filterName) => (
        <React.Fragment>
            {options.map(item => (
                <Radio
                    className={'pf-u-ml-md pf-u-mt-xs'}
                    value={item.value}
                    isChecked={filterData[filterName] === item.value}
                    onChange={(v, e) => handleOnRadioChange(e, filterName)}
                    label={item.label}
                    key={filterName + item.label}
                    id={filterName + item.label}
                    name={filterName + item.label}
                    aria-label={item.label}
                />
            ))}
        </React.Fragment>
    );

    const filterCvssScore = (
        <Split className='pf-u-ml-md pf-u-mt-xs'>
            <SplitItem>
                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br/>
                <TextInput
                    type="number"
                    onChange={(v) => handleCvssInputChange(v, 'min')}
                    validated={validateCvssInput('min')}
                    id="cvss-min"
                    value={filterData.cvss_filter.min}
                    style={{ width: '5em' }}
                />
            </SplitItem>
            <SplitItem>
                <br/><span className="pf-u-m-sm">-</span>
            </SplitItem>
            <SplitItem>
                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br/>
                <TextInput
                    type="number"
                    onChange={(v) => handleCvssInputChange(v, 'max')}
                    validated={validateCvssInput('max')}
                    id="cvss-max"
                    value={filterData.cvss_filter.max}
                    style={{ width: '5em' }}
                />
            </SplitItem>
        </Split>
    );

    const filterContent = name => {
        switch (name) {
            case 'status_id':
                return filterCheckboxes(STATUS_OPTIONS, 'status_id');
            case 'business_risk_id':
                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');
            case 'publish_date':
                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');
            case 'impact':
                return filterCheckboxes(IMPACT_OPTIONS, 'impact');
            case 'cvss_filter':
                return filterCvssScore;
            default:
                return null;
        }
    };

    return (
        <StackItem>
            <Split hasGutter>
                <SplitItem>
                    <TextContent>
                        <Text component={TextVariants.h4}>{FILTERS[filterName].title}</Text>
                    </TextContent>
                </SplitItem>
                <SplitItem>
                    <CloseIcon
                        color="var(--pf-global--Color--200)"
                        // if user deletes filter and then adds it again it will retain its value
                        // if that is undesirable reset state here vvv
                        onClick={() => handleRemove(filterName)}
                        style={{ cursor: 'pointer', fontSize: 12 }}
                    />
                </SplitItem>
            </Split>
            {filterContent(filterName)}
        </StackItem>
    );
};

CustomReportFilter.propTypes = {
    filterName: propTypes.string,
    handleRemove: propTypes.func,
    filterData: propTypes.object,
    setFilterData: propTypes.func
};

export default CustomReportFilter;
