
import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';
import { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';
import { intl } from '../../../../Utilities/IntlProvider';
import messages from '../../../../Messages';
import unionWith from 'lodash/unionWith';
import isEqual from 'lodash/isEqual';

const securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {
    let currentValue = [];

    if (currentFilter.rule_presence) {
        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));
    }

    if (currentFilter.rule) {
        currentValue = currentValue.concat(currentFilter.rule.split(','));
    }

    const filterBySecurityRule = values => {
        apply({
            ...config.isDynamic && { rule: values.join(',') || undefined },
            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },
            page: 1
        });
    };

    const dropdownItems	= () => {
        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;

        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));
    };

    return {
        label: intl.formatMessage(messages.filterSecurityRules),
        type: conditionalFilterType.checkbox,
        key: 'security_rule',
        filterValues: {
            onChange: (event, value) => {
                filterBySecurityRule(value);
            },
            items: dropdownItems(),
            value: currentValue
        }
    };
};

export default securityRuleFilter;
