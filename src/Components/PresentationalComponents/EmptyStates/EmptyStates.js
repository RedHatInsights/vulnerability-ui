import React from 'react';
import propTypes from 'prop-types';
import { FormattedMessage } from 'react-intl';
import {
    Bullseye,
    Button,
    EmptyStateVariant,
    EmptyState,
    EmptyStateBody,
    EmptyStateIcon,
    Text,
    TextContent,
    EmptyStateHeader,
    EmptyStateFooter
} from '@patternfly/react-core';
import { ExternalLinkAltIcon, SecurityIcon } from '@patternfly/react-icons';
import messages from '../../../Messages';
import { NotAuthorized as FECNotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';
import { LockIcon } from '@patternfly/react-icons';
import { intl } from '../../../Utilities/IntlProvider';
import PropTypes from 'prop-types';

export const EmptyStateNoCVEs = ({ secondParagraph }) => (
    <EmptyState variant={EmptyStateVariant.lg}>
        <EmptyStateHeader
            titleText={<FormattedMessage {...messages.emptyStateNoMatchingCves} />}
            headingLevel="h5"
        />
        <EmptyStateFooter>
            <TextContent>
                <EmptyStateBody>
                    <Text>
                        <FormattedMessage {...messages.emptyStateEditFilterSettings} />
                    </Text>
                    <Text>
                        <FormattedMessage {...secondParagraph} values={{
                            prodSecLink: (
                                <a
                                    href="https://access.redhat.com/security/team/contact/"
                                    target="__blank"
                                    rel="noopener noreferrer"
                                    data-testid="prod-sec-link"
                                >
                                    <FormattedMessage {...messages.emptyStateProdSecLink} />  <ExternalLinkAltIcon />
                                </a>
                            ),
                            cveDatabaseLink: (
                                <a
                                    href="https://access.redhat.com/security/security-updates/#/cve"
                                    target="__blank"
                                    rel="noopener noreferrer"
                                >
                                    <FormattedMessage {...messages.emptyStateCveDatabaseLink} />  <ExternalLinkAltIcon />
                                </a>
                            )
                        }} />
                    </Text>
                </EmptyStateBody>
            </TextContent>
        </EmptyStateFooter>
    </EmptyState>
);

EmptyStateNoCVEs.propTypes = {
    secondParagraph: PropTypes.object
};

export const EmptyStateNoSystems = () => (
    <EmptyState variant={EmptyStateVariant.lg}>
        <EmptyStateHeader
            titleText={<FormattedMessage {...messages.emptyStateNoMatchingSystems} />}
            headingLevel="h5"
        />
        <EmptyStateFooter>
            <TextContent>
                <EmptyStateBody>
                    <Text>
                        <FormattedMessage {...messages.emptyStateEditFilterSettings} />
                    </Text>
                </EmptyStateBody>
            </TextContent>
        </EmptyStateFooter>
    </EmptyState>
);

export const EmptyStateExcludedSystem = ({ buttonAction }) => (
    <Bullseye>
        <EmptyState variant={EmptyStateVariant.lg}>
            <EmptyStateHeader
                titleText={<FormattedMessage {...messages.emptyStateSystemDisabledTitle} />}
                icon={<EmptyStateIcon icon={SecurityIcon} size="sm" />}
                headingLevel="h5"
            />
            <EmptyStateBody>
                <FormattedMessage {...messages.emptyStateSystemDisabledBody} />
            </EmptyStateBody>
            <EmptyStateFooter>
                <Button data-testid="empty-state-button-action" variant="primary" component="a" onClick={buttonAction}>
                    <FormattedMessage {...messages.emptyStateSystemEnableAnalysis} />
                </Button>
            </EmptyStateFooter>
        </EmptyState>
    </Bullseye>
);

EmptyStateExcludedSystem.propTypes = {
    buttonAction: propTypes.func
};

export const NotAuthorized = ({ title }) => (
    <FECNotAuthorized
        icon={LockIcon}
        title={title ?? intl.formatMessage(messages.notAuthorizedTitle)}
        description={intl.formatMessage(messages.notAuthorizedDescription)}
        prevPageButtonText={intl.formatMessage(messages.returnToPreviousPage)}
        toLandingPageText={intl.formatMessage(messages.returnToLandingPage)}
    />
);

export const NoDescriptionAvailable = () => (
    <Bullseye>
        <EmptyState variant={EmptyStateVariant.lg} className="no-description-available" style={{ padding: 0 }}>
            <Text>
                <FormattedMessage {...messages.noDescription} />
            </Text>
            <EmptyStateBody>
                <FormattedMessage {...messages.noMetadataDescription} />
            </EmptyStateBody>
        </EmptyState>
    </Bullseye>
);

NotAuthorized.propTypes = {
    title: propTypes.string
};
