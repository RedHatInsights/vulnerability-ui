import React, { useEffect, Fragment, useState, useMemo } from 'react';
import { useIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import SystemsTableToolbar from './SystemsTableToolbar';
import { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_ADVISORY_COLUMN } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import Header from '../../PresentationalComponents/Header/Header';
import { optOutSystemsAction } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeSystemsParams,
    selectMultipleEntities,
    clearSystemStore,
    clearInventoryStore
} from '../../../Store/Actions/Actions';
import { useUrlParams } from '../../../Helpers/MiscHelper';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { nowrap, TableVariant } from '@patternfly/react-table';
import { useNotification } from '../../../Helpers/Hooks';
import useDeepCompareEffect from 'use-deep-compare-effect';
import * as APIHelper from '../../../Helpers/APIHelper';

const createColumns = (defaultColumns, hasPatchAccess) => {
    let [nameColumn, restColumns] = SYSTEMS_HEADER;
    let lastSeenColumn = defaultColumns.filter(({ key }) => key === 'updated');
    let tagsColumn = defaultColumns.filter(({ key }) => key === 'tags');

    tagsColumn = { ...tagsColumn[0], props: { width: 20, isStatic: true } };
    lastSeenColumn = { ...lastSeenColumn[0], cellTransforms: [nowrap], props: { width: 20 } };

    let mergedColumns = [nameColumn, tagsColumn, restColumns, lastSeenColumn];

    if (hasPatchAccess) {
        mergedColumns.splice(2, 0, SYSTEMS_ADVISORY_COLUMN);
    }

    return mergedColumns;
};

const SystemsPage = () => {
    const intl = useIntl();
    const [selectedHosts, setSelectedHosts] = useState(undefined);
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);
    const [isFirstMount, setFirstMount] = useState(true);
    const addNotification = useNotification({ variant: 'success' });

    const inventory = React.createRef();
    const dispatch = useDispatch();

    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);

    const parameters = useSelector(
        ({ SystemsPageStore }) => SystemsPageStore.params,
        shallowEqual
    );

    const { hasError, errorCode } = useSelector(
        ({ SystemsPageStore }) => SystemsPageStore.error
    );

    const hasPatchAccess = useSelector(({ entities }) => entities?.rows?.some(({ patchAccess }) => patchAccess));

    useEffect(() => {
        return () => {
            dispatch(clearSystemStore());
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    useEffect(()=>{
        if (selectedHosts) {
            dispatch(selectMultipleEntities(selectedHosts));
        }
    }, [selectedHosts, dispatch]);

    const apply = (config) => {
        dispatch(changeSystemsParams(config));
    };

    useEffect(() => {
        apply(urlParameters);
        setFirstMount(false);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useDeepCompareEffect(() => {
        if (!isFirstMount) {
            setUrlParams({ ...parameters });
        }
    }, [parameters, isFirstMount]);

    const handleSelect = (isChecked, payload) => {
        if (!payload) { payload = []; }

        setSelectedHosts(payload);
    };

    const doOptOut = (systemId = null, optOut) => {
        if (selectedHosts && (selectedHosts.length > 0) || systemId) {
            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {
                inventory.current.onRefreshData(({ page: 1 }));

                let count = systemId ? 1 : selectedHosts.length || 0;

                if (optOut) {
                    addNotification({ msg: intl.formatMessage(messages.systemsExcludedNotification, { count }) });
                } else {
                    addNotification({
                        msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),
                        description: intl.formatMessage(messages.systemsResumedNotificationBody)
                    });
                }

                setSelectedHosts([]);
            });
        }
    };

    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, [hasPatchAccess]);

    return (
        <Fragment>
            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />
            <Main>
                <Fragment>
                    { hasError
                        ? <ErrorHandler code={errorCode} />
                        : (<InventoryTable
                            disableDefaultColumns
                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {
                                ReducerRegistry.register({
                                    ...mergeWithEntities(
                                        inventoryEntitiesReducer(SYSTEMS_HEADER),
                                        {
                                            page: Number(parameters.page || 1),
                                            perPage: Number(parameters.page_size || 20),
                                            ...(parameters.sort && { sortBy: {
                                                key: parameters.sort.replace(/^-/, ''),
                                                direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'
                                            } })
                                        }
                                    ),
                                    ...mergeWithDetail()
                                });
                            }}
                            tableProps={{
                                isStickyHeader: true,
                                canSelectAll: false,
                                actionResolver: systems?.length > 0 && ((rowData) => systemTableRowActions(rowData, doOptOut)),
                                variant: TableVariant.compact
                            }}
                            showTagModal
                            isFullView
                            ref={inventory}
                            autoRefresh
                            customFilters={{
                                vulnerabilityParams: {
                                    ...parameters
                                }
                            }}
                            hasCheckbox={systems?.length !== 0}
                            columnCounter={columnCounter}
                            columns={(defaultColumns) => createColumns(defaultColumns, hasPatchAccess)}
                            getEntities={async (
                                _items,
                                { vulnerabilityParams, orderBy, orderDirection, ...config }
                            ) => {
                                const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;

                                apply({
                                    page: vulnerabilityParams.page,
                                    page_size: vulnerabilityParams.per_page,
                                    sort
                                });

                                const items = await APIHelper.getSystems({
                                    ...vulnerabilityParams,
                                    page: config.page,
                                    page_size: config.per_page,
                                    sort
                                });

                                return Promise.resolve({
                                    results: items.data.map(item => ({
                                        ...item,
                                        ...item.attributes,
                                        insights_id: item.attributes.insights_id
                                    })),
                                    total: items.meta.total_items
                                });
                            }}
                            hideFilters={{ all: true }}
                        >
                            <SystemsTableToolbar
                                parameters = {parameters}
                                systems = {{ data: systems, meta: { total_items: totalItems } }}
                                selectedHosts = {selectedHosts || []}
                                methods = {{
                                    doOptOut,
                                    apply,
                                    handleSelect,
                                    setSelectedHosts
                                }}
                                actions
                            />
                        </InventoryTable>
                        )}
                </Fragment>
            </Main>
        </Fragment>
    );
};

export default SystemsPage;
