import { Popover, Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { ExternalLinkAltIcon } from '@patternfly/react-icons';
import { parseCvssScore } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';
import propTypes from 'prop-types';
import React from 'react';
import { getImpactDetails } from '../../../Helpers/MiscHelper';
import CVEInfoBox from '../CVEInfoBox/CVEInfoBox';
import CvssVector from '../CvssVector/CvssVector';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

const learnMorePopover = (cveDetails, intl) => {
    return (
        <Popover
            position="bottom"
            enableFlip
            headerContent={<div>{cveDetails.title + intl.formatMessage(messages.cvePageSeverityDetailsImpact)}</div>}
            bodyContent={
                <TextContent>
                    <Text component={TextVariants.p}>{cveDetails.text}</Text>
                </TextContent>
            }
            footerContent={
                <a href="https://access.redhat.com/security/updates/classification/" target="_blank" rel="noopener noreferrer">
                    {intl.formatMessage(messages.cvePageSeverityDetailsLearnMoreRatings)}  <ExternalLinkAltIcon />
                </a>
            }
        >
            <a>{intl.formatMessage(messages.cvePageSeverityDetailsLearnMore)}</a>
        </Popover>
    );
};

const CVEPageDetailsSeverity = props => {
    const cveDetails = getImpactDetails(props.impact);
    const cvssVersion = (props.cvss3_score && 'CVSS 3.0') || (props.cvss2_score && 'CVSS 2.0') || 'CVSS 3.0';
    return (
        <Stack hasGutter>
            <StackItem>
                <CVEInfoBox
                    titleColor={cveDetails.color}
                    titleContent={cveDetails.titleContent}
                    descriptionTitle={cveDetails.title + props.intl.formatMessage(messages.cvePageSeverityDetailsImpact)}
                    descriptionContent={learnMorePopover(cveDetails, props.intl)}
                />
            </StackItem>
            <StackItem>
                <CVEInfoBox
                    titleContent={
                        <TextContent>
                            <Text component={TextVariants.h3}>{parseCvssScore(props.cvss2_score, props.cvss3_score)}</Text>
                        </TextContent>
                    }
                    descriptionTitle={cvssVersion + props.intl.formatMessage(messages.cvePageSeverityDetailsBaseScore)}
                />
            </StackItem>

            <StackItem>
                <CvssVector cvss2_metrics={props.cvss2_metrics} cvss3_metrics={props.cvss3_metrics} />
            </StackItem>
        </Stack>
    );
};

CVEPageDetailsSeverity.propTypes = {
    impact: propTypes.string,
    cvss2_score: propTypes.any,
    cvss3_score: propTypes.any,
    cvss2_metrics: propTypes.any,
    cvss3_metrics: propTypes.any,
    intl: propTypes.any
};

CVEPageDetailsSeverity.defaultProps = {
    impact: 'Unknown',
    cvss2_score: undefined,
    cvss3_score: undefined,
    cvss2_metrics: undefined,
    cvss3_metrics: undefined
};

export default injectIntl(CVEPageDetailsSeverity);
