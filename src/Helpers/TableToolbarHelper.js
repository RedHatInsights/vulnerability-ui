/* eslint-disable camelcase */
import React from 'react';
import messages from '../Messages';
import { FILTERS } from './constants';
import { Button } from '@patternfly/react-core';
import { intl } from '../Utilities/IntlProvider';

export const handleChangePage = (_event, page, apply) => apply({ page });

export const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });

export const exportConfig = (methods) => (
    { label: intl.formatMessage(messages.kebabExportAsJson) },
    { label: intl.formatMessage(messages.kebabExportAsCsv) },
    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }
);

export const  kebabAction = (label, callback, isDisabled =  false) =>{
    const color = { color: (isDisabled ? '' : 'black') };
    return (
        <Button variant="link" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>
            {label}
        </Button>
    );
};

export const buildActiveFilters = (currentFilters) =>{
    const { filter } = currentFilters;
    const filterChips = Object.keys(FILTERS).reduce((array, key) => {

        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {
            const paramValues = currentFilters[key].split(',');
            const filteredValues = paramValues.reduce((values, filter) =>{
                values.push(FILTERS[key].items.reduce((object, item) => {

                    if (filter === item.value) {
                        object.name = item.label;
                        object.value = item.value ;
                    }
                    else if (key === 'security_rule')
                    {
                        object.name = filter;
                        object.value = filter;
                    }

                    return object;
                }, {}));
                return values;
            }, []);

            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });
        }

        return array;
    }, []);

    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });

    return filterChips;
};

export const removeFilters = (chips, apply) =>{
    const emptyFilter = chips.reduce((obj, item) =>{
        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {
            obj[item.key] = '';
        }
        else {
            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');
        }

        return obj;
    }, {});

    apply(emptyFilter);
};
