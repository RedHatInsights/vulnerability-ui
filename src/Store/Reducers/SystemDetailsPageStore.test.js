import { initialState, systemDetailsPageStore } from './SystemDetailsPageStore';

let action;
let optOutSystemHandler;
let INVENTORY_ACTION_TYPES;
describe('inventoryEntitiesReducer', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
        INVENTORY_ACTION_TYPES = { 
            LOAD_ENTITY_FULFILLED: 'LOAD_ENTITIES_FULFILLED',
            LOAD_ENTITY_REJECTED: 'LOAD_ENTITY_REJECTED'
        }
        optOutSystemHandler = () => {};
    });

    it('Should return initial state on no INVENTORY_ACTION_TYPES sent', () => {
        const testAction = 'TEST_ACTION_TYPE';
        action.type = testAction
        const wrappingFn = systemDetailsPageStore({}, optOutSystemHandler);
        const reducer = wrappingFn(initialState, action);
        expect(reducer).toEqual(initialState);
    });

    it('Should return initial state', () => {
        const wrappingFn = systemDetailsPageStore(INVENTORY_ACTION_TYPES, optOutSystemHandler);
        const reducer = wrappingFn(undefined, {});
        expect(reducer).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        const wrappingFn = systemDetailsPageStore(INVENTORY_ACTION_TYPES, optOutSystemHandler);
        const reducer = wrappingFn(undefined, action);
        expect(reducer).toEqual(initialState);
    });

    it('Should fetch System Details for Vulnerability only', () => {
        const wrappingFn = systemDetailsPageStore(INVENTORY_ACTION_TYPES, optOutSystemHandler);
        action.type = 'FETCH_SYSTEM_DETAILS_FULFILLED';
        action.payload = { data: 'testData' };
        const reducer = wrappingFn({ ...initialState, loaded: true }, action);
        expect(reducer).toEqual({ ...initialState, ...action.payload.data, loaded: true  });
    });

    it('Should set state for loaded entities', () => {
        const wrappingFn = systemDetailsPageStore(INVENTORY_ACTION_TYPES, optOutSystemHandler);
        action.type = 'LOAD_ENTITIES_FULFILLED';
        const reducer = wrappingFn({ ...initialState, loaded: true }, action);
        expect(reducer).toEqual({ 
            ...initialState, 
            loaded: true,
            activeApps: [
                {
                    title: 'Vulnerabilities',
                    name: 'vulnerabilities',
                    component: expect.anything()
                }
            ]
         });
    });

    it('Should handle systemDetailsPageStore error', () => {
        const wrappingFn = systemDetailsPageStore(INVENTORY_ACTION_TYPES, optOutSystemHandler);
        action.type = 'LOAD_ENTITY_REJECTED';
        const reducer = wrappingFn({ ...initialState, loaded: false }, action);
        expect(reducer).toEqual({ 
            ...initialState, 
            loaded: true,
            activeApps: [
                {
                    title: 'Vulnerabilities',
                    name: 'vulnerabilities',
                    component: expect.anything()
                }
            ]
         });
    });
});
