import React from 'react';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import ColumnManagementModal from './ColumnManagementModal';
import {
    SYSTEM_DETAILS_HEADER
} from '../../../Helpers/constants';
import toJson from 'enzyme-to-json';
import { BrowserRouter as Router } from 'react-router-dom';

let wrapper;
beforeEach(() => {
    wrapper = mountWithIntl(
        <Router>
            <ColumnManagementModal appliedColumns={SYSTEM_DETAILS_HEADER}
                                   applyColumns={null}
                                   isModalOpen={true}
                                   setModalOpen={null}/>
        </Router>
    );
});

describe('ColumnManagementModal', () => {
    it('Should match snapshots', () => {
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should render with all checked', () => {
        const checkBoxes = wrapper.find('DataListCheck');

        expect(checkBoxes.get(0).props.checked === true);
        expect(checkBoxes.get(1).props.checked === true);
        expect(checkBoxes.get(2).props.checked === true);
        expect(checkBoxes.get(3).props.checked === true);
        expect(checkBoxes.get(4).props.checked === true);
        expect(checkBoxes.get(5).props.checked === true);
        expect(checkBoxes.get(6).props.checked === true);
        expect(checkBoxes.get(7).props.checked === true);
    });

    it('Should uncheck second item', () => {
        const checkBoxes = wrapper.find('DataListCheck');

        checkBoxes.at(1).simulate('click');

        expect(checkBoxes.get(1).props.checked === false);
    });

    it('Should first item by disabled', () => {
        const checkBoxes = wrapper.find('DataListCheck');

        expect(checkBoxes.get(0).props.disabled === true);
    });

    it('Should select all items', () => {
        const checkBoxes = wrapper.find('DataListCheck');
        const selectAllButton = wrapper.find({ variant: 'link' }).first();

        checkBoxes.at(1).simulate('click');
        checkBoxes.at(2).simulate('click');
        checkBoxes.at(3).simulate('click');
        checkBoxes.at(4).simulate('click');
        checkBoxes.at(5).simulate('click');
        checkBoxes.at(6).simulate('click');
        checkBoxes.at(7).simulate('click');

        selectAllButton.simulate('click');

        expect(checkBoxes.get(1).props.checked === true);
        expect(checkBoxes.get(2).props.checked === true);
        expect(checkBoxes.get(3).props.checked === true);
        expect(checkBoxes.get(4).props.checked === true);
        expect(checkBoxes.get(5).props.checked === true);
        expect(checkBoxes.get(6).props.checked === true);
        expect(checkBoxes.get(7).props.checked === true);
    });

    it('Should reset to default select all default items and unselect all other items', () => {
        const checkBoxes = wrapper.find('DataListCheck');
        const resetToDefaultButton = wrapper.find({ variant: 'link' }).last();

        checkBoxes.at(1).simulate('click');
        checkBoxes.at(2).simulate('click');
        checkBoxes.at(3).simulate('click');
        checkBoxes.at(4).simulate('click');
        checkBoxes.at(5).simulate('click');
        checkBoxes.at(6).simulate('click');
        checkBoxes.at(7).simulate('click');

        resetToDefaultButton.simulate('click');

        expect(checkBoxes.get(1).props.checked === true);
        expect(checkBoxes.get(2).props.checked === true);
        expect(checkBoxes.get(3).props.checked === true);
        expect(checkBoxes.get(4).props.checked === true);
        expect(checkBoxes.get(5).props.checked === true);
        expect(checkBoxes.get(6).props.checked === true);
        expect(checkBoxes.get(7).props.checked === true);
    });

});
