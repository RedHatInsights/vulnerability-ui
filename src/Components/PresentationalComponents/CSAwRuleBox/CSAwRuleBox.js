import React, { Fragment, useState } from 'react';
import PropTypes from 'prop-types';
import { Stack,
    StackItem,
    Text,
    TextContent,
    TextVariants,
    Tooltip,
    SplitItem,
    Split,
    Grid,
    GridItem,
    Card,
    CardBody,
    Button
} from '@patternfly/react-core';
import { Link } from 'react-router-dom';
import { Reboot } from '@redhat-cloud-services/frontend-components/components/Reboot';
import CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';
import OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';
import ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';
import { injectIntl } from 'react-intl';
import Label from '../Snippets/Label';
import messages from '../../../Messages';
import { RISK_OF_CHANGE_TOOLTIP, RISK_OF_CHANGE_LABEL, RH_KB_URL, CVES_PATH } from '../../../Helpers/constants';
import { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';
import CSAwRuleSummary from './CSAwRuleSummary';
import './CSAwRuleBox.scss';

const CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters,  intl }) => {
    const [numberOfCards, setNumberOfCards] = useState(2);
    const ruleCards = rules.length > numberOfCards && rules.slice(0, numberOfCards) || rules;

    const handleExposedSystemFilter = (ruleId) => {
        const params = { security_rule: ruleId };
        changeExposedSystemsParameters(params);
    };

    return <Fragment>
        {ruleCards && ruleCards.map(rule => (
            <Card className="card-box-shadow" key={rule.rule_id}>
                <CardBody>
                    <Grid hasGutter>
                        <GridItem span={12}>
                            <TextContent className={'icon-with-label'}>
                                <Text component={TextVariants.h3}>
                                    <Tooltip
                                        content={intl.formatMessage(messages.rulesIconTooltip)}
                                        trigger='mouseenter focus click'
                                    >
                                        <CSAwIcon />
                                    </Tooltip>
                                    {rule.description}
                                </Text>
                            </TextContent>
                        </GridItem>
                        <GridItem span={8}>
                            <Stack hasGutter>
                                <StackItem>
                                    <CSAwRuleSummary text={rule.summary} />
                                </StackItem>

                                <StackItem>
                                    <TextContent>
                                        <Text component={TextVariants.h4}>{intl.formatMessage(messages.associatedCves)}</Text>
                                        <Text component={TextVariants.p}>
                                            {synopsis} ({intl.formatMessage(messages.current)})
                                            {
                                                rule.associated_cves
                                                .filter(cve => cve !== synopsis)
                                                .map((cve, _i) =>
                                                    <a
                                                        className="associated-cve-link"
                                                        key={_i}
                                                        href={`${CVES_PATH}/${cve}`}
                                                    >
                                                        {cve}
                                                    </a>
                                                )
                                                .reduce((prev, curr) => [prev, ', ', curr], [''])
                                            }
                                        </Text>
                                    </TextContent>
                                </StackItem>

                                {
                                    rule.kbase_node_id &&
                                    <StackItem>
                                        <TextContent>
                                            <Text
                                                className={'icon-with-label'}
                                                component={TextVariants.p}
                                            >
                                                <a
                                                    className="kb-link"
                                                    href={`${RH_KB_URL}/${rule.kbase_node_id}`}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                >
                                                    {
                                                        intl.formatMessage(messages.knowledgebaseArticle)
                                                    }
                                                    <ExternalLinkAltIcon className="l-sm-spacer"/>
                                                </a>
                                            </Text>
                                        </TextContent>
                                    </StackItem>
                                }

                            </Stack>
                        </GridItem>
                        <GridItem span={4}>
                            <Stack hasGutter>
                                {rule.rule_id &&
                                    <StackItem>
                                        <TextContent>
                                            <Text
                                                className={'filter-affected-systems'}
                                                onClick={() => handleExposedSystemFilter(rule.rule_id)}
                                            >
                                                <Link
                                                    key={rule.rule_id}
                                                    to={`/cves/${synopsis}/?security_rule=${rule.rule_id}`}
                                                >
                                                    {intl.formatMessage(messages.filterByAffectedSystems)}

                                                </Link>

                                            </Text>
                                        </TextContent>
                                    </StackItem>
                                }
                                <StackItem>
                                    <TextContent>
                                        <Text component={TextVariants.h4}>
                                            {intl.formatMessage(messages.remediationLabel)}
                                        </Text>
                                        <Split hasGutter>
                                            <SplitItem>
                                                <Label className="label">
                                                    {intl.formatMessage(messages.ansibleRemediation)}

                                                </Label>
                                            </SplitItem>
                                            <SplitItem className="icon-with-label" isFilled>
                                                { !rule.playbook_count
                                                    ? intl.formatMessage(messages.no)
                                                    : (
                                                        <Fragment>
                                                            <CheckCircleIcon className="ansible-success" />
                                                            {intl.formatMessage(messages.yes)}
                                                            <Tooltip
                                                                content={intl.formatMessage(messages.ansibleRemediationTooltip)}
                                                                trigger='mouseenter focus click'
                                                            >
                                                                <OutlinedQuestionCircleIcon
                                                                    color={'var(--pf-global--secondary-color--100)'}
                                                                    className="l-sm-spacer"
                                                                />
                                                            </Tooltip>
                                                        </Fragment>
                                                    )
                                                }
                                            </SplitItem>
                                        </Split>
                                        <Split hasGutter className="pf-u-mt-md">
                                            <SplitItem>
                                                <Label className="label">
                                                    {intl.formatMessage(messages.riskOfChange)}
                                                </Label>
                                            </SplitItem>
                                            <SplitItem isFilled className="icon-with-label">
                                                { RISK_OF_CHANGE_LABEL[rule.change_risk] }

                                                <Tooltip
                                                    content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}
                                                    trigger='mouseenter focus click'
                                                >
                                                    <OutlinedQuestionCircleIcon
                                                        color={'var(--pf-global--secondary-color--100)'}
                                                        className="l-sm-spacer"
                                                    />
                                                </Tooltip>

                                                <div className="pf-u-mt-sm">
                                                    { rule.reboot_required && <strong><Reboot red /></strong> }
                                                </div>
                                            </SplitItem>
                                        </Split>
                                    </TextContent>
                                </StackItem>
                            </Stack>
                        </GridItem>
                    </Grid>
                </CardBody>
            </Card>
        ))}
        {
            rules.length > numberOfCards && (
                <Grid>
                    <GridItem>
                        <Button key="viewMoreRules" variant="secondary" onClick={() => setNumberOfCards(rules.length)}>
                            {intl.formatMessage(messages.viewMoreScurityRules, { rules: (rules.length - numberOfCards) })}
                        </Button>
                    </GridItem>
                </Grid>
            )
        }
    </Fragment>;
};

CSAwRuleBox.defaultProps = {
    rules: []
};

CSAwRuleBox.propTypes = {
    intl: PropTypes.any,
    rules: PropTypes.array,
    synopsis: PropTypes.string,
    changeExposedSystemsParameters: PropTypes.func
};

export default injectIntl(CSAwRuleBox);
