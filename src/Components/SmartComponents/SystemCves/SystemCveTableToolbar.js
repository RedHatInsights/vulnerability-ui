/* eslint-disable camelcase */
import { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import {
    filtersBusinessRisk,
    filtersCVSSScore,
    filtersPublishDate,
    filtersSeverity,
    filtersStatus
} from '../../../Helpers/constants';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import {
    kebabItemDownloadCSV,
    kebabItemDownloadJSON,
    kebabItemEditStatus
} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import FilterChips from '../../PresentationalComponents/Filters/FilterChips';
import Filters from '../../PresentationalComponents/Filters/Filters';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import Remediation from '../Remediation/Remediation';
import SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';
import { CVETableContext } from './SystemCves';

class SystemCveToolbarWithContext extends Component {
    static propTypes = {
        showRemediationButton: propTypes.bool,
        entity: propTypes.object,
        context: propTypes.object
    };

    static defaultProps = {
        showRemediationButton: false,
        totalNumber: 0,
        apply: () => undefined,
        downloadReport: () => undefined
    };

    render() {
        const { showRemediationButton, entity, context } = this.props;
        const { cves, params, methods } = context;
        const { selectedCves } = params;
        const selectedCvesCount =
            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;
        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];
        const kebabOptions = [
            kebabItemEditStatus(
                methods.showStatusModal,
                [...selectedCves].map(item => ({ id: item, status_id: '0' })),
                undefined,
                { isDisabled: !selectedCvesCount }
            ),
            kebabItemDownloadJSON(methods.downloadReport),
            kebabItemDownloadCSV(methods.downloadReport)
        ];
        return (
            <React.Fragment>
                <TableToolbar className="space-between-toolbar-items">
                    <ToolbarGroup className="vulnerability-toolbar-spacing">
                        {showRemediationButton && (
                            <SelectAllCheckbox
                                selectedItems={selectedCvesCount}
                                selectorHandler={methods.selectCves}
                                items={cves}
                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}
                            />
                        )}
                        <Filters
                            searchPlaceholder="Find a CVEâ€¦"
                            apply={methods.apply}
                            filterValues={params}
                            filterCategories={filterCategories}
                        />
                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}
                        <BaseKebab dropdownItems={kebabOptions} />
                    </ToolbarGroup>

                    <ToolbarGroup>
                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />
                    </ToolbarGroup>
                </TableToolbar>
                <TableToolbar className="pf-u-pt-0">
                    <ToolbarGroup>
                        <ToolbarItem>
                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />
                        </ToolbarItem>
                    </ToolbarGroup>
                </TableToolbar>
            </React.Fragment>
        );
    }
}

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default SystemCveToolbar;
