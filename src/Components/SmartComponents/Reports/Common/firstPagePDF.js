/* eslint-disable camelcase */
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text } from '@react-pdf/renderer';
import messages from '../../../../Messages';
import tablePage from './tablePage';

const firstPagePDF = ({ cves, meta, filters, intl }) => {

    // convert array to object
    const filtersBuilder = filters.reduce((obj, item) => {
        obj[item.key] = {
            filter: item.category,
            values: item.chips.map(({ name }) => name).join(', ')
        };
        return obj;
    }, {});

    const cvss = filtersBuilder.cvss_filter ? filtersBuilder.cvss_filter.values : '0.0 - 10.0';
    // TODO fix the published date
    const publishedDate = filtersBuilder.publish_date ? filtersBuilder.publish_date.values : 'All';

    return (
        <Fragment key="first-section">
            <Paragraph>
                {intl.formatMessage(messages.CVEsPDFreportHeader, {
                    cvss_filter: <Text style={{ fontWeight: 700 }}>
                        {cvss}
                    </Text>,
                    public_date: <Text style={{ fontWeight: 700 }}>
                        {publishedDate}
                    </Text>
                })}
            </Paragraph>

            <Paragraph>
                {intl.formatMessage(messages.CVEsPDFreportSubHeader, {
                    cves: <Text style={{ fontWeight: 700 }}>
                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: meta.total_items.toString() })}
                    </Text>,
                    systems: <Text style={{ fontWeight: 700 }}>
                        {/* TODO get systems count from response once it's available  */}
                        {intl.formatMessage(messages.CVEsPDFreportSystems, { systems: 100 })}
                    </Text>
                })}
            </Paragraph>

            <Paragraph>
                {intl.formatMessage(messages.CVEsPDFreportFilters,
                    {
                        cvss_filter: <Text style={{ fontWeight: 700 }}> {cvss} </Text>,
                        public_date: <Text style={{ fontWeight: 700 }}> {publishedDate} </Text>
                    }
                )}

                { filtersBuilder.hasOwnProperty('impact') &&
                    intl.formatMessage(messages.CVEsPDFreportFiltersSeverity, {
                        severity: <Text style={{ fontWeight: 700 }}> {filtersBuilder.impact.values} </Text>
                    })
                }

                { filtersBuilder.hasOwnProperty('status_id') &&
                    intl.formatMessage(messages.CVEsPDFreportFiltersStatus, {
                        status: <Text style={{ fontWeight: 700 }}> {filtersBuilder.status_id.values} </Text>
                    })
                }

                { filtersBuilder.hasOwnProperty('business_risk_id') &&
                    intl.formatMessage(messages.CVEsPDFreportFiltersBusinessRisk, {
                        businessRisk: <Text style={{ fontWeight: 700 }}> {filtersBuilder.business_risk_id.values} </Text>
                    })
                }

                { filtersBuilder.hasOwnProperty('security_rule') &&
                    intl.formatMessage(messages.CVEsPDFreportFilterSecurity, {
                        security_rule: <Text style={{ fontWeight: 700 }}> {filtersBuilder.security_rule.values} </Text>
                    })
                }

            </Paragraph>

            {tablePage({ data: cves, intl })}

        </Fragment>
    );
};

firstPagePDF.propTypes = {
    intl: PropTypes.any,
    filters: PropTypes.array,
    cves: PropTypes.object,
    meta: PropTypes.object
};

export default firstPagePDF;
