import { Main } from '@redhat-cloud-services/frontend-components';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';
import {
    Table as PfTable,
    TableBody,
    TableHeader,
    TableGridBreakpoint,
    cellWidth,
    TableVariant,
    sortable,
    expandable,
    SortByDirection
} from '@patternfly/react-table';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as ReactRedux from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';
import { withRouter } from 'react-router-dom';
import { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';
import { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import Header from '../../PresentationalComponents/Header/Header';
import { injectIntl } from 'react-intl';
import { PATHS } from '../../../Helpers/constants';
import messages from '../../../Messages';

class InventoryDetail extends React.Component {
    static propTypes = {
        fetchSystemDetails: propTypes.func,
        systemDetails: propTypes.object,
        optOutSystem: propTypes.func,
        match: propTypes.object,
        addNotification: propTypes.func,
        intl: propTypes.any,
        errors: propTypes.object
    };

    constructor(props) {
        super(props);

        this.state = {
            inventoryId: this.props.match.params.inventoryId,
            removeListener: () => {}
        };
    }

    componentDidMount() {
        this.props.fetchSystemDetails(this.state.inventoryId);
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({
            ReactRedux,
            react: React,
            reactRouterDom,
            pfReactTable: {
                Table: PfTable,
                TableBody,
                TableHeader,
                TableGridBreakpoint,
                cellWidth,
                TableVariant,
                sortable,
                expandable,
                SortByDirection
            },
            pfReact: reactCore
        });

        ReducerRegistry.register({
            ...mergeWithEntities(),
            ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))
        });

        this.setState({
            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,
            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo,
            InvWrapper: inventoryConnector(ReducerRegistry.getStore()).DetailWrapper
        });
        this.state.removeListener();
    }

    optOutSystem = value => {
        this.props.optOutSystem(this.state.inventoryId, value).then(() => {
            this.props.fetchSystemDetails(this.state.inventoryId);
            value === true
                ? this.props.addNotification({
                    variant: 'success',
                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)
                })
                : this.props.addNotification({
                    variant: 'success',
                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),
                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)
                });
        });
    };

    render() {
        const { InventoryHeader, InventoryBody, InvWrapper } = this.state;
        const { systemDetails = {}, errors } = this.props;
        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;
        const Wrapper = InvWrapper || React.Fragment;
        return (
            <React.Fragment>
                <Wrapper>
                    <Header
                        title=''
                        breadcrumbs={[
                            {
                                title: PATHS.systemsPage.title,
                                to: PATHS.systemsPage.to,
                                loaded: true
                            },
                            {
                                // eslint-disable-next-line camelcase
                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),
                                isActive: true,
                                loaded
                            }
                        ]}
                    >
                        {InventoryHeader && !errors && (
                            <InventoryHeader
                                hideBack
                                actions={
                                    entity && [
                                        isOptOut
                                            ? {
                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),
                                                onClick: () => this.optOutSystem(false)
                                            }
                                            : {
                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),
                                                onClick: () => this.optOutSystem(true)
                                            }
                                    ]
                                }
                            />
                        )}
                    </Header>

                    {InventoryBody && (
                        <Main>
                            <React.Fragment>
                                <InventoryBody optOutSystemHandler={this.optOutSystem} />
                            </React.Fragment>
                        </Main>
                    )}
                </Wrapper>
            </React.Fragment>
        );
    }

}

function mapStateToProps(state) {
    return {
        errors: state.SystemCvesStore.cveList.payload.errors,
        systemDetails: state.entityDetails
    };
}

const mapDispatchToProps = dispatch => {
    return {
        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),
        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),
        addNotification: notification => dispatch(addNotification(notification))
    };
};

export default withRouter(
    injectIntl(
        connect(
            mapStateToProps,
            mapDispatchToProps
        )(InventoryDetail)
    )
);
