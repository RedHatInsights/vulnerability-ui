import businessRiskFilter from './BusinessRiskFilter'

describe('BusinessRiskFilter', () => {
    const applyMock = jest.fn();

    it('Should render the option items', () => {
        const options =  [ 
            { label: 'High', value: '3' },
            { label: 'Medium', value: '2' },
            { label: 'Low', value: '1' },
            { label: 'Not defined', value: '0' } 
        ]
        const comp = businessRiskFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue', () => {
        let comp = businessRiskFilter(applyMock)
        expect(comp.filterValues.value).toStrictEqual([])
    })


    it('Should use passed currentValues', () => {
        let currentFilter = { business_risk_id: '1' }
        let expected = ['1']
        let comp = businessRiskFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)

        currentFilter = { business_risk_id: '1,4,65,6' }
        expected = ['1', '4', '65', '6']
        comp = businessRiskFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)
    })

    it('Should call apply with params', () => {
        let currentFilter = { business_risk_id: '1' }
        let comp = businessRiskFilter(applyMock, currentFilter)

        comp.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ business_risk_id: '', page: 1 })

        comp.filterValues.onChange('event', [',', '2'])
        expect(applyMock).toBeCalledWith({ business_risk_id: '', page: 1 })
    })

})
