
import { withRouter } from 'react-router-dom';
import { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import './App.scss';
import ReducerRegistry from './Utilities/ReducerRegistry';
import { Routes } from './Utilities/Routes';
import NoAccessPage from './Components/SmartComponents/EmptyPage/NoAccessPage';

ReducerRegistry.register({ notifications });

class App extends Component {
    static propTypes = {
        history: PropTypes.object
    };

    constructor(props) {
        super(props);
        this.state = { hasPermission: true };
    }

    async componentDidMount() {
        insights.chrome.init();
        insights.chrome.identifyApp('vulnerability');
        insights.chrome.navigation(buildNavigation());
        this.buildNav = this.props.history.listen(() => insights.chrome.navigation(buildNavigation()));
        this.checkPermission();
    }

    componentWillUnmount() {
        this.buildNav();
    }

    checkPermission = async () => {
        const vulnerabilityPermissions = await window.insights.chrome.getUserPermissions('vulnerability');
        const permissionList = vulnerabilityPermissions.map(({ permission }) => permission);
        if (!permissionList.includes('vulnerability:*:*' || 'vulnerability:vulnerability:*')) {
            this.setState({ hasPermission: false });
        }
    }

    render() {
        if (this.state.hasPermission) {
            return (
                <React.Fragment>
                    <NotificationsPortal />
                    <Routes childProps={this.props} />
                </React.Fragment>
            );
        }
        else {
            return <NoAccessPage/>;
        }
    }
}

/**
 * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md
 *          https://reactjs.org/docs/higher-order-components.html
 */
export default withRouter(connect()(App));

function buildNavigation() {
    //const currentPath = window.location.pathname.split('/').slice(-1)[0];
    return [];
}
