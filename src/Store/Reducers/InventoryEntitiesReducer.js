import { sortable } from '@patternfly/react-table';

export const initialState = {
    columns: [],
    rows: [],
    entities: [],
    selectedRows: []
};

function modifyInventory(columns, state) {
    if (!state.selectedRows) {state.selectedRows = [];}

    if (state.loaded) {
        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');
        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];

        return {
            ...state,
            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),
            columns: [
                ...columns || [],
                ...lastSeenColumn || []
            ]
        };
    }

    return state;
}

function selectEntities(state, selected) {
    const myRows = state.rows.slice();
    if (!state.selectedRows) {state.selectedRows = [];}

    const retval = {
        ...state,
        rows: myRows
        .map(item => {
            const newValue =  { ...item, selected: selected.some(system => system === item.id) };
            return newValue;
        }),
        selectedRows: [...selected]
    };
    return retval;
}

export const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {
    switch (action.type) {
        case 'LOAD_ENTITIES_FULFILLED':
            return modifyInventory(columns, state);
        case 'SELECT_MULTIPLE_ENTITIES':
            return selectEntities(state, action.payload);
        case 'EXPAND_ROW':
            return {
                ...state,
                rows: state.rows.map(row => ({
                    ...row,
                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen
                }))
            };
        case 'CLEAR_INVENTORY_STORE':
            return initialState;
        default:
            return state;
    }
};
