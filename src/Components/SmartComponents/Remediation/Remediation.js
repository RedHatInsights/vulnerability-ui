import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';
import { RemediationButton } from '@redhat-cloud-services/frontend-components-remediations';
import { AnsibeTowerIcon }  from '@patternfly/react-icons';
import routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';
import globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

class Remediation extends Component {
    static propTypes = {
        cves: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        systems: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        addNotification: propTypes.func,
        manyRules: propTypes.bool
    };

    shouldComponentUpdate(nextProps) {
        if (nextProps.cves !== this.props.cves) {
            return true;
        }

        if (nextProps.systems !== this.props.systems) {
            return true;
        }

        return false;
    }

    remediationProvider = (cves = [], systems = [], manyRules = false) => {
        cves = [].concat(cves);
        systems = [].concat(systems);
        let [cve] = cves;
        let issues = [];

        if (manyRules && cve?.rules?.length > 0) {
            issues = cve?.rules.reduce((acc, rule) => {
                let issue = {
                    id: `vulnerabilities:${cve.id}:${rule.value}`,
                    description: cve.id
                };

                return [...acc, issue];
            }, []);
        } else {
            issues = cves.reduce((acc, cve) => {
                let { id, rules } = cve;
                let issue = {
                    id: `vulnerabilities:${id}`,
                    description: id
                };

                if (rules?.rule_id) {
                    issue.id = `${issue.id}:${rules.rule_id}`;
                }

                return [...acc, issue];
            }, []);
        }

        return cves.length && systems.length
            ? {
                issues,
                systems
            }
            : false;
    };

    render() {
        const { cves, systems, manyRules, addNotification: dispatchNotification } = this.props;
        return (
            <div>
                <RemediationButton
                    dataProvider={() => this.remediationProvider(cves, systems, manyRules)}
                    isDisabled={this.remediationProvider(cves, systems) === false}
                    onRemediationCreated={result => dispatchNotification(result.getNotification())}
                >
                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />
                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}
                </RemediationButton>
            </div>
        );
    }
}

export default connect(
    null,
    dispatch => ({
        addNotification: notification => dispatch(addNotification(notification))
    })
)(routerParams(Remediation));
