// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemDetailPage Should match the snapshots 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(injectIntl(Connect(InventoryDetail)))
        addNotification={[MockFunction]}
        fetchSystemDetails={[MockFunction]}
        match={
          Object {
            "params": Object {
              "inventoryId": "testCve",
            },
          }
        }
        optOutSystem={[MockFunction]}
      >
        <injectIntl(Connect(InventoryDetail))
          addNotification={[MockFunction]}
          fetchSystemDetails={[MockFunction]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          optOutSystem={[MockFunction]}
        >
          <Connect(InventoryDetail)
            addNotification={[MockFunction]}
            fetchSystemDetails={[MockFunction]}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {
                  "default.cancel": "Cancel",
                  "default.delete": "Delete",
                  "default.remove": "Remove",
                  "default.save": "Save",
                },
                "onError": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            optOutSystem={[MockFunction]}
          >
            <InventoryDetail
              addNotification={[Function]}
              fetchSystemDetails={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "formatDate": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {
                    "default.cancel": "Cancel",
                    "default.delete": "Delete",
                    "default.remove": "Remove",
                    "default.save": "Save",
                  },
                  "onError": [Function],
                  "textComponent": Symbol(react.fragment),
                  "timeZone": undefined,
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              optOutSystem={[Function]}
              systemDetails={
                Object {
                  "entity": "testEntity",
                  "opt_out": false,
                }
              }
            >
              <Page
                defaultManagedSidebarIsOpen={true}
                isBreadcrumbWidthLimited={false}
                isManagedSidebar={false}
                isNotificationDrawerExpanded={false}
                mainTabIndex={-1}
                onNotificationDrawerExpand={[Function]}
                onPageResize={[Function]}
              >
                <div
                  className="pf-c-page"
                >
                  <main
                    className="pf-c-page__main"
                    tabIndex={-1}
                  >
                    <Header
                      actions={Array []}
                      breadcrumbs={
                        Array [
                          Object {
                            "loaded": true,
                            "title": "Systems",
                            "to": "/systems",
                          },
                          Object {
                            "isActive": true,
                            "loaded": undefined,
                            "title": "Invalid System",
                          },
                        ]
                      }
                      showBreadcrumb={true}
                      title=""
                    >
                      <PageHeader>
                        <section
                          className="pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light"
                          widget-type="InsightsPageHeader"
                        >
                          <Breadcrumb
                            breadcrumbs={
                              Array [
                                Object {
                                  "loaded": true,
                                  "title": "Systems",
                                  "to": "/systems",
                                },
                                Object {
                                  "isActive": true,
                                  "loaded": undefined,
                                  "title": "Invalid System",
                                },
                              ]
                            }
                          >
                            <Breadcrumb
                              key="PfBreadcrumb"
                            >
                              <nav
                                aria-label="Breadcrumb"
                                className="pf-c-breadcrumb"
                                data-ouia-component-id="OUIA-Generated-Breadcrumb-1"
                                data-ouia-component-type="PF4/Breadcrumb"
                                data-ouia-safe={true}
                              >
                                <ol
                                  className="pf-c-breadcrumb__list"
                                >
                                  <BreadcrumbItem
                                    isActive={false}
                                    key=".$Vulnerability"
                                    showDivider={false}
                                  >
                                    <li
                                      className="pf-c-breadcrumb__item"
                                    >
                                      <Link
                                        to="/"
                                      >
                                        <LinkAnchor
                                          href="/"
                                          navigate={[Function]}
                                        >
                                          <a
                                            href="/"
                                            onClick={[Function]}
                                          >
                                            Vulnerability
                                          </a>
                                        </LinkAnchor>
                                      </Link>
                                    </li>
                                  </BreadcrumbItem>
                                  <BreadcrumbItem
                                    key=".1:$Systems"
                                    showDivider={true}
                                  >
                                    <li
                                      className="pf-c-breadcrumb__item"
                                    >
                                      <span
                                        className="pf-c-breadcrumb__item-divider"
                                      >
                                        <AngleRightIcon
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 256 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                            />
                                          </svg>
                                        </AngleRightIcon>
                                      </span>
                                      <Link
                                        to="/systems"
                                      >
                                        <LinkAnchor
                                          href="/systems"
                                          navigate={[Function]}
                                        >
                                          <a
                                            href="/systems"
                                            onClick={[Function]}
                                          >
                                            Systems
                                          </a>
                                        </LinkAnchor>
                                      </Link>
                                    </li>
                                  </BreadcrumbItem>
                                  <BreadcrumbItem
                                    isActive={true}
                                    key=".1:$Invalid System"
                                    showDivider={true}
                                  >
                                    <li
                                      className="pf-c-breadcrumb__item"
                                    >
                                      <span
                                        className="pf-c-breadcrumb__item-divider"
                                      >
                                        <AngleRightIcon
                                          color="currentColor"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="currentColor"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 256 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"
                                            />
                                          </svg>
                                        </AngleRightIcon>
                                      </span>
                                      <Skeleton
                                        isDark={false}
                                        size="md"
                                        style={
                                          Object {
                                            "width": "100px",
                                          }
                                        }
                                      >
                                        <div
                                          className="ins-c-skeleton ins-c-skeleton__md"
                                          style={
                                            Object {
                                              "width": "100px",
                                            }
                                          }
                                        >
                                           
                                        </div>
                                      </Skeleton>
                                    </li>
                                  </BreadcrumbItem>
                                </ol>
                              </nav>
                            </Breadcrumb>
                          </Breadcrumb>
                          <Split
                            className="pf-u-mb-lg"
                            hasGutter={true}
                          >
                            <div
                              className="pf-l-split pf-m-gutter pf-u-mb-lg"
                            >
                              <SplitItem>
                                <div
                                  className="pf-l-split__item"
                                >
                                  <PageHeaderTitle
                                    title=""
                                  >
                                    <Title
                                      className=""
                                      headingLevel="h1"
                                      size="2xl"
                                      widget-type="InsightsPageHeaderTitle"
                                    >
                                      <h1
                                        className="pf-c-title pf-m-2xl"
                                        widget-type="InsightsPageHeaderTitle"
                                      >
                                         
                                         
                                      </h1>
                                    </Title>
                                  </PageHeaderTitle>
                                </div>
                              </SplitItem>
                              <SplitItem
                                isFilled={true}
                              >
                                <div
                                  className="pf-l-split__item pf-m-fill"
                                />
                              </SplitItem>
                            </div>
                          </Split>
                          <InventoryDetailHead
                            actions={
                              Array [
                                Object {
                                  "onClick": [Function],
                                  "title": "Exclude from vulnerability analysis",
                                },
                              ]
                            }
                            hideBack={true}
                          >
                            <div>
                              A mock with '
                              ' passed!
                            </div>
                          </InventoryDetailHead>
                        </section>
                      </PageHeader>
                    </Header>
                    <Connect(Main)>
                      <Main>
                        <section
                          className="pf-l-page__main-section pf-c-page__main-section"
                          page-type=""
                        >
                          <AppInfo
                            optOutSystemHandler={[Function]}
                          >
                            <div>
                              this is inventory body
                            </div>
                          </AppInfo>
                        </section>
                      </Main>
                    </Connect(Main)>
                  </main>
                </div>
              </Page>
            </InventoryDetail>
          </Connect(InventoryDetail)>
        </injectIntl(Connect(InventoryDetail))>
      </withRouter(injectIntl(Connect(InventoryDetail)))>
    </Router>
  </BrowserRouter>
</Provider>
`;
