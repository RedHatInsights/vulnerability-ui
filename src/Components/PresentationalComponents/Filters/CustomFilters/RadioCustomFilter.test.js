import RadioCustomFilter from './RadioCustomFilter';

const selectProps = null
const options = [
    { value: "op1", label: "option 1" },
    { value: "op2", label: "option 2" },
    { value: "op3", label: "option 3" }
]
const filterName = "My filter"
const filterId = "my_filter"

describe('RadioCustomFilter component', () => {
    it('Should have selected first item by default.', () => {
        let filterData = { my_filter: "op1" }
        const setFilterData = newData => filterData = newData

        const filter = mount(
            <RadioCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        filter.find("button").first().simulate("click"); // open select with radios

        expect(filter.find("input[type='radio']").at(0).prop("checked")).toBeTruthy();
        expect(filter.find("input[type='radio']").at(1).prop("checked")).toBeFalsy();
        expect(filter.find("input[type='radio']").at(2).prop("checked")).toBeFalsy();
    });

    it('Should update filter data on radio change.', () => {
        let filterData = { my_filter: "op1" }
        const setFilterData = newData => filterData = newData

        const filter = mount(
            <RadioCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        filter.find("button").first().simulate("click"); // open select with radios

        filter.find("input[type='radio']").at(1).simulate('click', { target: { checked: true } }); // check the second radio

        expect(filterData).toStrictEqual({ my_filter: "op2" })
    });
});
