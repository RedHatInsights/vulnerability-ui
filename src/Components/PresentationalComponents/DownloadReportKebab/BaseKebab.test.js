import React from 'react';
import BaseKebab from './BaseKebab';
import { DropdownItem } from '@patternfly/react-core';

describe('BaseKebab component', () => {
    const function1 = jest.fn();

    const option1 = (function1) => (
        <DropdownItem key="o1" component="button" onClick={() => function1()}>
            Option1
        </DropdownItem>
    );

    it('should be disabled', () => {
        const wrapper = mount(<BaseKebab disabled dropdownItems={[]}/>);

        expect(wrapper.find('button').prop('disabled')).toBeTruthy();
    });

    it('should render with no items', () => { // maybe it should be disabled when there are no items?
        const wrapper = mount(<BaseKebab dropdownItems={[]}/>);

        const kebabButton = wrapper.find('button');
        kebabButton.simulate('click');

        expect(wrapper.find('DropdownMenu button').exists()).toBeFalsy();
    });
    
    it('should render with 1 item', () => {
        const wrapper = mount(<BaseKebab dropdownItems={[option1(function1)]}/>);

        const kebabButton = wrapper.find('button');
        kebabButton.simulate('click');

        expect(wrapper.find('DropdownMenu button').exists()).toBeTruthy();
    });

    it('should invoke function on click', () => {
        const wrapper = mount(<BaseKebab dropdownItems={[option1(function1)]}/>);

        const kebabButton = wrapper.find('button');
        kebabButton.simulate('click');

        const kebabOptionButton = wrapper.find('li>button');
        kebabOptionButton.simulate('click');

        expect(function1.mock.calls.length).toEqual(1);
    });
});
