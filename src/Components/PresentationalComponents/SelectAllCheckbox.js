import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import union from 'lodash/union';
import messages from '../../Messages';
import { injectIntl } from 'react-intl';

const SelectAllCheckbox = (props) => {
    const [isOpen, setIsOpen] = useState(false);

    const { selectedItems, items, multiRow } = props;
    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size
    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;
    const { meta, data } = items;
    const checkboxlabel = Boolean(selectedItemsCount) && `${selectedItemsCount} selected`;
    const selectPageNumber = multiRow ? data.length / 2 : data.length;
    const itemLabel = number => (number > 1 && 'items') || 'item';

    const handleOnToggle = isOpen => {
        setIsOpen(isOpen);
    };

    const handleOnSelect = () => {
        setIsOpen(!isOpen);
    };

    const handleSelectPage = () => {
        const { items: { data }, selectorHandler } = props;
        const items = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);
        selectorHandler(true, items);
    };

    const handleUnselectAll = () => {
        const { selectorHandler } = props;
        selectorHandler(false, undefined);
    };

    const handleSelectAll = () => {
        const { items: { meta }, selectorHandler, fetchResource } = props;
        // eslint-disable-next-line camelcase
        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });
        payload &&
            payload.then(({ data: response }) => {
                const items = response.map(item => item.id);
                selectorHandler(true, items);
            });
    };

    const handleOnCheckboxChange = () => {
        if (selectedItemsCount === 0) {
            handleSelectAll();
        } else {
            handleUnselectAll();
        }
    };

    const dropdownItems = [
        <DropdownItem key="none" onClick={handleUnselectAll}>
            {props.intl.formatMessage(messages.selectNone)}
        </DropdownItem>,
        <DropdownItem key="page" onClick={handleSelectPage} isDisabled={meta.total_items === 0}>
            {props.intl.formatMessage(messages.selectPage)} ({selectPageNumber} {itemLabel(selectPageNumber)})
        </DropdownItem>,
        <DropdownItem key="all" onClick={handleSelectAll} isDisabled={meta.total_items === 0}>
            {props.intl.formatMessage(messages.selectAll)} ({meta.total_items} {itemLabel(meta.total_items)})
        </DropdownItem>
    ];

    return (
        <Dropdown
            onSelect={handleOnSelect}
            toggle={
                <DropdownToggle
                    splitButtonItems={[
                        <Checkbox
                            id={'selectAllcheckbox'}
                            key={'selectAllcheckbox'}
                            isChecked={selectedItemsCount === 0 ? false : meta.total_items === selectedItemsCount ? true : null}
                            onChange={handleOnCheckboxChange}
                        />,
                        checkboxlabel
                    ]}
                    onToggle={handleOnToggle}
                    isDisabled={meta.total_items === 0 && selectedItemsCount === 0}
                />
            }
            isOpen={isOpen}
            dropdownItems={dropdownItems}
        />
    );
};

SelectAllCheckbox.propTypes = {
    selectorHandler: propTypes.func,
    fetchResource: propTypes.func,
    selectedItems: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ]),
    items: propTypes.object,
    multiRow: propTypes.bool,
    intl: propTypes.any
};

SelectAllCheckbox.defaultProps = {
    impact: 'Unknown',
    selectedItems: [],
    items: {},
    multiRow: false
};

export default injectIntl(SelectAllCheckbox);
