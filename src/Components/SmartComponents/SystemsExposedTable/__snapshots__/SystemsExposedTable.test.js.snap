// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemsExposedPage Should render without props 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <injectIntl(withRouter(SystemsExposedTable))
        cve="testCveName"
        cveStatusDetails={
          Object {
            "id": "testCveName",
            "justification": "testJustification",
            "status_id": 1,
          }
        }
        filterRuleValues={
          Array [
            Object {},
          ]
        }
        methods={
          Object {
            "showStatusModal": [MockFunction],
          }
        }
      >
        <withRouter(SystemsExposedTable)
          cve="testCveName"
          cveStatusDetails={
            Object {
              "id": "testCveName",
              "justification": "testJustification",
              "status_id": 1,
            }
          }
          filterRuleValues={
            Array [
              Object {},
            ]
          }
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {
                "default.cancel": "Cancel",
                "default.delete": "Delete",
                "default.remove": "Remove",
                "default.save": "Save",
              },
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          methods={
            Object {
              "showStatusModal": [MockFunction],
            }
          }
        >
          <SystemsExposedTable
            cve="testCveName"
            cveStatusDetails={
              Object {
                "id": "testCveName",
                "justification": "testJustification",
                "status_id": 1,
              }
            }
            filterRuleValues={
              Array [
                Object {},
              ]
            }
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {
                  "default.cancel": "Cancel",
                  "default.delete": "Delete",
                  "default.remove": "Remove",
                  "default.save": "Save",
                },
                "onError": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            methods={
              Object {
                "showStatusModal": [MockFunction],
              }
            }
          >
            <Component
              hasGutter={true}
            >
              <div
                className="pf-l-stack pf-m-gutter"
              >
                <Component>
                  <div
                    className="pf-l-stack__item"
                  >
                    <Component>
                      <div
                        className="pf-c-content"
                      >
                        <Component
                          component="h2"
                        >
                          <h2
                            className=""
                            data-pf-content={true}
                          >
                            Exposed systems
                          </h2>
                        </Component>
                      </div>
                    </Component>
                  </div>
                </Component>
                <Component>
                  <div
                    className="pf-l-stack__item"
                  >
                    <Component
                      actionsConfig={
                        Object {
                          "actions": Array [
                            "",
                            Object {
                              "label": "Edit status",
                              "onClick": [Function],
                              "props": Object {
                                "isDisabled": true,
                              },
                            },
                          ],
                          "kebabToggleProps": Object {
                            "isDisabled": true,
                          },
                        }
                      }
                      activeFiltersConfig={
                        Object {
                          "filters": Array [],
                          "onDelete": [Function],
                        }
                      }
                      bulkSelect={
                        Object {
                          "checked": false,
                          "count": undefined,
                          "isDisabled": false,
                          "items": Array [
                            Object {
                              "onClick": [Function],
                              "title": "Select none (0 items)",
                            },
                            Object {
                              "onClick": [Function],
                              "title": "Select page (1 item)",
                            },
                            Object {
                              "onClick": [Function],
                              "title": "Select all (0 items)",
                            },
                          ],
                          "onSelect": [Function],
                        }
                      }
                      dedicatedAction={
                        <Memo(Connect(withRouter(Connect(RouterParams))))
                          cves="testCveName"
                        />
                      }
                      expandable="true"
                      exportConfig={
                        Object {
                          "isDisabled": false,
                          "onSelect": [Function],
                        }
                      }
                      filterConfig={
                        Object {
                          "items": Array [
                            Object {
                              "filterValues": Object {
                                "aria-label": "search-field",
                                "id": "search-systems.search.name",
                                "onChange": [Function],
                                "placeholder": "Filter by name",
                                "value": undefined,
                              },
                              "label": "Name",
                              "type": "text",
                            },
                            Object {
                              "filterValues": Object {
                                "items": Array [
                                  Object {
                                    "label": "Has security rule",
                                    "value": "true",
                                  },
                                  Object {
                                    "label": "Does not have security rule",
                                    "value": "false",
                                  },
                                  Object {
                                    "label": undefined,
                                    "value": undefined,
                                  },
                                ],
                                "onChange": [Function],
                                "value": Array [],
                              },
                              "label": "Security rules",
                              "type": "checkbox",
                            },
                            Object {
                              "filterValues": Object {
                                "items": Array [
                                  Object {
                                    "label": "Not reviewed",
                                    "value": "0",
                                  },
                                  Object {
                                    "label": "In review",
                                    "value": "1",
                                  },
                                  Object {
                                    "label": "On-hold",
                                    "value": "2",
                                  },
                                  Object {
                                    "label": "Scheduled for patch",
                                    "value": "3",
                                  },
                                  Object {
                                    "label": "Resolved",
                                    "value": "4",
                                  },
                                  Object {
                                    "label": "No action - risk accepted",
                                    "value": "5",
                                  },
                                  Object {
                                    "label": "Resolved via mitigation",
                                    "value": "6",
                                  },
                                ],
                                "onChange": [Function],
                                "value": Array [],
                              },
                              "label": "Status",
                              "type": "checkbox",
                            },
                          ],
                        }
                      }
                      hasCheckbox={true}
                      isLoaded={true}
                      items={
                        Array [
                          Object {
                            "children": <InsightsNoSystemRule />,
                            "cve_status_id": 2,
                            "display_name": "f375c7a8-c680-44fc-9fc4-003de8896877",
                            "id": "c3f36a42-5289-4940-8dcf-d1b7c8f90db2",
                            "inventory_id": "f375c7a8-c680-44fc-9fc4-003de8896877",
                            "isOpen": false,
                            "last_evaluation": "2020-07-21T08:14:11.877214+00:00",
                            "reporter": 1,
                            "rule": null,
                            "rules_evaluation": "2020-07-21T08:14:13.272253+00:00",
                            "status": "On-Hold",
                            "status_id": 2,
                            "status_name": "On-Hold",
                            "status_text": "testhello",
                          },
                        ]
                      }
                      key="inventory"
                      onExpandClick={[Function]}
                      onRefresh={[Function]}
                      page={1}
                      perPage={20}
                      showActions={true}
                      showTags={true}
                      tableProps={
                        Object {
                          "actionResolver": [Function],
                          "canSelectAll": false,
                          "isStickyHeader": true,
                          "onSort": [Function],
                          "sortBy": Object {},
                        }
                      }
                    >
                      <div>
                        Loading...
                      </div>
                    </Component>
                  </div>
                </Component>
              </div>
            </Component>
          </SystemsExposedTable>
        </withRouter(SystemsExposedTable)>
      </injectIntl(withRouter(SystemsExposedTable))>
    </Router>
  </BrowserRouter>
</Provider>
`;
