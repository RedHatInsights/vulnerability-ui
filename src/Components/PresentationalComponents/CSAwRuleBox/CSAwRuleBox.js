import React, { Fragment, useState } from 'react';
import PropTypes from 'prop-types';
import { Stack,
    StackItem,
    Text,
    TextContent,
    TextVariants,
    Tooltip,
    SplitItem,
    Split,
    Grid,
    GridItem,
    Card,
    CardBody,
    Button,
    ExpandableSection
} from '@patternfly/react-core';
import { useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';
import {
    CheckCircleIcon,
    OutlinedQuestionCircleIcon,
    ExternalLinkAltIcon,
    PowerOffIcon
} from '@patternfly/react-icons';
import { injectIntl } from 'react-intl';
import Label from '../Snippets/Label';
import messages from '../../../Messages';
import {
    RISK_OF_CHANGE_TOOLTIP,
    RISK_OF_CHANGE_LABEL,
    RH_KB_URL,
    CVES_PATH,
    impactTextList
} from '../../../Helpers/constants';
import CSAwLabel from '../Snippets/CSAwLabel';
import CSAwRuleSummary from './CSAwRuleSummary';
import './CSAwRuleBox.scss';

const CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {
    const dispatch = useDispatch();
    const [numberOfCards, setNumberOfCards] = useState(2);

    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));

    const ruleCards = sortedRules.length > numberOfCards && sortedRules.slice(0, numberOfCards) || sortedRules;

    const handleExposedSystemFilter = (ruleId) => {
        const params = { rule_key: ruleId, rule_presence: 'true' };
        dispatch(changeExposedSystemsParameters(params));
    };

    return <Fragment>
        {ruleCards && ruleCards.map(rule => (
            rule.summary && (
                <Card className="card-box" key={rule.rule_id}>
                    <ExpandableSection toggleText={
                        <Split>
                            <SplitItem className="pf-u-mr-xl">
                                <TextContent>
                                    <Text component={TextVariants.h3}>
                                        <CSAwLabel className="pf-u-mr-sm"/>
                                        {rule.description}
                                    </Text>
                                </TextContent>
                            </SplitItem>
                            <SplitItem id="filter-affected-systems-split">
                                {rule.rule_id &&
                                    <TextContent>
                                        <Text
                                            id="filter-affected-systems"
                                            onClick={() => handleExposedSystemFilter(rule.rule_id)}
                                            component={TextVariants.small}
                                        >
                                            <Link
                                                key={rule.rule_id}
                                                to={`/cves/${synopsis}/?rule_key=${rule.rule_id}`}
                                            >
                                                {
                                                    intl.formatMessage(
                                                        messages.filterByAffectedSystems,
                                                        {
                                                            count: rule.systems_affected ?? -1
                                                        }
                                                    )
                                                }
                                            </Link>
                                        </Text>
                                    </TextContent>}
                            </SplitItem>
                        </Split>
                    }>
                        <CardBody className="rule-card-body">
                            <Grid hasGutter>
                                <GridItem md={9} sm={12}>
                                    <Stack hasGutter>
                                        <StackItem>
                                            <CSAwRuleSummary text={rule.summary} />
                                        </StackItem>
                                        <StackItem>
                                            <TextContent>
                                                <Split>
                                                    {rule.rule_impact && (
                                                        <SplitItem>
                                                            <Label className="label pf-u-mb-xs">
                                                                {intl.formatMessage(messages.impact)}
                                                            </Label>
                                                            <Tooltip
                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}
                                                            >
                                                                <InsightsLabel value={rule.rule_impact}/>
                                                            </Tooltip>
                                                        </SplitItem>
                                                    )}
                                                    <SplitItem>
                                                        <Label className="label pf-u-mb-xs">
                                                            {intl.formatMessage(messages.riskOfChange)}
                                                        </Label>
                                                        <Tooltip
                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}
                                                        >
                                                            { RISK_OF_CHANGE_LABEL[rule.change_risk] }
                                                        </Tooltip>
                                                    </SplitItem>
                                                    <SplitItem>
                                                        <Label className="label pf-u-mb-xs">
                                                            {intl.formatMessage(messages.remediationLabel)}
                                                        </Label>
                                                        <Split>
                                                            <SplitItem>
                                                                { !rule.playbook_count
                                                                    ? intl.formatMessage(messages.no)
                                                                    : (
                                                                        <Fragment>
                                                                            <CheckCircleIcon
                                                                                className="checkCircleIcon pf-u-mr-xs"
                                                                            />
                                                                            {intl.formatMessage(messages.yes)}
                                                                            <Tooltip
                                                                                content={intl.formatMessage(
                                                                                    messages.ansibleRemediationTooltip
                                                                                )}
                                                                            >
                                                                                <OutlinedQuestionCircleIcon
                                                                                    className="l-sm-spacer
                                                                                        outlinedQuestionCircleIcon"
                                                                                />
                                                                            </Tooltip>
                                                                        </Fragment>
                                                                    )
                                                                }
                                                            </SplitItem>
                                                            <SplitItem className="pf-u-ml-md">
                                                                { rule.reboot_required &&
                                                                <Text>
                                                                    <PowerOffIcon
                                                                        className="pf-u-mr-xs powerOffIcon"
                                                                    />
                                                                    {intl.formatMessage(messages.rebootRequired)}
                                                                </Text>
                                                                }
                                                            </SplitItem>
                                                        </Split>
                                                    </SplitItem>

                                                </Split>
                                            </TextContent>
                                        </StackItem>

                                        {
                                            rule.kbase_node_id &&
                                        <StackItem>
                                            <TextContent>
                                                <Text
                                                    className="pf-u-mt-xs"
                                                    component={TextVariants.p}
                                                >
                                                    <a
                                                        className="kb-link"
                                                        href={`${RH_KB_URL}/${rule.kbase_node_id}`}
                                                        target="_blank"
                                                        rel="noopener noreferrer"
                                                    >
                                                        {
                                                            intl.formatMessage(messages.knowledgebaseArticle)
                                                        }
                                                        <ExternalLinkAltIcon className="l-sm-spacer"/>
                                                    </a>
                                                </Text>
                                            </TextContent>
                                        </StackItem>
                                        }

                                    </Stack>
                                </GridItem>
                                <GridItem md={3} sm={12}>
                                    <TextContent>
                                        <Label>
                                            {intl.formatMessage(messages.associatedCves)}
                                        </Label>
                                        <Text component={TextVariants.p} className="pf-u-mt-xs">
                                            {synopsis} ({intl.formatMessage(messages.current)})
                                            {
                                                rule.associated_cves
                                                .filter(cve => cve !== synopsis)
                                                .map((cve, _i) =>
                                                    <a
                                                        className="associated-cve-link"
                                                        key={_i}
                                                        href={`${CVES_PATH}/${cve}`}
                                                    >
                                                        {cve}
                                                    </a>
                                                )
                                                .reduce((prev, curr) => [prev, ', ', curr], [''])
                                            }
                                        </Text>
                                    </TextContent>
                                </GridItem>
                            </Grid>
                        </CardBody>
                    </ExpandableSection>
                </Card>
            )
        ))}
        {
            rules.length > numberOfCards && (
                <Grid>
                    <GridItem>
                        <Button key="viewMoreRules" variant="secondary" onClick={() => setNumberOfCards(rules.length)}>
                            {intl.formatMessage(messages.viewMoreSecurityRules, { rules: (rules.length - numberOfCards) })}
                        </Button>
                    </GridItem>
                </Grid>
            )
        }
    </Fragment>;
};

CSAwRuleBox.defaultProps = {
    rules: []
};

CSAwRuleBox.propTypes = {
    intl: PropTypes.any,
    rules: PropTypes.array,
    synopsis: PropTypes.string,
    changeExposedSystemsParameters: PropTypes.func
};

export default injectIntl(CSAwRuleBox);
