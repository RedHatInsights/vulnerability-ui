import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { Table, TableBody, TableHeader } from '@patternfly/react-table';
import { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';
import { cveTableRowActions } from '../../../Helpers/CVEHelper';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import {
    FilterNotFoundForCVE,
    EmptyCVEListForSystem,
    EmptyCVEList
} from '../../PresentationalComponents/EmptyStates/EmptyStates';

import { CVETableContext } from './CVEs';

const CVEsTableWithContext = ({ context, header, entity }) => {

    const noCves = () => {
        const { cves } = context;
        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(
            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]
        );

        let emptyComponent = filterFields.length !== 0
            ? FilterNotFoundForCVE
            : entity
                ? EmptyCVEListForSystem
                : cves.data.length === 0
                    && EmptyCVEList;

        return ([{
            heightAuto: true,
            cells: [
                {
                    props: { colSpan: 8 },
                    title: (
                        emptyComponent
                    )
                }
            ]
        }]);
    };

    const handleOnSelect = (event, isSelected, rowId) => {
        const { cves, methods } = context;
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    const { cves, methods, selectedCves, openedCves } = context;
    const isEmpty = cves.data.length === 0;

    const rows = cves.data
    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)
    .map(cve => {
        const current = openedCves.find(opened => opened === cve.id);
        return ({ ...cve, isOpen: current && true || false });
    });

    return (
        <Fragment>
            {!cves.isLoading ? (
                <Fragment>
                    <Table
                        canSelectAll={false}
                        aria-label={'Vulnerability CVE table'}
                        cells={header}

                        rows={isEmpty ? noCves() : rows}
                        onSelect={!isEmpty ? handleOnSelect : undefined}
                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}
                        actionResolver={!(cves.data.length === 0) ?
                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}
                        sortBy={!isEmpty ?
                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}
                        onSort={!isEmpty ?
                            (event, key, direction) =>
                                handleSortColumn(
                                    key,
                                    direction,
                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],
                                    cves.meta.sort,
                                    methods.apply
                                ) : undefined
                        }
                        gridBreakPoint={'grid-lg'}
                    >
                        <Fragment>
                            <TableHeader />
                            <TableBody />
                        </Fragment>
                    </Table>
                    <TableToolbar>
                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />
                    </TableToolbar>
                </Fragment>
            ) : (
                <SkeletonTable colSize={6} rowSize={20} />
            )}
        </Fragment>
    );

};

CVEsTableWithContext.propTypes = {
    context: propTypes.any,
    header: propTypes.array,
    entity: propTypes.object
};

const CVEsTable = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default CVEsTable;
