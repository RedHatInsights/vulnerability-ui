// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CVEDetailsPageSidebar component should render correctly 1`] = `
<CVEDetailsPageSidebar
  cveAttributes={
    Object {
      "business_risk": "Low",
      "business_risk_id": 1,
      "business_risk_justification": "m",
      "cvss2_metrics": null,
      "cvss2_score": null,
      "cvss3_metrics": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "cvss3_score": "7.800",
      "description": "A flaw was found in sudo. A heap-based buffer overflow was found in the way sudo parses command line arguments. This flaw is exploitable by any local user who can execute the sudo command (by default, any local user can execute sudo) without authentication. Successful exploitation of this flaw could lead to privilege escalation. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
      "impact": "Important",
      "public_date": "26 Jan 2021",
      "status": "Resolved",
      "status_id": 4,
      "status_justification": null,
      "synopsis": "CVE-2021-3156",
      "systems_status_detail": Object {
        "0": 114,
        "4": 4,
      },
      "systems_status_divergent": 206,
    }
  }
>
  <Stack
    hasGutter={true}
  >
    <div
      className="pf-l-stack pf-m-gutter"
    >
      <StackItem>
        <div
          className="pf-l-stack__item"
        >
          <Split
            hasGutter={true}
          >
            <div
              className="pf-l-split pf-m-gutter"
            >
              <SplitItem>
                <div
                  className="pf-l-split__item"
                >
                  <SnippetWithHeaderAndPopover
                    content={
                      <Stack
                        className="pf-u-p-xs"
                      >
                        <StackItem>
                          <Label
                            className="pf-u-mb-xs"
                          >
                            Justification note
                          </Label>
                        </StackItem>
                        <StackItem>
                          m
                        </StackItem>
                      </Stack>
                    }
                    title="Business risk"
                    value={
                      <WithLoader
                        isLoading={true}
                        style={
                          Object {
                            "width": "100px",
                          }
                        }
                      >
                        Low
                      </WithLoader>
                    }
                  >
                    <Popover
                      appendTo={null}
                      bodyContent={
                        <Stack
                          className="pf-u-p-xs"
                        >
                          <StackItem>
                            <Label
                              className="pf-u-mb-xs"
                            >
                              Justification note
                            </Label>
                          </StackItem>
                          <StackItem>
                            m
                          </StackItem>
                        </Stack>
                      }
                      headerContent=""
                      id="popover"
                      position="bottom"
                    >
                      <Popper
                        appendTo={null}
                        distance={25}
                        enableFlip={true}
                        flipBehavior={
                          Array [
                            "top",
                            "right",
                            "bottom",
                            "left",
                            "top",
                            "right",
                            "bottom",
                          ]
                        }
                        isVisible={false}
                        onDocumentClick={[Function]}
                        onDocumentKeyDown={[Function]}
                        onTriggerClick={[Function]}
                        placement="bottom"
                        popper={
                          <FocusTrap
                            active={false}
                            aria-describedby="popover-popover-body"
                            aria-label=""
                            aria-modal="true"
                            className="pf-c-popover"
                            focusTrapOptions={
                              Object {
                                "clickOutsideDeactivates": true,
                                "fallbackFocus": [Function],
                                "returnFocusOnDeactivate": true,
                              }
                            }
                            onMouseDown={[Function]}
                            paused={false}
                            preventScrollOnDeactivate={true}
                            role="dialog"
                            style={
                              Object {
                                "maxWidth": null,
                                "minWidth": null,
                                "opacity": 0,
                                "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                              }
                            }
                          >
                            <PopoverArrow />
                            <PopoverContent>
                              <PopoverCloseButton
                                aria-label="Close"
                                onClose={[Function]}
                              />
                              
                              <PopoverBody
                                id="popover-popover-body"
                              >
                                <Stack
                                  className="pf-u-p-xs"
                                >
                                  <StackItem>
                                    <Label
                                      className="pf-u-mb-xs"
                                    >
                                      Justification note
                                    </Label>
                                  </StackItem>
                                  <StackItem>
                                    m
                                  </StackItem>
                                </Stack>
                              </PopoverBody>
                            </PopoverContent>
                          </FocusTrap>
                        }
                        popperMatchesTriggerWidth={false}
                        positionModifiers={
                          Object {
                            "bottom": "pf-m-bottom",
                            "bottom-end": "pf-m-bottom-right",
                            "bottom-start": "pf-m-bottom-left",
                            "left": "pf-m-left",
                            "left-end": "pf-m-left-bottom",
                            "left-start": "pf-m-left-top",
                            "right": "pf-m-right",
                            "right-end": "pf-m-right-bottom",
                            "right-start": "pf-m-right-top",
                            "top": "pf-m-top",
                            "top-end": "pf-m-top-right",
                            "top-start": "pf-m-top-left",
                          }
                        }
                        trigger={
                          <Stack
                            className="popover-content"
                          >
                            <StackItem>
                              <Label
                                isLarge={true}
                              >
                                Business risk
                              </Label>
                            </StackItem>
                            <StackItem>
                              <a>
                                <WithLoader
                                  isLoading={true}
                                  style={
                                    Object {
                                      "width": "100px",
                                    }
                                  }
                                >
                                  Low
                                </WithLoader>
                              </a>
                            </StackItem>
                          </Stack>
                        }
                        zIndex={9999}
                      >
                        <FindRefWrapper
                          onFoundRef={[Function]}
                        >
                          <Stack
                            className="popover-content"
                          >
                            <div
                              className="pf-l-stack popover-content"
                            >
                              <StackItem>
                                <div
                                  className="pf-l-stack__item"
                                >
                                  <Label
                                    isLarge={true}
                                  >
                                    <span
                                      className="vuln-label "
                                      style={
                                        Object {
                                          "display": "block",
                                          "fontSize": "medium",
                                        }
                                      }
                                    >
                                      Business risk
                                    </span>
                                  </Label>
                                </div>
                              </StackItem>
                              <StackItem>
                                <div
                                  className="pf-l-stack__item"
                                >
                                  <a>
                                    <WithLoader
                                      isLoading={true}
                                      style={
                                        Object {
                                          "width": "100px",
                                        }
                                      }
                                    >
                                      <Skeleton
                                        isDark={false}
                                        size="lg"
                                        style={
                                          Object {
                                            "width": "100px",
                                          }
                                        }
                                      >
                                        <div
                                          className="ins-c-skeleton ins-c-skeleton__lg"
                                          style={
                                            Object {
                                              "width": "100px",
                                            }
                                          }
                                        >
                                           
                                        </div>
                                      </Skeleton>
                                    </WithLoader>
                                  </a>
                                </div>
                              </StackItem>
                            </div>
                          </Stack>
                        </FindRefWrapper>
                      </Popper>
                    </Popover>
                  </SnippetWithHeaderAndPopover>
                </div>
              </SplitItem>
              <SplitItem
                className="pf-u-ml-lg"
              >
                <div
                  className="pf-l-split__item pf-u-ml-lg"
                >
                  <SnippetWithHeaderAndPopover
                    content={
                      <Stack
                        className="pf-u-p-xs"
                      >
                        <StackItem>
                          <Label
                            className="pf-u-mb-xs"
                          >
                            CVE status
                          </Label>
                          Resolved
                          <Label
                            className="pf-u-mb-xs pf-u-mt-sm"
                          >
                            Justification note
                          </Label>
                          --
                        </StackItem>
                        <StackItem>
                          <TextContent>
                            <hr
                              className="pf-u-mt-sm pf-u-mb-sm"
                            />
                          </TextContent>
                          <Label
                            isLarge={true}
                          >
                            Systems with this CVE
                          </Label>
                          <Table
                            aria-label="Status details"
                            borders={true}
                            canCollapseAll={true}
                            canSelectAll={true}
                            canSortFavorites={true}
                            cells={
                              Array [
                                "Status",
                                "Num. systems",
                              ]
                            }
                            className="status-breakdown-table"
                            collapseAllAriaLabel=""
                            contentId="expanded-content"
                            dropdownDirection="down"
                            dropdownPosition="right"
                            expandId="expandable-toggle"
                            gridBreakPoint=""
                            isHeaderSelectDisabled={false}
                            isNested={false}
                            isStickyHeader={false}
                            isTreeTable={false}
                            ouiaSafe={true}
                            role="grid"
                            rowLabeledBy="simple-node"
                            rows={
                              Array [
                                Array [
                                  "Not reviewed",
                                  "114",
                                ],
                                Array [
                                  "Resolved",
                                  "4",
                                ],
                              ]
                            }
                            selectVariant="checkbox"
                            variant="compact"
                          >
                            <TableHeader />
                            <TableBody />
                          </Table>
                        </StackItem>
                      </Stack>
                    }
                    title="Status"
                    value={
                      <WithLoader
                        isLoading={true}
                        style={
                          Object {
                            "width": "100px",
                          }
                        }
                      >
                        <span>
                          <ExclamationTriangleIcon
                            color="var(--pf-global--primary-color--100)"
                            noVerticalAlign={false}
                            size="sm"
                          />
                           
                          Resolved
                        </span>
                      </WithLoader>
                    }
                  >
                    <Popover
                      appendTo={null}
                      bodyContent={
                        <Stack
                          className="pf-u-p-xs"
                        >
                          <StackItem>
                            <Label
                              className="pf-u-mb-xs"
                            >
                              CVE status
                            </Label>
                            Resolved
                            <Label
                              className="pf-u-mb-xs pf-u-mt-sm"
                            >
                              Justification note
                            </Label>
                            --
                          </StackItem>
                          <StackItem>
                            <TextContent>
                              <hr
                                className="pf-u-mt-sm pf-u-mb-sm"
                              />
                            </TextContent>
                            <Label
                              isLarge={true}
                            >
                              Systems with this CVE
                            </Label>
                            <Table
                              aria-label="Status details"
                              borders={true}
                              canCollapseAll={true}
                              canSelectAll={true}
                              canSortFavorites={true}
                              cells={
                                Array [
                                  "Status",
                                  "Num. systems",
                                ]
                              }
                              className="status-breakdown-table"
                              collapseAllAriaLabel=""
                              contentId="expanded-content"
                              dropdownDirection="down"
                              dropdownPosition="right"
                              expandId="expandable-toggle"
                              gridBreakPoint=""
                              isHeaderSelectDisabled={false}
                              isNested={false}
                              isStickyHeader={false}
                              isTreeTable={false}
                              ouiaSafe={true}
                              role="grid"
                              rowLabeledBy="simple-node"
                              rows={
                                Array [
                                  Array [
                                    "Not reviewed",
                                    "114",
                                  ],
                                  Array [
                                    "Resolved",
                                    "4",
                                  ],
                                ]
                              }
                              selectVariant="checkbox"
                              variant="compact"
                            >
                              <TableHeader />
                              <TableBody />
                            </Table>
                          </StackItem>
                        </Stack>
                      }
                      headerContent=""
                      id="popover"
                      position="bottom"
                    >
                      <Popper
                        appendTo={null}
                        distance={25}
                        enableFlip={true}
                        flipBehavior={
                          Array [
                            "top",
                            "right",
                            "bottom",
                            "left",
                            "top",
                            "right",
                            "bottom",
                          ]
                        }
                        isVisible={false}
                        onDocumentClick={[Function]}
                        onDocumentKeyDown={[Function]}
                        onTriggerClick={[Function]}
                        placement="bottom"
                        popper={
                          <FocusTrap
                            active={false}
                            aria-describedby="popover-popover-body"
                            aria-label=""
                            aria-modal="true"
                            className="pf-c-popover"
                            focusTrapOptions={
                              Object {
                                "clickOutsideDeactivates": true,
                                "fallbackFocus": [Function],
                                "returnFocusOnDeactivate": true,
                              }
                            }
                            onMouseDown={[Function]}
                            paused={false}
                            preventScrollOnDeactivate={true}
                            role="dialog"
                            style={
                              Object {
                                "maxWidth": null,
                                "minWidth": null,
                                "opacity": 0,
                                "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                              }
                            }
                          >
                            <PopoverArrow />
                            <PopoverContent>
                              <PopoverCloseButton
                                aria-label="Close"
                                onClose={[Function]}
                              />
                              
                              <PopoverBody
                                id="popover-popover-body"
                              >
                                <Stack
                                  className="pf-u-p-xs"
                                >
                                  <StackItem>
                                    <Label
                                      className="pf-u-mb-xs"
                                    >
                                      CVE status
                                    </Label>
                                    Resolved
                                    <Label
                                      className="pf-u-mb-xs pf-u-mt-sm"
                                    >
                                      Justification note
                                    </Label>
                                    --
                                  </StackItem>
                                  <StackItem>
                                    <TextContent>
                                      <hr
                                        className="pf-u-mt-sm pf-u-mb-sm"
                                      />
                                    </TextContent>
                                    <Label
                                      isLarge={true}
                                    >
                                      Systems with this CVE
                                    </Label>
                                    <Table
                                      aria-label="Status details"
                                      borders={true}
                                      canCollapseAll={true}
                                      canSelectAll={true}
                                      canSortFavorites={true}
                                      cells={
                                        Array [
                                          "Status",
                                          "Num. systems",
                                        ]
                                      }
                                      className="status-breakdown-table"
                                      collapseAllAriaLabel=""
                                      contentId="expanded-content"
                                      dropdownDirection="down"
                                      dropdownPosition="right"
                                      expandId="expandable-toggle"
                                      gridBreakPoint=""
                                      isHeaderSelectDisabled={false}
                                      isNested={false}
                                      isStickyHeader={false}
                                      isTreeTable={false}
                                      ouiaSafe={true}
                                      role="grid"
                                      rowLabeledBy="simple-node"
                                      rows={
                                        Array [
                                          Array [
                                            "Not reviewed",
                                            "114",
                                          ],
                                          Array [
                                            "Resolved",
                                            "4",
                                          ],
                                        ]
                                      }
                                      selectVariant="checkbox"
                                      variant="compact"
                                    >
                                      <TableHeader />
                                      <TableBody />
                                    </Table>
                                  </StackItem>
                                </Stack>
                              </PopoverBody>
                            </PopoverContent>
                          </FocusTrap>
                        }
                        popperMatchesTriggerWidth={false}
                        positionModifiers={
                          Object {
                            "bottom": "pf-m-bottom",
                            "bottom-end": "pf-m-bottom-right",
                            "bottom-start": "pf-m-bottom-left",
                            "left": "pf-m-left",
                            "left-end": "pf-m-left-bottom",
                            "left-start": "pf-m-left-top",
                            "right": "pf-m-right",
                            "right-end": "pf-m-right-bottom",
                            "right-start": "pf-m-right-top",
                            "top": "pf-m-top",
                            "top-end": "pf-m-top-right",
                            "top-start": "pf-m-top-left",
                          }
                        }
                        trigger={
                          <Stack
                            className="popover-content"
                          >
                            <StackItem>
                              <Label
                                isLarge={true}
                              >
                                Status
                              </Label>
                            </StackItem>
                            <StackItem>
                              <a>
                                <WithLoader
                                  isLoading={true}
                                  style={
                                    Object {
                                      "width": "100px",
                                    }
                                  }
                                >
                                  <span>
                                    <ExclamationTriangleIcon
                                      color="var(--pf-global--primary-color--100)"
                                      noVerticalAlign={false}
                                      size="sm"
                                    />
                                     
                                    Resolved
                                  </span>
                                </WithLoader>
                              </a>
                            </StackItem>
                          </Stack>
                        }
                        zIndex={9999}
                      >
                        <FindRefWrapper
                          onFoundRef={[Function]}
                        >
                          <Stack
                            className="popover-content"
                          >
                            <div
                              className="pf-l-stack popover-content"
                            >
                              <StackItem>
                                <div
                                  className="pf-l-stack__item"
                                >
                                  <Label
                                    isLarge={true}
                                  >
                                    <span
                                      className="vuln-label "
                                      style={
                                        Object {
                                          "display": "block",
                                          "fontSize": "medium",
                                        }
                                      }
                                    >
                                      Status
                                    </span>
                                  </Label>
                                </div>
                              </StackItem>
                              <StackItem>
                                <div
                                  className="pf-l-stack__item"
                                >
                                  <a>
                                    <WithLoader
                                      isLoading={true}
                                      style={
                                        Object {
                                          "width": "100px",
                                        }
                                      }
                                    >
                                      <Skeleton
                                        isDark={false}
                                        size="lg"
                                        style={
                                          Object {
                                            "width": "100px",
                                          }
                                        }
                                      >
                                        <div
                                          className="ins-c-skeleton ins-c-skeleton__lg"
                                          style={
                                            Object {
                                              "width": "100px",
                                            }
                                          }
                                        >
                                           
                                        </div>
                                      </Skeleton>
                                    </WithLoader>
                                  </a>
                                </div>
                              </StackItem>
                            </div>
                          </Stack>
                        </FindRefWrapper>
                      </Popper>
                    </Popover>
                  </SnippetWithHeaderAndPopover>
                </div>
              </SplitItem>
            </div>
          </Split>
        </div>
      </StackItem>
      <StackItem>
        <div
          className="pf-l-stack__item"
        >
          <Label
            className="pf-u-mb-xs"
            isLarge={true}
          >
            <span
              className="vuln-label pf-u-mb-xs"
              style={
                Object {
                  "display": "block",
                  "fontSize": "medium",
                }
              }
            >
              Severity
            </span>
          </Label>
          <WithLoader
            isLoading={true}
            style={
              Object {
                "width": "100px",
              }
            }
          >
            <Skeleton
              isDark={false}
              size="lg"
              style={
                Object {
                  "width": "100px",
                }
              }
            >
              <div
                className="ins-c-skeleton ins-c-skeleton__lg"
                style={
                  Object {
                    "width": "100px",
                  }
                }
              >
                 
              </div>
            </Skeleton>
          </WithLoader>
        </div>
      </StackItem>
      <StackItem>
        <div
          className="pf-l-stack__item"
        >
          <injectIntl(CvssVector)
            cvss2_metrics={null}
            cvss3_metrics="CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
            score="7.8"
          >
            <CvssVector
              cvss2_metrics={null}
              cvss3_metrics="CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
              intl={
                Object {
                  "$t": [Function],
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "defaultRichTextElements": undefined,
                  "fallbackOnEmptyString": true,
                  "formatDate": [Function],
                  "formatDateTimeRange": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatListToParts": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {
                    "default.cancel": "Cancel",
                    "default.delete": "Delete",
                    "default.remove": "Remove",
                    "default.save": "Save",
                  },
                  "onError": [Function],
                  "onWarn": [Function],
                  "textComponent": Symbol(react.fragment),
                  "timeZone": undefined,
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
              score="7.8"
            >
              <TextContent>
                <div
                  className="pf-c-content"
                >
                  <Popover
                    bodyContent={
                      <WithLoader
                        colSize={2}
                        isLoading={true}
                        rowSize={8}
                        variant="compactTable"
                      >
                        <Table
                          aria-label="Metric breakdown"
                          borders={true}
                          canCollapseAll={true}
                          canSelectAll={true}
                          canSortFavorites={true}
                          cells={
                            Array [
                              "Metric",
                              "Value",
                            ]
                          }
                          className=""
                          collapseAllAriaLabel=""
                          contentId="expanded-content"
                          dropdownDirection="down"
                          dropdownPosition="right"
                          expandId="expandable-toggle"
                          gridBreakPoint=""
                          isHeaderSelectDisabled={false}
                          isNested={false}
                          isStickyHeader={false}
                          isTreeTable={false}
                          ouiaSafe={true}
                          role="grid"
                          rowLabeledBy="simple-node"
                          rows={
                            Array [
                              Array [
                                "Attack vector",
                                "Local",
                              ],
                              Array [
                                "Attack complexity",
                                "Low",
                              ],
                              Array [
                                "Privileges required",
                                "Low",
                              ],
                              Array [
                                "User interaction",
                                "None",
                              ],
                              Array [
                                "Scope",
                                "Unchanged",
                              ],
                              Array [
                                "Confidentiality",
                                "High",
                              ],
                              Array [
                                "Integrity",
                                "High",
                              ],
                              Array [
                                "Availability",
                                "High",
                              ],
                            ]
                          }
                          selectVariant="checkbox"
                          variant="compact"
                        >
                          <TableHeader />
                          <TableBody />
                        </Table>
                      </WithLoader>
                    }
                    enableFlip={true}
                    headerContent="CVSS 3.0  vector breakdown"
                    id="popover-cvss"
                    maxWidth="100%"
                    position="bottom"
                  >
                    <Popper
                      appendTo={[Function]}
                      distance={25}
                      enableFlip={true}
                      flipBehavior={
                        Array [
                          "top",
                          "right",
                          "bottom",
                          "left",
                          "top",
                          "right",
                          "bottom",
                        ]
                      }
                      isVisible={false}
                      onDocumentClick={[Function]}
                      onDocumentKeyDown={[Function]}
                      onTriggerClick={[Function]}
                      placement="bottom"
                      popper={
                        <FocusTrap
                          active={false}
                          aria-describedby="popover-popover-cvss-body"
                          aria-labelledby="popover-popover-cvss-header"
                          aria-modal="true"
                          className="pf-c-popover"
                          focusTrapOptions={
                            Object {
                              "clickOutsideDeactivates": true,
                              "fallbackFocus": [Function],
                              "returnFocusOnDeactivate": true,
                            }
                          }
                          onMouseDown={[Function]}
                          paused={false}
                          preventScrollOnDeactivate={true}
                          role="dialog"
                          style={
                            Object {
                              "maxWidth": "100%",
                              "minWidth": null,
                              "opacity": 0,
                              "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                            }
                          }
                        >
                          <PopoverArrow />
                          <PopoverContent>
                            <PopoverCloseButton
                              aria-label="Close"
                              onClose={[Function]}
                            />
                            <PopoverHeader
                              alertSeverityScreenReaderText="undefined alert:"
                              icon={null}
                              id="popover-popover-cvss-header"
                              titleHeadingLevel="h6"
                            >
                              CVSS 3.0  vector breakdown
                            </PopoverHeader>
                            <PopoverBody
                              id="popover-popover-cvss-body"
                            >
                              <WithLoader
                                colSize={2}
                                isLoading={true}
                                rowSize={8}
                                variant="compactTable"
                              >
                                <Table
                                  aria-label="Metric breakdown"
                                  borders={true}
                                  canCollapseAll={true}
                                  canSelectAll={true}
                                  canSortFavorites={true}
                                  cells={
                                    Array [
                                      "Metric",
                                      "Value",
                                    ]
                                  }
                                  className=""
                                  collapseAllAriaLabel=""
                                  contentId="expanded-content"
                                  dropdownDirection="down"
                                  dropdownPosition="right"
                                  expandId="expandable-toggle"
                                  gridBreakPoint=""
                                  isHeaderSelectDisabled={false}
                                  isNested={false}
                                  isStickyHeader={false}
                                  isTreeTable={false}
                                  ouiaSafe={true}
                                  role="grid"
                                  rowLabeledBy="simple-node"
                                  rows={
                                    Array [
                                      Array [
                                        "Attack vector",
                                        "Local",
                                      ],
                                      Array [
                                        "Attack complexity",
                                        "Low",
                                      ],
                                      Array [
                                        "Privileges required",
                                        "Low",
                                      ],
                                      Array [
                                        "User interaction",
                                        "None",
                                      ],
                                      Array [
                                        "Scope",
                                        "Unchanged",
                                      ],
                                      Array [
                                        "Confidentiality",
                                        "High",
                                      ],
                                      Array [
                                        "Integrity",
                                        "High",
                                      ],
                                      Array [
                                        "Availability",
                                        "High",
                                      ],
                                    ]
                                  }
                                  selectVariant="checkbox"
                                  variant="compact"
                                >
                                  <TableHeader />
                                  <TableBody />
                                </Table>
                              </WithLoader>
                            </PopoverBody>
                          </PopoverContent>
                        </FocusTrap>
                      }
                      popperMatchesTriggerWidth={false}
                      positionModifiers={
                        Object {
                          "bottom": "pf-m-bottom",
                          "bottom-end": "pf-m-bottom-right",
                          "bottom-start": "pf-m-bottom-left",
                          "left": "pf-m-left",
                          "left-end": "pf-m-left-bottom",
                          "left-start": "pf-m-left-top",
                          "right": "pf-m-right",
                          "right-end": "pf-m-right-bottom",
                          "right-start": "pf-m-right-top",
                          "top": "pf-m-top",
                          "top-end": "pf-m-top-right",
                          "top-start": "pf-m-top-left",
                        }
                      }
                      trigger={
                        <Label
                          className="pf-u-mb-xs pointer"
                          isLarge={true}
                        >
                          CVSS 3.0
                           
                           base score
                          <OutlinedQuestionCircleIcon
                            className="pf-u-ml-xs"
                            color="var(--pf-global--secondary-color--100)"
                            noVerticalAlign={false}
                            size="sm"
                          />
                        </Label>
                      }
                      zIndex={9999}
                    >
                      <FindRefWrapper
                        onFoundRef={[Function]}
                      >
                        <Label
                          className="pf-u-mb-xs pointer"
                          isLarge={true}
                        >
                          <span
                            className="vuln-label pf-u-mb-xs pointer"
                            style={
                              Object {
                                "display": "block",
                                "fontSize": "medium",
                              }
                            }
                          >
                            CVSS 3.0
                             
                             base score
                            <OutlinedQuestionCircleIcon
                              className="pf-u-ml-xs"
                              color="var(--pf-global--secondary-color--100)"
                              noVerticalAlign={false}
                              size="sm"
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                className="pf-u-ml-xs"
                                fill="var(--pf-global--secondary-color--100)"
                                height="1em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.125em",
                                  }
                                }
                                viewBox="0 0 512 512"
                                width="1em"
                              >
                                <path
                                  d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"
                                />
                              </svg>
                            </OutlinedQuestionCircleIcon>
                          </span>
                        </Label>
                      </FindRefWrapper>
                    </Popper>
                  </Popover>
                  <WithLoader
                    isLoading={true}
                    style={
                      Object {
                        "width": "320px",
                      }
                    }
                  >
                    <Skeleton
                      isDark={false}
                      size="lg"
                      style={
                        Object {
                          "width": "320px",
                        }
                      }
                    >
                      <div
                        className="ins-c-skeleton ins-c-skeleton__lg"
                        style={
                          Object {
                            "width": "320px",
                          }
                        }
                      >
                         
                      </div>
                    </Skeleton>
                  </WithLoader>
                </div>
              </TextContent>
            </CvssVector>
          </injectIntl(CvssVector)>
        </div>
      </StackItem>
    </div>
  </Stack>
</CVEDetailsPageSidebar>
`;
