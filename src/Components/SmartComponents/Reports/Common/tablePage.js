
import React, { Fragment } from 'react';
import { Text, StyleSheet, Link } from '@react-pdf/renderer';
import { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';
import PropTypes from 'prop-types';
// eslint-disable-next-line camelcase
import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';
// eslint-disable-next-line camelcase
import global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';
// eslint-disable-next-line camelcase
import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';

import { CVES_PATH } from '../../../../Helpers/constants';
import messages from '../../../../Messages';

const styles = StyleSheet.create({
    bold: { fontWeight: global_FontWeight_bold.value },
    link: { color: global_link_Color.value },
    text: { marginTop: global_spacer_md.value },
    endColumn: { width: '78px', textAlign: 'left' },
    hitColumn: { width: '70px', textAlign: 'left' }
});

const tablePage = ({ data, page, intl }) => {
    // eslint-disable-next-line react/prop-types
    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;
    const hitColumns = ['impact', 'cvss3_score', 'systems_affected', 'business_risk', 'status'];

    //TODO dynamic header
    const header = [
        { value: intl.formatMessage(messages.cveId), style: styles.endColumn },
        { value: intl.formatMessage(messages.publishDate), style: styles.hitColumn },
        { value: intl.formatMessage(messages.impact), style: styles.hitColumn },
        { value: intl.formatMessage(messages.cvssBaseScore), style: styles.hitColumn },
        { value: intl.formatMessage(messages.systemsExposed), style: styles.hitColumn },
        { value: intl.formatMessage(messages.businessRisk), style: styles.hitColumn },
        { value: intl.formatMessage(messages.status), style: styles.endColumn    }
    ];

    const rows = [
        ...data.map(({ attributes: cve }) => {
            return [
                <Text key={cve.synopsis} style={styles.endColumn}>
                    <Link
                        style={styles.link}
                        src={`${CVES_PATH}/${cve.synopsis}`}
                    >
                        {cve.synopsis}
                    </Link>
                </Text>,
                <Text key={cve.public_date} style={styles.hitColumn}>{`${processDate(cve.public_date)}`}</Text>,

                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: styles.hitColumn }))
            ];
        })
    ];

    return <Fragment key={page}>
        <Table
            withHeader
            rows={[header.map(item => columnBuilder(item)), ...rows]}
        />
    </Fragment>;
};

tablePage.propTypes = {
    data: PropTypes.object,
    intl: PropTypes.any,
    page: PropTypes.number
};

export default tablePage;
