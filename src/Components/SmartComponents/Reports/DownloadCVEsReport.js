
import React, { useState } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getCveListByAccount } from '../../../Helpers/APIHelper';
import { chunkArray } from '../../../Helpers/MiscHelper';
import messages from '../../../Messages';
import firstPagePDF from './Common/firstPagePDF';
import tablePage from './Common/tablePage';
import DownloadReport from '../../../Helpers/DownloadReport';
import { PDF_REPORT_PER_PAGE, STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';
import { Text } from '@react-pdf/renderer';
import styles from './Common/styles';
import { useNotification } from '../../../Helpers/Hooks';

const DownloadCVEsReport = ({
    filters,
    params,
    reportData = {},
    buttonProps,
    isReportDynamic = false,
    label,
    ...props
}) => {
    const intl = useIntl();
    const [loading, setLoading] = useState(false);
    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);
    const addNotification = useNotification();

    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.otherPages, true);

    const cvesFetch = async () => {
        setLoading(true);

        addNotification({ msg: messages.customReportNotificationCve });

        let { data, meta } = await getCveListByAccount({
            ...params,
            ...DownloadReport.defaultParams,
            sort: params.sort || '-cvss_score',
            affecting: 'true,false'
        });

        let user;
        if (reportData && reportData.userNotes) {
            user = await insights.chrome.auth.getUser();
        }

        data = data.map(cve => ({
            ...cve,
            attributes: {
                ...cve.attributes,
                status: STATUS_OPTIONS.find(item =>
                    item.value === cve.attributes.status_id.toString()).label,
                business_risk: BUSINESS_RISK_OPTIONS.find(item =>
                    item.value === cve.attributes.business_risk_id.toString()).label,
                impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),
                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)
            }
        }));

        setSecurityRulesPresent(() => {
            const hasRule = data.some(cve => cve.attributes.rules.length > 0);
            return isReportDynamic ? hasRule && reportData && reportData.header?.includes('rule_presence') : hasRule;
        });

        const firstPage = firstPagePDF({
            data: data.splice(0,
                reportData.userNotes ? PDF_REPORT_PER_PAGE.firstPageWithNote : PDF_REPORT_PER_PAGE.firstPageWithoutNote
            ),
            meta,
            filters,
            intl,
            isReportDynamic,
            reportData,
            user,
            type: 'cves' // FIXME: firstPagePDF should be more abstract
        });

        const otherPages = otherPagesPDF(data);

        setLoading(false);

        return [
            firstPage,
            ...otherPages.map((cvePage, index) =>
                tablePage({
                    data: cvePage,
                    page: index,
                    intl,
                    header: reportData && reportData.header,
                    type: 'cves', // FIXME: same for tablePage
                    isReportDynamic
                })
            )
        ];
    };

    return (
        <div>
            <DownloadButton
                {...props}
                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}
                asyncFunction={cvesFetch}
                buttonProps={{ component: 'button', ...buttonProps }}
                reportName={isReportDynamic ? reportData.reportTitle : intl.formatMessage(messages.cvePDFReportName)}
                type={''}
                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}
                allPagesHaveTitle={false}
                size={'A4'}
                orientation={'landscape'}
                footer={
                    securityRulesPresent && (
                        <Text style={styles.footer}>
                            {intl.formatMessage(messages.customReportFooter)}
                        </Text>
                    )
                }
            />
        </div>
    );
};

DownloadCVEsReport.defaultProps = {
    label: messages.kebabExportAsPDF
};

DownloadCVEsReport.propTypes = {
    filters: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ]),
    params: propTypes.object,
    reportData: propTypes.object,
    buttonProps: propTypes.object,
    label: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ]),
    isReportDynamic: propTypes.bool
};

export default DownloadCVEsReport;
