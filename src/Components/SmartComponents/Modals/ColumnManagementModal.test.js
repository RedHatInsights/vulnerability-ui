import React from 'react';
import ColumnManagementModal from './ColumnManagementModal';
import { expandable, nowrap, sortable, wrappable } from '@patternfly/react-table';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import TestWrapper from '../../../Utilities/TestWrapper';
import userEvent from '@testing-library/user-event';

export const SYSTEM_DETAILS_HEADER = [
    {
        title: 'unhidable item',
        key: 'unhidable_item',
        transforms: [sortable],
        columnTransforms: [wrappable],
        cellFormatters: [expandable],
        isShownByDefault: true,
        isUnhidable: true
    },
    {
        title: 'is shown by default item',
        key: 'is_show_by_default_item',
        transforms: [sortable, wrappable],
        isShownByDefault: true
    },
    {
        title: 'unchecked item 1',
        key: 'unchecked_item_1',
        transforms: [sortable, wrappable],
        columnTransforms: [nowrap],
        isShownByDefault: false
    },
    {
        title: 'unchecked item 2',
        key: 'unchecked_item_2',
        transforms: [sortable, wrappable],
        isShownByDefault: false
    }
];

beforeEach(() => {
    render(
        <TestWrapper>
            <ColumnManagementModal
                appliedColumns={SYSTEM_DETAILS_HEADER}
                applyColumns={null}
                isModalOpen
                setModalOpen={null}
            />
        </TestWrapper>
    );
});

describe('ColumnManagementModal', () => {
    it('Should render isShownByDefault as checked', () => {
        expect(screen.getByRole('checkbox', {
            name: /unhidable item/i
        })).toHaveAttribute('checked');
        expect(screen.getByRole('checkbox', {
            name: /is shown by default item/i
        })).toHaveAttribute('checked');
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 1/i
        })).not.toHaveAttribute('checked');
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 2/i
        })).not.toHaveAttribute('checked');
    });

    it('Should uncheck second item', () => {
        const checkbox = screen.getByRole('checkbox', {
            name: /is shown by default item/i
        });

        expect(checkbox).toBeChecked();

        userEvent.click(checkbox);

        expect(checkbox).not.toBeChecked();
    });

    it('Should isUnhidable item by disabled', () => {
        expect(screen.getByRole('checkbox', {
            name: /unhidable item/i
        })).toHaveAttribute('disabled');
    });

    it('Should select all items', () => {
        userEvent.click(screen.getByRole('button', { name: 'Select all' }));

        expect(screen.getByRole('checkbox', {
            name: /unhidable item/i
        })).toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /is shown by default item/i
        })).toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 1/i
        })).toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 2/i
        })).toBeChecked();
    });

    it('Should reset to default select all default items and unselect all other items', () => {
        userEvent.click(screen.getByRole('checkbox', {
            name: /unchecked item 1/i
        }));
        userEvent.click(screen.getByRole('checkbox', {
            name: /unchecked item 2/i
        }));

        userEvent.click(screen.getByRole('button', {
            name: 'Reset to default'
        }));

        expect(screen.getByRole('checkbox', {
            name: /unhidable item/i
        })).toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /is shown by default item/i
        })).toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 1/i
        })).not.toBeChecked();
        expect(screen.getByRole('checkbox', {
            name: /unchecked item 2/i
        })).not.toBeChecked();
    });
});
