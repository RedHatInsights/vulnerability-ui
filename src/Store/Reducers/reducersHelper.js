export const error = {
    errorCode: null,
    message: null,
    hasError: false
};

const hasResetFilters = (
    workloads,
    SIDs,
    tags
) => (workloads === undefined || workloads?.SAP === undefined) && SIDs.length === 0 && tags.length === 0;

const hasSetAnyFilter = (state) => ['sap_system', 'tags', 'sap_sids'].some(key => state.hasOwnProperty(key));

export const applyGlobalFilter = (state, { workloads, SIDs, tags }) => {
    // DO nothing in first load
    if (!hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        return state;
    }

    if (hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        // reset the filters
        state = {
            ...state,
            sap_system: undefined,
            tags: undefined,
            sap_sids: undefined,
            page: 1
        };
    } else {
        state = {
            ...state,
            ...workloads && {
                sap_system: (workloads?.SAP?.isSelected === true) || undefined,
                ansible: (workloads?.['Ansible Automation Platform']?.isSelected === true) || undefined,
                mssql: (workloads?.['Microsoft SQL']?.isSelected === true) || undefined
            },
            ...SIDs && { sap_sids: SIDs },
            ...tags && { tags },
            page: 1
        };
    }

    return state;
};

export const isTimestampValid = (stateTimestamp, actionTimestamp) => actionTimestamp >= stateTimestamp;

export const selectRows = (state, action, selecting = true) => {
    let selectedRows = state.selectedRows.slice();
    if (Array.isArray(action.payload)) {
        if (selecting) {
            selectedRows = action.payload;
        } else {
            selectedRows = [];
        }
    } else {
        if (action.payload.selected) {
            // We need the whole object, not just id in selectedRows, so using rows in our advantage
            selectedRows.push(state.rows.find(row => row.id === action.payload.id));
        } else {
            selectedRows.splice(selectedRows.findIndex(selected => selected.id === action.payload.id), 1);
        }
    }

    return {
        ...state,
        selectedRows,
        selectedRowsCount: selectedRows.length
    };
};

