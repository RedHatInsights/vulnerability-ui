
import React, { useState } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getCveListByAccount } from '../../../Helpers/APIHelper';
import messages from '../../../Messages';
import firstPagePDF from './Common/firstPagePDF';
import tablePage from './Common/tablePage';
import DownloadReport from '../../../Helpers/DownloadReport';

const DownloadExecutive = ({ filters, params }) => {
    const intl = useIntl();
    const [loading, setLoading] = useState(false);

    const dataFetch = async () => {
        setLoading(true);

        const { data, meta } = await getCveListByAccount({
            ...params,
            ...DownloadReport.defaultParams,
            sort: '-cvss_score'
        });

        const firstPage = firstPagePDF({ cves: data.slice(0, 25), meta, filters, intl });

        const otherPages = data.slice(25, data.length).reduce((resultArray, item, index) => {
            const chunkIndex = Math.floor(index / 30);
            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);
            resultArray[chunkIndex].push(item);

            return resultArray;
        }, []);

        setLoading(false);

        return [firstPage, ...otherPages.map((pageCves, index) => tablePage({ data: pageCves, page: index, intl }))];

    };

    return (
        <div>
            <DownloadButton
                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.kebabExportAsPDF)}
                asyncFunction={dataFetch}
                buttonProps={{ variant: 'text', component: 'button', className: 'pf-c-dropdown__menu-item' }}
                reportName={intl.formatMessage(messages.cvePDFReportName)}
                type={''}
                fileName={`${DownloadReport.filename()}.pdf`}
            />
        </div>
    );
};

DownloadExecutive.propTypes = {
    filters: propTypes.object,
    params: propTypes.object
};

export default DownloadExecutive;
