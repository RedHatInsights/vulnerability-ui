/* eslint-disable no-unused-vars */

/* eslint-disable no-console */
import React, { useState } from 'react';
import { Bullseye, Spinner } from '@patternfly/react-core';
import PropTypes from 'prop-types';
import { TagCount } from '@redhat-cloud-services/frontend-components/components/cjs/TagCount';
import { TagModal } from '@redhat-cloud-services/frontend-components/components/cjs/TagModal';
import { sortable, cellWidth, nowrap } from '@patternfly/react-table';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import { CullingInformation } from '@redhat-cloud-services/frontend-components/components/cjs/CullingInfo';
import { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';
import { Fragment } from 'react';
import TagsColumn from '../../PresentationalComponents/TagsColumn/TagsColumn';
import { Skeleton } from '@patternfly/react-core';

export const loadingTable = [
    {
        heightAuto: true,
        cells: [
            {
                props: { colSpan: 8 },
                title: (
                    <center>
                        <Spinner size="xl" />
                    </center>
                )
            }
        ]
    }
];

export const header = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        transforms: [sortable],
        cellTransforms: [nowrap],
        props: { column: 'display_name' }
    },
    {
        key: 'tags',
        title: intl.formatMessage(messages.systemsColumnHeaderTags),
        transforms: [sortable],
        cellTransforms: [nowrap],
        props: { column: 'tags' }
    },
    {
        key: 'cve_count',
        title: intl.formatMessage(messages.systemsColumnHeaderCveCount),
        transforms: [sortable, cellWidth(25)],
        props: { column: 'cve_count' }
    },
    {
        key: 'last_seen',
        title: intl.formatMessage(messages.systemsColumnHeaderUpdated),
        transforms: [sortable, cellWidth(25)],
        props: { column: 'last_seen' }
    }

];

export const updateHeader = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        transforms: [sortable],
        cellTransforms: [nowrap],
        props: { column: 'display_name' }
    },
    {
        key: 'tags',
        title: intl.formatMessage(messages.systemsColumnHeaderTags),
        transforms: [sortable],
        cellTransforms: [nowrap],
        props: { column: 'tags' }
    },
    {
        key: 'cve_count',
        title: intl.formatMessage(messages.systemsColumnHeaderCveCount),
        transforms: [sortable, cellWidth(25)],
        props: { column: 'cve_count' }
    }

];

export const createSystemRows = (data, state) => {

    switch (state) {
        case true:
            return loadingTable;
        case false:
            return data?.flatMap(row => (
                {
                    cells: [
                        {
                            title: (
                                <a href="#">{row.attributes.display_name}</a>
                            ),
                            props: {
                                column: 'display_name'
                            }
                        },
                        {
                            title: (
                                <TagsColumn name={row.attributes.display_name} tags={row.attributes.tags} />
                            ),
                            props: {
                                column: 'tags'
                            }
                        },
                        {
                            title: (
                                row.attributes.cve_count
                            ),
                            props: {
                                column: 'cve_count'
                            }
                        },
                        {
                            title: (
                                <CullingInformation
                                    culled={row.attributes.updated}
                                    staleWarning={row.attributes.stale_warning_timestamp}
                                    stale={row.attributes.stale_timestamp}
                                    currDate={new Date()}
                                > <DateFormat date={row.attributes.stale_timestamp} />
                                </CullingInformation>
                            ),
                            props: {
                                column: 'updated'
                            }
                        }
                    ],
                    selected: false
                }
            ));
    }

};

