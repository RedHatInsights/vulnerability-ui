import fs from 'fs';
import { exec } from 'child_process';

const MESSAGES_FILE_LOCATION = './src/Messages.js';
const MESSAGES_START_LINE = 'export default defineMessages({';
const MESSAGES_END_LINE = '});';

const SOURCE_FOLDER = 'src';
const SOURCE_FILES_INCLUDE = '*.{js,ts}';
const SOURCE_FILES_EXCLUDE = '*.test.js';

const YELLOW_COLOR = '\x1b[33m';
const RESET_COLOR = '\x1b[0m';

try {
    const messagesFile = fs.readFileSync(MESSAGES_FILE_LOCATION, 'utf8')
    let messagesFileLines = messagesFile.split('\n');

    // remove everything from file (imports, etc.) except message object
    const startLineIndex = messagesFileLines.indexOf(MESSAGES_START_LINE);
    const endLineIndex = messagesFileLines.indexOf(MESSAGES_END_LINE);
    messagesFileLines = messagesFileLines.slice(startLineIndex, endLineIndex + 1);

    // repair sliced message object so that it parses correctly
    messagesFileLines[0] = "({"
    messagesFileLines[messagesFileLines.length - 1] = "})"
    messagesFileLines = messagesFileLines.join(' ');

    // this is very similar to JSON.parse(messagesFileLines)
    // but that would require object keys to be quoted
    // which could be done with some long regex, but this'll do
    const messages = eval(messagesFileLines)

    // for each message key look through all source code files
    // if message key is not found, grep exits with code 1 and
    // warning message about unused translation key is printed
    Object.keys(messages).forEach(key => {
        exec(`grep -rw \
                --include=${SOURCE_FILES_INCLUDE} \
                --exclude=${SOURCE_FILES_EXCLUDE} \
                -e 'messages.${key}' \
                '${SOURCE_FOLDER}'
            `, error => {
                error?.code === 1 && console.warn(`${YELLOW_COLOR}Warning: Message key "${key}" is unused${RESET_COLOR}`);
        });
    });
} catch (err) {
    console.error(err)
}
