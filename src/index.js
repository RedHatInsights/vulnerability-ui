import React, { useEffect, Fragment, useState } from 'react';
import SystemCVEs from './Components/SmartComponents/SystemCves/SystemCves';
import { SystemCvesStore } from './Store/Reducers/SystemCvesStore';
import PropTypes from 'prop-types';
import { Provider } from 'react-redux';
import { useRbac } from './Helpers/Hooks';
import { PERMISSIONS } from './Helpers/constants';
import PageLoading from './Components/PresentationalComponents/Snippets/PageLoading';
import { AccountStatContextWrapper } from './Utilities/VulnerabilityRoutes';

const WrappedSystemCves = ({ getRegistry, ...props }) => {
    const [Wrapper, setWrapper] = useState();
    const [isLoading, setLoading] = useState(true);

    const [[canExport, canEditPairStatus]] = useRbac([PERMISSIONS.basicReporting, PERMISSIONS.setPairStatus]);

    useEffect(() => {
        if (getRegistry) {
            getRegistry()?.register?.({ SystemCvesStore });
        }

        setWrapper(() => getRegistry ? Provider : Fragment);
        setLoading(false);
    }, []);

    if (isLoading) {
        return <PageLoading />;
    }

    return (
        Wrapper ?
            <Wrapper {...getRegistry && { store: getRegistry()?.getStore() }}>
                <AccountStatContextWrapper setLoading={setLoading}>
                    <SystemCVEs
                        canExport={canExport}
                        canEditPairStatus={canEditPairStatus}
                        {...props}
                    />
                </AccountStatContextWrapper>
            </Wrapper>
            : <PageLoading />
    );
};

WrappedSystemCves.propTypes = {
    getRegistry: PropTypes.func
};

export { SystemCvesStore };
export default WrappedSystemCves;
