
import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import Remediation from '../Remediation/Remediation';
import messages from '../../../Messages';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import { dataShape } from '../../../Helpers/MiscHelper';
import { useBulkSelect } from '../../../Helpers/Hooks';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import {
    fetchAffectedSystemsIdsByCve
} from '../../../Store/Actions/Actions';
import {
    RULE_ABSENSE_OPTIONS
} from '../../../Helpers/constants';

export const SystemsExposedTableToolbar = ({
    items,
    cve,
    cveStatusDetails,
    selectedRows,
    selectedRowsCount,
    selectedRowsRawData,
    filterRuleValues,
    parameters,
    isLoading,
    methods,
    children
}) => {
    const intl = useIntl();
    const { apply, showStatusModal, handleSelect, downloadReport } = methods;

    const kebabOptions = ['',
        {
            label: intl.formatMessage(messages.editStatus),
            onClick: () => showStatusModal([cveStatusDetails], selectedRowsRawData),
            props: { isDisabled: !selectedRowsCount }
        }
    ];

    const searchFilter = useSearchFilter(
        'filter',
        messages.systemsSearchName,
        messages.searchFilterByName,
        parameters.filter,
        apply
    );

    const advisoryFilter = useSearchFilter(
        'advisory',
        messages.advisory,
        messages.search,
        parameters.advisory,
        apply
    );

    const bulkSelectProps = useBulkSelect({
        rawData: items,
        selectedRows,
        selectedRowsCount,
        handleSelect,
        fetchResource: ops => fetchAffectedSystemsIdsByCve(cve, { ...parameters, ...ops })
    });

    return <Fragment>
        <PrimaryToolbar
            className="vuln-systems-primary-toolbar"
            exportConfig={{
                isDisabled: items.meta.total_items === 0,
                ouiaId: 'export',
                ...exportConfig({ downloadReport })
            }}
            dedicatedAction={(!isLoading &&
                <Remediation
                    manyRules
                    systems={selectedRowsRawData}
                    cves={{ id: cve, rules: filterRuleValues }}
                />
            )}
            actionsConfig={{
                actions: kebabOptions,
                kebabToggleProps: { isDisabled: !selectedRowsCount },
                dropdownProps: { ouiaId: 'toolbar-actions' }
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters({ ...parameters }, filterRuleValues),
                onDelete: (_, chips) => removeFilters(chips, apply),
                deleteTitle: intl.formatMessage(messages.resetFilters)
            }}
            bulkSelect={bulkSelectProps}
            filterConfig={{
                items: [
                    searchFilter,
                    securityRuleFilter(
                        apply,
                        parameters,
                        filterRuleValues,
                        {
                            isDynamic: true,
                            dropdownItems: RULE_ABSENSE_OPTIONS
                        }
                    ),
                    statusFilter(apply, parameters),
                    advisoryFilter
                ]
            }}
        />
        {children}
    </Fragment>;
};

SystemsExposedTableToolbar.propTypes = {
    items: dataShape,
    parameters: propTypes.object,
    cve: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.object,
    selectedRows: propTypes.array,
    selectedRowsCount: propTypes.number,
    selectedRowsRawData: propTypes.array,
    isLoading: propTypes.bool,
    children: propTypes.node,
    methods: propTypes.shape({
        apply: propTypes.func,
        handleSelect: propTypes.func,
        showStatusModal: propTypes.func,
        downloadReport: propTypes.func
    })
};
