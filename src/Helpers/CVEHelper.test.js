import { ExternalLinkAltIcon } from '@patternfly/react-icons';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';
import Immutable from 'seamless-immutable';
import {
    createCveDetailsPage,
    createMitreLink,
    createRHDBLink,
    cveTableRowActions,
    createSystemsListTable,
    systemCveTableRowActions,
    systemExposedTableRowActions,
    systemTableRowActions
} from './CVEHelper';
import { render, screen } from '@testing-library/react';
import TestWrapper from '../Utilities/TestWrapper';

const affected_payload = Immutable({
    data: [
        {
            attributes: {
                id: 1,
                status_name: 'On-Hold',
                status_id: 2,
                cve_status_id: 3,
                rule: { value: 'testRule' },
                business_risk_id: '3'
            }
        },
        {
            attributes: {
                id: 2,
                status_name: 'On-Hold',
                status_id: 2,
                cve_status_id: 2,
                business_risk_id: '2'
            }
        }
    ],
    meta: {
        testObject: 'testObject'
    }
});

const cves_payload = Immutable({
    isLoading: false,
    payload: {
        data: {
            attributes: {
                impact: 'Important',
                public_date: '1970-01-01 00:00:00',
                description: 'testDescription',
                synopsis: 'CVE-2016-0800',
                cvss3_score: 7.6,
                cvss2_score: 6.7,
                business_risk_id: '3',
                status_id: 0
            }
        },
        meta: {
            testObject: 'testObject'
        }
    }
});

describe('CVEHelper', () => {
    it('createCveDetailsPage', () => {
        const page = createCveDetailsPage(cves_payload);
        expect(page.meta.testObject).toEqual('testObject');
        expect(page.isLoading).toEqual(false);

        expect(page.data.impact).toEqual(cves_payload.payload.data.attributes.impact);
        expect(page.data.public_date).toEqual(processDate(cves_payload.payload.data.attributes.public_date));
        expect(page.data.synopsis).toEqual(cves_payload.payload.data.attributes.synopsis);
        expect(page.data.rh_link).toEqual(createRHDBLink(cves_payload.payload.data.attributes.synopsis));
        expect(page.data.mitre_link).toEqual(createMitreLink(cves_payload.payload.data.attributes.synopsis));
        expect(page.data.cvss2_score).toEqual(cves_payload.payload.data.attributes.cvss2_score);
        expect(page.data.cvss3_score).toEqual(cves_payload.payload.data.attributes.cvss3_score);
    });

    it('createCveDetailsPage - loading', () => {
        const page = createCveDetailsPage({ isLoading: true });
        expect(page.data).toEqual([]);
        expect(page.meta).toEqual({});
        expect(page.isLoading).toEqual(true);
    });

    it('createRHDBLink - Default link label', () => {
        const { asFragment } = render(
            <TestWrapper>
                { createRHDBLink('CVE-2016-0800') }
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it('createRHDBLink - Custom link label', () => {
        let customLink = {
            id: 1,
            defaultMessage: 'Red Hat CVE database'
        };

        const { asFragment } = render(
            <TestWrapper>
                { createRHDBLink('CVE-2016-0800', customLink) }
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it('createMitreLink', () => {
        const { asFragment } = render(
            <TestWrapper>
                { createMitreLink('CVE-2016-0800') }
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it('Should createSystemsListTable return initial payload when isLoading is true', () => {
        const page = createSystemsListTable({ payload: affected_payload, isLoading: true });
        expect(page.isLoading).toEqual(true);
        expect(page.meta).toEqual({});
        expect(page.data).toEqual(affected_payload.data);
    });

    it('Should createSystemsListTable process status column', () => {
        const page = createSystemsListTable({ payload: affected_payload, isLoading: false });
        expect(page.isLoading).toEqual(false);
        expect(page.meta).toEqual(affected_payload.meta);
    });

    it('Should createSystemsListTable run without payload safely', () => {
        const page = createSystemsListTable({ isLoading: true });
        expect(page.isLoading).toEqual(true);
        expect(page.data).toEqual([]);
    });

    it('cveTableRowActions', () => {
        const testMethods = {
            showBusinessRiskModal: jest.fn(),
            showStatusModal: jest.fn()
        };
        const testBusinessObject = {
            id: 'testId',
            business_risk_id: 'estBusinessRiskID',
            business_risk_justification: 'testBusinesRiskJustification'
        };
        const testStatusObject = {
            id: 'testId',
            status_id: 'testStatusId',
            status_justification: 'testStatusJustification'
        }

        const actions = cveTableRowActions(testMethods, 0);
        actions[0].onClick(null, null, testBusinessObject);
        actions[1].onClick(null, null, testStatusObject);
        expect(actions[1].title.props.defaultMessage).toEqual('Edit status');

        expect(testMethods.showBusinessRiskModal).toHaveBeenCalledWith([
            {
                id: 'testId',
                business_risk_id: 'estBusinessRiskID',
                justification: 'testBusinesRiskJustification'
            }
        ],
        false
        );

        expect(testMethods.showStatusModal).toHaveBeenCalledWith([
            {
                id: 'testId',
                status_id: 'testStatusId',
                justification: 'testStatusJustification'
            }
        ],
        false);
    });

    it('systemCveTableRowActions ', () => {
        const testMethods = {
            showStatusModal: jest.fn()
        };
        const testStatusObject = {
            id: 'testId',
            status_id: 'testStatusId',
            cve_status_id: 'testCvestatusId',
            status_justification: 'testStatusJustification',
            cve_status_justification: 'testCveStatusJustification'
        }
        const entity = {
            display_name: 'testName'
        }

        const actions = systemCveTableRowActions(testMethods, entity, 0);
        actions[0].onClick(null, null, testStatusObject);

        expect(actions[0].title.props.defaultMessage).toEqual('Edit status');
        expect(testMethods.showStatusModal).toHaveBeenCalledWith([
            {
                id: 'testId',
                attributes: {
                    display_name: 'testName',
                    status_id: 'testStatusId',
                    cve_status_id: 'testCvestatusId',
                    status_text: 'testStatusJustification',
                    cve_status_text: 'testCveStatusJustification'
                }
            }
        ], false, { display_name: 'testName' });
    });

    it('systemExposedTableRowActions', () => {
        const showStatusModal = jest.fn();
        const testObject = {
            id: 'testId',
            status_id: 'testStatusId',
            justification: 'testJustification'
        }
        const testRowObject = {
            id: 'testId',
            status_id: 'testStatusId',
            status_text: 'testJustification'
        }
        const actions = systemExposedTableRowActions(showStatusModal, testObject);
        actions[0].onClick(null, null, testRowObject);
        expect(actions[0].title.props.defaultMessage).toEqual('Edit status');
        expect(showStatusModal).toHaveBeenCalledWith(
            [testObject],
            [testObject]
        );
    });

    it('Should systemTableRowActions display "Include system in vulnerability analysis" when system is excluded from analysis', () => {
        const optOutFunc = jest.fn();
        const rawData = { opt_out: true };
        const actions = systemTableRowActions(rawData, optOutFunc);
        expect(actions[0].title.props.defaultMessage).toEqual('Enable Vulnerability analysis on {count, plural, one {system} other {systems}}');
    });

    it('Should systemTableRowActions display "Exclude system from vulnerability analysis" when system is included in analysis', () => {
        const optOutFunc = jest.fn();
        const rawData = { opt_out: false };
        const actions = systemTableRowActions(rawData, optOutFunc);
        expect(actions[0].title.props.defaultMessage).toEqual('Disable Vulnerability analysis on {count, plural, one {system} other {systems}}');
    });

    it('Should systemTableRowActions call optOut with ID', () => {
        const optOutFunc = jest.fn();
        const rawData = { id: 'testId', display_name: 'testName', opt_out: true };
        const actions = systemTableRowActions(rawData, optOutFunc);
        actions[0].onClick(null, null, rawData);
        expect((optOutFunc)).toHaveBeenCalledWith([{"display_name": "testName", "id": "testId", "opt_out": true}], 'testName', false);
    })
});
