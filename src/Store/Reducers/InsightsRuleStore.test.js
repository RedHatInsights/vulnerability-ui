import * as ActionTypes from '../ActionTypes';
import {initialState, InsightsRuleStore} from './InsightsRuleStore'

let action;

describe('InsightsRuleStore', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
    });

    it('Should return the initial state', () => {
        expect(InsightsRuleStore(undefined, {})).toBe(initialState)
    })

    it('Should return the initial state on undefined action', () => {
        expect(InsightsRuleStore(undefined, action )).toBe(initialState)
    })

    it('When _PENDING should return isLoading', () => {
        action.type = ActionTypes.FETCH_INSIGHTS_SYSTEM_RULES + '_PENDING';
        expect(InsightsRuleStore(undefined, action).isLoading).toBe(true)
    })

    it('When _REJECTED should handle error', () => {
        action.type = ActionTypes.FETCH_INSIGHTS_SYSTEM_RULES + '_REJECTED';
        expect(InsightsRuleStore(undefined, action)).toEqual({
            isLoading: false,
            error: true,
            systemRules: []
        });
    })

    it('When _FULFILLED should load systems rules', () => {
        let expectedPayload = [{testObject: 'value'}];
        action.type = ActionTypes.FETCH_INSIGHTS_SYSTEM_RULES + '_FULFILLED';
        action.payload = expectedPayload;
        expect(InsightsRuleStore(undefined, action)).toEqual({
            isLoading: false,
            error: false,
            systemRules: expectedPayload
        });
    })
})

