import React,  { useState, useEffect } from 'react';
import { Page, Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components';
import { useDispatch } from 'react-redux';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import { FileAltIcon } from '@patternfly/react-icons';
import DownloadExecutive from './DownloadExecutive';
import ReportConfigModal from '../Modals/ReportConfigModal';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';
import { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';
import { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';
import { FILTERS, DEFAULT_FILTER_DATA, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';
import styles from './Common/styles';

const ReportsPage = () => {
    const [isModalOpen, setModalOpen] = useState(false);
    const [downloadCVEReport, setDownloadCVEReport] = useState(false);
    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));
    const [userNotes, setUserNotes] = useState('');
    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(FILTERS));
    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);
    const dispatch = useDispatch();

    const handleModalClose = () => {
        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));
        setUserNotes('');
        setColumnsToInclude(Object.keys(FILTERS));
        setFilterData(DEFAULT_FILTER_DATA);
        setDownloadCVEReport(false);
        setModalOpen(false);
    };

    const handleDownloadButton = () => {
        setDownloadCVEReport(true);
        dispatch(addNotification({
            dismissable: true,
            variant: 'info',
            title: intl.formatMessage(messages.customReportNotification)
        }));

        setModalOpen(false);
    };

    useEffect(() => {
        return () => {
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    return (
        <Page>
            <VulnerabilityHeader title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>
            <Main>
                <Grid hasGutter>
                    <GridItem span={3}>
                        <Card className="report-card">
                            <CardTitle>
                                <ChartPieSolid style={styles.pieChartIcon}/>
                                <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                    {intl.formatMessage(messages.executiveReportCardTitle)}
                                </span>
                            </CardTitle>
                            <CardBody>
                                {intl.formatMessage(messages.executiveReportCardDescription)}
                            </CardBody>
                            <CardFooter>
                                <DownloadExecutive/>
                            </CardFooter>
                        </Card>
                    </GridItem>
                    <GridItem span={3}>
                        <Card className="report-card">
                            <CardTitle>
                                <FileAltIcon size="lg" color="var(--pf-global--link--Color)"/>
                                <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                    {intl.formatMessage(messages.customReportCardTitle)}
                                </span>
                            </CardTitle>
                            <CardBody>
                                {intl.formatMessage(messages.customReportCardDescription)}
                            </CardBody>
                            <CardFooter>
                                <a className="create-report"
                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}
                                </a>
                            </CardFooter>
                        </Card>
                    </GridItem>
                </Grid>
            </Main>
            <ReportConfigModal
                isOpen={isModalOpen}
                columnsToInclude={columnsToInclude}
                setColumnsToInclude={setColumnsToInclude}
                filterData={filterData}
                userNotes={userNotes}
                reportTitle={reportTitle}
                setReportTitle={setReportTitle}
                setUserNotes={setUserNotes}
                setFilterData={setFilterData}
                handleModalClose={(handleModalClose)}
                handleDownloadButton={handleDownloadButton}
            />

            { downloadCVEReport && <DownloadCVEsReport
                type='cves'
                key="download"
                reportData={{
                    header: columnsToInclude,
                    reportTitle,
                    userNotes
                }}
                showButton={false}
                onSuccess={handleModalClose}
                params={constructFilterParameters(filterData)}
                filters={buildFilters(filterData)}
                isReportDynamic
                buttonProps={{
                    isDisabled:
                            +filterData.cvss_filter.min < 0 ||
                            +filterData.cvss_filter.max > 10 ||
                            +filterData.cvss_filter.min > +filterData.cvss_filter.max ||
                            userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH,
                    style: { marginRight: '0.5em' }
                }}
                label={messages.configModalExportReport}
            />}
        </Page>
    );
};

export default ReportsPage;
