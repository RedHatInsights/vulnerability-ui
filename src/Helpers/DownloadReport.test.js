import DownloadReport from './DownloadReport'
jest.mock('@redhat-cloud-services/frontend-components-utilities/helpers');
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';

let defaultParams;
const showNotification = jest.fn();
const clearNotifications = jest.fn();

beforeAll(() => {
    defaultParams = {
        page: 1,
        page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),
        date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'
    };
})

describe('Download report', () => {
    test('Should throw error when fetchData is not a function', () => {
        let fetchData = 'not-a-function'

        let result = DownloadReport.exec(fetchData, '', 'json', showNotification, clearNotifications)
        return expect(result).rejects.toEqual(
            `exec expects the 1st param to be funtion. Received ${typeof fetchData}`,
        );
    })

    test('Should throw error when page is not a supported', () => {
        let fetchData = () => { };
        let page = 'not-supported-page'

        let result = DownloadReport.exec(fetchData, '', 'json', page, showNotification, clearNotifications)
        return expect(result).rejects.toEqual(
            `Page ${page} does not exist`,
        );
    })

    test('Should throw error when format is not a supported', () => {
        let fetchData = () => { };
        let page = 'systems-exposed'
        let format = 'invalid-format'

        let result = DownloadReport.exec(fetchData, '', format, page, showNotification, clearNotifications)
        return expect(result).rejects.toEqual(
            `Format ${format} is not supported`,
        );
    })

    test('Should send the argument and the params', async () => {
        let fetchDataMock = jest.fn((params) => Promise.resolve({ payload: [] }))
        let page = 'systems-exposed'
        let format = 'json'
        let params = { id: 'cve-123', 'arg': '1' }

        DownloadReport.exec(fetchDataMock, params, format, page, showNotification, clearNotifications)
        return expect(fetchDataMock).toBeCalledWith({ ...params, data_format: format, ...defaultParams, report: 'true' })
    })

    test('Should send only the params', () => {
        let fetchDataMock = jest.fn((params) => Promise.resolve({ payload: [] }))
        let page = 'systems-exposed'
        let format = 'json'
        let params = { 'arg': '1' }

        DownloadReport.exec(fetchDataMock, params, format, page, showNotification, clearNotifications)
        return expect(fetchDataMock).toBeCalledWith({ ...params, data_format: format, ...defaultParams, report: 'true'  })
    })

    test('Should send correct filename for systems-exposed page', async () => {
        let data = "type,id,systems_affected"
        let fetchDataMock = jest.fn((params) => Promise.resolve({ payload: { data } }))
        let page = 'systems-exposed'
        let format = 'csv'
        let params = { id: 'cve-123', 'arg': '1' };
        let filename = `vulnerability_systems-exposed-cve-123--${defaultParams.date}`

        await DownloadReport.exec(fetchDataMock, params, format, page, showNotification, clearNotifications)
        return expect(downloadFile).toBeCalledWith(data, filename, format)
    })

    test('Should send correct filename for system-list page', async () => {
        let data = [{
            "attributes": {
                "business_risk": "Medium"
            }
        }];
        let fetchDataMock = jest.fn((params) => Promise.resolve({ payload: { data } }))
        let page = 'system-list'
        let format = 'json'
        let params = { 'arg': '1' }
        let filename = `vulnerability_systems--${defaultParams.date}`

        await DownloadReport.exec(fetchDataMock, params, format, page, showNotification, clearNotifications)
        return expect(downloadFile).toBeCalledWith(JSON.stringify(data), filename, format)
    })

    test('Should send the default filename', async () => {
        let data = [{
            "attributes": {
                "business_risk": "Medium"
            }
        }];
        let fetchDataMock = jest.fn((params) => Promise.resolve({ payload: { data } }))
        let page = 'cves'
        let format = 'json'
        let params = { 'arg': '1' }
        let filename = `vulnerability_systems--${defaultParams.date}`

        await DownloadReport.exec(fetchDataMock, params, format, page, showNotification, clearNotifications)
        return expect(downloadFile).toBeCalledWith(JSON.stringify(data), filename, format)
    })
})
