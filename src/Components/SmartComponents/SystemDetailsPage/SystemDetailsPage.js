import { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';
import { fetchSystemDetails, optOutSystemsAction } from '../../../Store/Actions/Actions';
import SystemDetails from './SystemDetails';
import Header from '../../PresentationalComponents/Header/Header';
import { useIntl } from 'react-intl';
import {
    NotAuthorizedNotification,
    PATHS,
    PERMISSIONS,
    ReadOnlyNotification
} from '../../../Helpers/constants';
import messages from '../../../Messages';

import { DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';
import { useRbac } from '../../../Helpers/Hooks';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';

const InventoryDetail = () => {
    const dispatch = useDispatch();
    const { inventoryId } = useParams();
    const intl = useIntl();

    const { loaded, opt_out: isOptOut } = useSelector(({ SystemDetailsPageStore }) => SystemDetailsPageStore) ?? {};
    const { entity } = useSelector(state => state.entityDetails) ?? {};

    const errors = useSelector(({ SystemCvesStore }) => SystemCvesStore.cveList.payload.errors);

    const [[canSetExcludedIncluded]] = useRbac([PERMISSIONS.setExcludedIncluded]);

    useEffect(() => {
        dispatch(fetchSystemDetails(inventoryId));
    }, [dispatch, inventoryId]);

    useEffect(() => {
        return () => {
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const notifications = systemName => ({
        exclude: {
            success: {
                variant: 'success',
                title: intl.formatMessage(messages.notificationDisableSuccess, { count: 1, systemName })
            },
            failure: {
                variant: 'danger',
                autoDismiss: false,
                title: intl.formatMessage(messages.notificationDisableFailureTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationDetailDisableFailureBody, { count: 1 })
            }
        },
        include: {
            success: {
                variant: 'success',
                title: intl.formatMessage(messages.notificationEnableSuccessTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationEnableSuccessBody, { count: 1 })
            },
            failure: {
                variant: 'danger',
                autoDismiss: false,
                title: intl.formatMessage(messages.notificationEnableFailureTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationDetailEnableFailureBody, { count: 1 })
            }
        }
    });

    const handleOptOutSystem = (systemName, toExclude) => {
        dispatch(optOutSystemsAction([inventoryId], toExclude)).then(() => {
            dispatch(fetchSystemDetails(inventoryId));
            dispatch(addNotification(toExclude
                ? notifications(systemName).exclude.success
                : notifications(systemName).include.success));
        }).catch(error => {
            dispatch(addNotification(
                error.status === '503' ? ReadOnlyNotification :
                    error.status === '403' ? NotAuthorizedNotification :
                        toExclude
                            ? notifications(systemName).exclude.failure
                            : notifications(systemName).include.failure));
        });
    };

    return (
        <DetailWrapper
            inventoryId={inventoryId}
            onLoad={({ mergeWithDetail }) => {
                ReducerRegistry.register({
                    ...mergeWithDetail()
                });
            }}
        >
            <section className="inventory">
                <Header
                    title=""
                    breadcrumbs={[
                        {
                            title: PATHS.systemsPage.title,
                            to: PATHS.systemsPage.to,
                            isLoaded: true
                        },
                        {
                            title: entity?.display_name || intl.formatMessage(messages.invalidSystem),
                            isActive: true,
                            isLoaded: loaded
                        }
                    ]}
                >
                    {!errors && (
                        <InventoryDetailHead
                            hideBack
                            actions={
                                entity && canSetExcludedIncluded && [
                                    isOptOut
                                        ? {
                                            title: intl.formatMessage(messages.inventoryKebabOptionsEnable),
                                            onClick: () => handleOptOutSystem(entity?.display_name, false)
                                        }
                                        : {
                                            title: intl.formatMessage(messages.inventoryKebabOptionsDisable),
                                            onClick: () => handleOptOutSystem(entity?.display_name, true)
                                        }
                                ]
                            }
                        />
                    )}
                </Header>
            </section>
            <section className="pf-v5-l-page__main-section pf-v5-c-page__main-section">
                <SystemDetails optOutSystemHandler={handleOptOutSystem} />
            </section>
        </DetailWrapper>
    );
};

export default InventoryDetail;
