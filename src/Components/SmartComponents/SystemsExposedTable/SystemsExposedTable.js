import * as reactCore from '@patternfly/react-core';
import {
    Text,
    TextContent,
    TextVariants,
    ToolbarGroup,
    ToolbarItem
} from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import * as pfReactTable from '@patternfly/react-table';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import debounce from 'lodash/debounce';
import propTypes from 'prop-types';
import qs from 'query-string';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { filtersStatus, filterSystemName } from '../../../Helpers/constants';
import { dataShape } from '../../../Helpers/MiscHelper';
import { systemExposedTableRowActions } from '../../../Helpers/CVEHelper';
import {
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    handleCveDetailsError,
    selectEntities
} from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';
import FilterChips from '../../PresentationalComponents/Filters/FilterChips';
import Filters from '../../PresentationalComponents/Filters/Filters';
import SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';
import './SystemsExposedTable.scss';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import {
    kebabItemDownloadCSV,
    kebabItemDownloadJSON,
    kebabItemEditStatus
} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';
import messages from '../../../Messages';
import { injectIntl } from 'react-intl';
/*eslint camelcase: 0*/

class SystemsExposedTable extends Component {
    static propTypes = {
        cve: propTypes.string,
        cveStatusDetails: propTypes.object,
        fetchData: propTypes.func,
        fetchCveDetails: propTypes.func,
        affectedSystems: dataShape,
        history: propTypes.object,
        handleCveDetailsError: propTypes.func,
        createNotification: propTypes.func,
        selectRows: propTypes.func,
        selectMultiple: propTypes.func,
        intl: propTypes.any
    };

    constructor(props) {
        super(props);

        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => { },
            StatusModal: () => null,
            filter: undefined,
            columns: [
                {
                    key: 'display_name',
                    title: this.props.intl.formatMessage(messages.systemsColumnHeaderName),
                    composed: ['facts.os_release', 'display_name'],
                    props: {
                        width: 40
                    }
                },
                {
                    key: 'status',
                    title: this.props.intl.formatMessage(messages.status),
                    props: {
                        width: 30
                    }
                }
            ],
            selected: new Set(),
            selectListener: middlewareListener.addNew({
                on: 'SELECT_ENTITY',
                callback: payload => this.onSelect(payload)
            }),
            selectAllListener: middlewareListener.addNew({
                on: 'SELECT_ENTITIES',
                callback: payload => this.onSelect(payload)
            })
        };
    }

    componentDidMount() {
        this.fetchInventory();
        this.props.fetchData(this.props.cve, this.params());
    }

    shouldComponentUpdate(nextProps) {
        return !nextProps.affectedSystems.isLoading;
    }

    onSelect = (payload) => {
        let selected;
        if (!payload.data || Array.isArray(payload.data)) {
            selected = new Set(payload.data);
        } else {
            selected = this.state.selected;
            payload.data.selected ? selected.add(payload.data.id) : selected.delete(payload.data.id);
        }

        this.setState({ selected }, this.props.selectMultiple);
    };

    getSelected = () => {
        return this.state.selected;
    };

    dataProvider = () => {
        return {
            issues: [
                {
                    id: `vulnerabilities:${this.props.cve}`,
                    description: this.props.cve
                }
            ],
            systems: Array.from(this.getSelected())
        };
    };

    // #TODO: can be better. Similar function exists in 2 other places.
    createUrlParams = allParams => {
        const params = { ...allParams };
        const allowedParams = ['filter', 'page', 'page_size', 'status_id'];
        Object.keys(allParams).forEach(
            key =>
                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&
                delete params[key]
        );
        const queryString = qs.stringify(params);
        this.props.history.push('?' + queryString);
    };

    dataReload = () => {
        const { meta, data } = this.props.affectedSystems;
        const lastPage = meta.page;
        const { page } = this.state;
        const reloadPage = page === lastPage && data.length === 1 ? 1 : meta.page;

        this.setState(
            {
                ...this.state,
                page: reloadPage,
                page_size: meta.page_size,
                filter: this.state.filter,
                system_id: this.state.system_id
            },
            this.apply
        );
    };

    apply = newFilter => {
        this.setState({ ...this.state, ...newFilter }, () => {
            this.sendRequest();
        });
    };

    sendRequest = () => {
        const { fetchData, cve, handleCveDetailsError } = this.props;

        fetchData &&
            fetchData(cve, this.params()).catch(() => {
                handleCveDetailsError();
            });

        this.createUrlParams(this.state);
    };

    downloadReport = format => {
        const { payload } =
            // eslint-disable-next-line camelcase
            fetchAffectedSystemsByCVE(this.props.cve, {
                ...this.state,
                data_format: format,
                page: 1,
                page_size: Number.MAX_SAFE_INTEGER
            });
        payload &&
            payload.then(({ data: response }) => {
                const data = format === 'json' ? JSON.stringify(response) : response;
                return downloadFile(data, `systems_affected-${this.props.cve}-${new Date().toISOString()}`, format);
            });
    };

    showStatusModal = (cves, inventories) => {
        this.setState({
            StatusModal: () => (
                <CvePairStatusModal
                    cves={cves}
                    updateRef={() => {
                        this.props.fetchData(this.props.cve, this.params());
                        this.props.fetchCveDetails(this.props.cve);
                    }}
                    inventories={inventories}
                />
            )
        });
    };

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns, this.getSelected)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
    }

    params = () => {
        const { filter, page, page_size, status_id } = this.state;
        return { filter, page, page_size, status_id };
    };

    handleFilterChange = debounce(value => {
        this.setState({ ...this.state, filter: value }, this.apply);
    }, 400);

    handleRemediationCreated = result => {
        this.props.createNotification(result.getNotification());
        this.setState({ selected: new Set() });
        this.props.fetchData(this.props.cve, this.params());
    };

    handleRefresh = ({ page, per_page: perPage }) => {
        const { fetchData, cve } = this.props;
        const { filter, status_id } = this.state;
        const { meta } = this.props.affectedSystems;
        if (meta.page !== page || meta.page_size !== perPage) {
            const config = {
                page,
                page_size: perPage || meta.page_size,
                filter,
                status_id
            };
            fetchData(cve, config);
            this.createUrlParams(config);
        }
    };

    render() {
        const { StatusModal } = this.state;
        const { InventoryCmp, filter } = this.state;
        const { affectedSystems, cveStatusDetails } = this.props;
        const { data, meta } = affectedSystems;
        const { showStatusModal } = this;
        const methods = { showStatusModal };
        const selectedInventoryIds = Array.from(this.getSelected()).map(selected => ({ id: selected }));

        const kebabOptions = [
            kebabItemEditStatus(methods.showStatusModal, [cveStatusDetails], selectedInventoryIds, {
                isDisabled: !selectedInventoryIds.length
            }),
            kebabItemDownloadJSON(this.downloadReport),
            kebabItemDownloadCSV(this.downloadReport)
        ];
        return (
            <React.Fragment>
                <TextContent>
                    <Text component={TextVariants.h2}>
                        {this.props.intl.formatMessage(messages.systemsExposedTableHeader)}
                    </Text>
                </TextContent>
                <InventoryCmp
                    key={'inventory'}
                    hasCheckbox={data.length !== 0}
                    showActions={data.length !== 0}
                    actions={systemExposedTableRowActions(methods, cveStatusDetails)}
                    page={meta.page}
                    total={meta.total_items}
                    perPage={meta.page_size}
                    onRefresh={this.handleRefresh}
                    items={data.map(item => ({
                        id: item.attributes.inventory_id,
                        ...item.attributes
                    }))}
                >
                    <ToolbarGroup className={'affected-systems-toolbar'}>

                        <SelectAllCheckbox
                            selectedItems={this.state.selected}
                            selectorHandler={this.props.selectRows}
                            items={affectedSystems}
                            fetchResource={ops => fetchAffectedSystemsByCVE(this.props.cve, { ...this.params, ...ops })}
                        />
                        <ToolbarItem>
                            <SearchFilter
                                placeholder={this.props.intl.formatMessage(messages.searchFindByName)}
                                value={filter}
                                apply={this.apply}
                            />
                        </ToolbarItem>
                        <Filters
                            filterCategories={[filtersStatus]}
                            filterValues={this.params()}
                            apply={this.apply}
                        />
                        <ToolbarItem>
                            <RemediationButton
                                dataProvider={this.dataProvider}
                                isDisabled={this.state.selected.size === 0}
                                onRemediationCreated={this.handleRemediationCreated}
                            />
                        </ToolbarItem>
                        <ToolbarItem>
                            <BaseKebab dropdownItems={kebabOptions} disabled={data.length === 0} />
                        </ToolbarItem>
                    </ToolbarGroup>
                    <TableToolbar className="pf-u-pl-0 affected-systems-filter-chips">
                        <ToolbarGroup>
                            <ToolbarItem>
                                <FilterChips
                                    filterValues={this.params()}
                                    filterCategories={[filterSystemName, filtersStatus]}
                                    apply={this.apply}
                                />
                            </ToolbarItem>
                        </ToolbarGroup>
                    </TableToolbar>
                    <StatusModal />
                </InventoryCmp>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state, ownProps) {
    return {
        affectedSystems: sExposedSystemsTable(state, ownProps.cve)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: (cve, options) => dispatch(fetchAffectedSystemsByCVE(cve, options)),
        fetchCveDetails: cveName => dispatch(fetchCveDetails(cveName)),
        handleCveDetailsError: () => dispatch(handleCveDetailsError, selectEntities()),
        selectRows: (value, ids) => dispatch(selectEntities(value, ids)),
        createNotification: content => dispatch(addNotification(content)),
        selectMultiple: () => dispatch({ type: 'SELECT_MULTIPLE_ENTITIES' })

    };
};

export default injectIntl(
    withRouter(
        connect(
            mapStateToProps,
            mapDispatchToProps
        )(SystemsExposedTable)
    )
);
