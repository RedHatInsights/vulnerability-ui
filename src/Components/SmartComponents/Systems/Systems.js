import * as reactCore from '@patternfly/react-core';
import { Dropdown, DropdownItem, KebabToggle, Page, ToolbarGroup } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import * as pfReactTable from '@patternfly/react-table';
import { Main, SimpleTableFilter } from '@redhat-cloud-services/frontend-components';
import debounce from 'lodash/debounce';
import omit from 'lodash/omit';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, setHeader } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sAllSystems } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import './Systems.scss';

/*eslint camelcase: 0*/

class Systems extends React.Component {
    static propTypes = {
        fetchData: propTypes.func,
        systems: dataShape
    };

    constructor(props) {
        super(props);
        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            filter: '',
            removeListener: () => {},
            columns: [
                {
                    key: 'display_name',
                    title: 'Name',
                    composed: ['facts.os_release', 'display_name']
                },
                {
                    key: 'cve_count',
                    title: 'Number of CVEs'
                },
                {
                    key: 'updated',
                    title: 'Last Seen',
                    isTime: true
                }
            ],
            opt_out: false,
            isKebabOpen: false
        };
    }

    componentDidMount() {
        this.props.fetchData();
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
        this.state.removeListener();
    }

    apply = (config = {}) => {
        this.setState({ ...this.state, ...config }, () => {
            const params = omit(this.state, ['InventoryCmp', 'columns', 'removeListener']);
            this.props.fetchData(params);
        });
    };

    addFilter = (param, value, type) => {
        let newFilter;
        if (type === 'radio' || param === 'show_all') {
            newFilter = { [param]: value };
        } else {
            newFilter = this.state[param] ? { [param]: `${this.state[param]},${value}` } : { [param]: value };
        }

        this.apply({ ...newFilter, page: 1 });
    };

    handleFilterChange = debounce(value => {
        const { meta } = this.props.systems;
        const { page_size } = meta;
        this.apply({ filter: value, page_size });
    }, 400);

    handleRefresh = ({ page, per_page: perPage }) => {
        const { meta } = this.props.systems;
        if (meta.page !== page || meta.page_size !== perPage) {
            this.apply({
                page: meta.page_size !== perPage ? 1 : page,
                page_size: perPage,
                filter: this.state.filter
            });
        }
    };

    handleOptOut = () => {
        this.setState({
            opt_out: !this.state.opt_out
        });
        this.handleFilterChange();
    };

    handleKebabToggle = isKebabOpen => {
        this.setState({
            isKebabOpen
        });
    };

    handleKebabSelect = () => {
        this.setState({
            isKebabOpen: !this.state.isKebabOpen
        });
    };

    render() {
        const { InventoryCmp } = this.state;
        const { data, meta } = this.props.systems;
        const items = data.map(item => {
            const { cve_count, ...rest } = item.attributes;
            return {
                cve_count: (meta.opt_out && 'Excluded') || cve_count,
                id: item.attributes.inventory_id,
                ...rest
            };
        });
        return (
            <Page>
                <VulnerabilityHeader />
                <Main>
                    <InventoryCmp
                        hasCheckbox={false}
                        page={meta.page}
                        total={meta.total_items}
                        perPage={meta.page_size}
                        onRefresh={this.handleRefresh}
                        items={items}
                    >
                        <ToolbarGroup className="systems-toolbar">
                            <div>
                                <SimpleTableFilter
                                    onFilterChange={this.handleFilterChange}
                                    buttonTitle={null}
                                    placeholder="Find a system by UUID"
                                />
                            </div>
                            <div>
                                <Dropdown
                                    onSelect={this.handleKebabSelect}
                                    toggle={<KebabToggle onToggle={this.handleKebabToggle} />}
                                    isOpen={this.state.isKebabOpen}
                                    isPlain
                                    dropdownItems={[
                                        <DropdownItem key="opt_out" component="button" onClick={() => this.handleOptOut()}>
                                            {this.state.opt_out
                                                ? 'Hide systems excluded from analysis'
                                                : 'Show systems excluded from analysis'}
                                        </DropdownItem>
                                    ]}
                                />
                            </div>
                        </ToolbarGroup>
                    </InventoryCmp>
                </Main>
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        systems: sAllSystems(state)
    };
}

const mapDispatchToProps = () => {
    return {
        setHeader: header => dispatchAction(setHeader(header)),
        fetchData: options => dispatchAction(fetchSystems(options))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(Systems)
);
