import React from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getDefaultFilterData } from '../../../../../Helpers/ReportsHelper';
import messages from '../../../../../Messages';
import { intlFormatWithBold } from '../../../../../Helpers/ReportsHelper';

const CvesFiltersParagraph = ({ filtersBuilder, filterStringSegments, isEdgeParityEnabled, intl }) => {
    const DEFAULT_FILTER_DATA = getDefaultFilterData(isEdgeParityEnabled);

    return (
        <Paragraph>
            {
                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,
                    {
                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',
                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,
                        score: (
                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values
                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +
                DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),
                        published: (
                            filtersBuilder.publish_date && filtersBuilder.publish_date.values
                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)
                    }
                )
            }
            {
                filterStringSegments.map(filter => (
                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen
                ) && intlFormatWithBold(filter.msg,
                    {
                        values: filter.lowercase ?
                            filtersBuilder[filter.name].values.toLowerCase() :
                            filtersBuilder[filter.name].values,
                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'
                    }
                ))
            }
            {filtersBuilder.tags ? '.\n\n' : ''}
            {
                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +
        filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''
            }
            {
                filtersBuilder.tags?.values.length > 10 && ' '
        + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })
            }
            {'.\n\n'}
        </Paragraph>
    );
};

CvesFiltersParagraph.propTypes = {
    filtersBuilder: PropTypes.object,
    filterStringSegments: PropTypes.array,
    isEdgeParityEnabled: PropTypes.bool,
    intl: PropTypes.object
};

export default CvesFiltersParagraph;
