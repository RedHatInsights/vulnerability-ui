import SystemCveTable from './SystemCveTable';
import toJson from 'enzyme-to-json';
import { CVETableContext } from './SystemCves';
import { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';
import { handleSortColumn } from '../../../Helpers/MiscHelper';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';

jest.mock('../../../Helpers/MiscHelper', () => (
    {
        ...(jest.requireActual('../../../Helpers/MiscHelper')),
        handleSortColumn: jest.fn()
    }
));

jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useParams: jest.fn().mockReturnValue({ environment: 'dev', service: 'fakeService' })
}))

const mockContext = {
    cves: createCveListBySystem('CVE-2019-6454', {
        payload: {
            isLoading: false,
            meta: {
                test: 'test'
            },
            data: [
                {
                    type: 'cve',
                    id: 'CVE-2019-6454',
                    attributes: {
                        business_risk: "Not Defined",
                        business_risk_id: 0,
                        business_risk_text: null,
                        cve_status_id: 2,
                        cve_status_text: "testhello",
                        cvss2_score: null,
                        cvss3_score: "6.500",
                        description: "A new domain bypass",
                        impact: "Moderate",
                        public_date: "2020-06-09T17:00:00+00:00",
                        reporter: 1,
                        rule: { id: 'testId', description: 'testDescription', summary: 'testSummary' },
                        status: "On-Hold",
                        status_id: 2,
                        status_text: "testhello",
                        synopsis: "CVE-2020-0543",
                        systems_affected: 1
                    }
                }
            ]

        }
    }, SYSTEM_DETAILS_HEADER),
    parameters: {},
    selectedCves: [{ id: 'CVE-2019-6454', attributes: {} }],
    systemCVEs: { payload: { data: [{ id: 'CVE-2019-6454' }]} },
    expandedRows: ['CVE-2019-6454'],
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn(),
        fetchResource: jest.fn()
    }
};

describe('SystemCvesTable', () => {
    const mountComponent = (testContext) =>
        mountWithIntl(
            <CVETableContext.Provider value={testContext}>
                <SystemCveTable
                    header={SYSTEM_DETAILS_HEADER}
                    entity="CVE-2019-6454"
                    canSelect
                />
            </CVETableContext.Provider>
        );

    it('Should match snapshots', () => {
        const wrapper = mountComponent(mockContext);
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should display SkeletonTable during load', () => {
        const testContext = { ...mockContext, cves: { isLoading: true, meta: { test: 'test' }, data: [] } };
        const wrapper = mountComponent(testContext);
        expect(wrapper.find('SkeletonTable')).toHaveLength(1);
    });

    it('Should handle empty data list and display EmptyCVEListForSystem page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: { test: 'test' }, data: [] } };
        const wrapper = mountComponent(testContext);
        expect(wrapper.find('.pf-c-empty-state')).toHaveLength(1);
    });

    it('Should handle empty sort result and display FilterNotFoundForSystem page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: { filter: 'test' }, data: [] } };
        const wrapper = mountComponent(testContext);
        expect(wrapper.find('.pf-c-empty-state')).toHaveLength(1);
    });

    it('Should handle empty list when entity prop is set and display EmptyCVEList page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: {}, data: [] } };
        const wrapper = mountComponent(testContext);
        expect(wrapper.find('.pf-c-empty-state')).toHaveLength(1);
    });

    it('Should render advisory column', () => {
        const wrapper = mountComponent(mockContext);
        expect(wrapper.find('HeaderCell ThBase [data-label="Advisory"]')).toHaveLength(1)
    });

    it('Should call selectCves ', () => {
        const wrapper = mountComponent(mockContext);
        const { onSelect } = wrapper.find('[contentId="expanded-content"]').props();
        onSelect(null, false, 0);
        expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, { id: 'CVE-2019-6454' });
    });

    it('Should call openCves ', () => {
        const wrapper = mountComponent(mockContext);
        const { onCollapse } = wrapper.find('[contentId="expanded-content"]').props();
        onCollapse('event', 0, false);
        expect(mockContext.methods.openCves).toHaveBeenCalledWith(false, ["CVE-2019-6454"], false);
    });

    it('Should call handleSortColumn ', () => {
        const wrapper = mountComponent(mockContext);
        const { onSort } = wrapper.find('[contentId="expanded-content"]').props();
        onSort(null, 'testKey', 'testDirection');
        expect(handleSortColumn).toHaveBeenCalledWith(
            "testKey",
            "testDirection",
            [{ key: 'collapse' }, { key: 'checkbox' }, ...SYSTEM_DETAILS_HEADER],
            mockContext.cves.meta.sort,
            expect.any(Function)
        );
    });
});
