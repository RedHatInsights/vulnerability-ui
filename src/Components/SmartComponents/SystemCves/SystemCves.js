import React, {
    useMemo,
    useEffect,
    Fragment,
    createContext,
    useState
} from 'react';
import {
    fetchCveListBySystem,
    fetchCveIdsBySystem,
    changeSystemCVEsParameters,
    selectSystemCve,
    expandSystemCve,
    clearSystemCvesStore,
    changeColumnsSystemDetail
} from '../../../Store/Actions/Actions';
import propTypes from 'prop-types';
import messages from '../../../Messages';
import SystemCveTable from './SystemCveTable';
import { injectIntl, IntlProvider } from 'react-intl';
import { useDispatch, useSelector } from 'react-redux';
import { CVES_ALLOWED_PARAMS, SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';
import {
    constructFilterParameters,
    useUrlParams,
    updateRef
} from '../../../Helpers/MiscHelper';
import { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';
import {
    Stack,
    StackItem,
    Text,
    TextContent,
    TextVariants
} from '@patternfly/react-core';
import DownloadReport from '../../../Helpers/DownloadReport';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import SystemCveTableToolbar from './SystemCveTableToolbar';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';
import { useColumnManagement } from '../../../Helpers/Hooks';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';

export const CVETableContext = createContext({});

export const SystemCVEs = ({
    entity,
    intl,
    showHeaderLabel,
    setPageTitle,
    canExport,
    customAction,
    canSelect,
    canEditPairStatus,
    canManageColumns,
    defaultColumns,
    filters,
    linkToCustomerPortal
}) => {
    const dispatch = useDispatch();
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const [isFirstLoad, setFirstLoad] = useState(true);

    const systemCVEs = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.cveList
    );
    const parameters = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.parameters
    );
    const columns = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.columns
    );
    const selectedCves = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.selectedCves
    );

    const expandedRows = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.expandedRows
    );
    const isAllExpanded = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded
    );

    const [ColumnManagementModal, setColumnManagementModalOpen]
        = useColumnManagement(columns, newColumns => dispatch(changeColumnsSystemDetail(newColumns)));

    const cves = useMemo(() => createCveListBySystem(
        entity.id, systemCVEs, columns, linkToCustomerPortal
    ), [systemCVEs, systemCVEs.isLoading, entity.id, columns]);
    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);

    const downloadReport = format => {
        const params = { ...parameters, system: entity.id };
        DownloadReport.exec(
            fetchCveListBySystem,
            params,
            format,
            'system-cves',
            notification => dispatch(addNotification(notification)),
            () => dispatch(clearNotifications())
        );
    };

    const processError = error => {
        const { status } = error;
        const statusCode = parseInt(status);
        if (!entity.insights_id) {
            return <NotConnected
                titleText={intl.formatMessage(messages.notConnectedTitleText)}
                bodyText={intl.formatMessage(messages.notConnectedBodyText)}
                buttonText={intl.formatMessage(messages.notConnectedButtonText)}
            />;
        } else {
            return <ErrorHandler code={statusCode}/>;
        }
    };

    const apply = (filterParams = {}) => {
        const params = constructFilterParameters(filterParams);
        dispatch(changeSystemCVEsParameters(params));
    };

    useEffect(() => {
        apply(urlParameters);

        if (defaultColumns) {
            const defaultColumnsWithAttributes = defaultColumns.map(
                defaultColumn => SYSTEM_DETAILS_HEADER.find(column => column.key === defaultColumn)
            );
            dispatch(changeColumnsSystemDetail(defaultColumnsWithAttributes));
        }
    }, []);
    const chrome = useChrome();
    useEffect(() => {
        if (isFirstLoad) {
            if (setPageTitle) {
                chrome.updateDocumentTitle(`${entity.display_name}
                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`);
            }

            setFirstLoad(false);
        }
        else {
            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));
            setUrlParams({ ...parameters });
        }
    }, [parameters, isFirstLoad]);

    useEffect(() => {
        return () => {
            dispatch(clearSystemCvesStore());
        };
    }, [dispatch]);

    const showStatusModal = (selectedCveList, goToFirstPage) => {
        let cveList = selectedCveList.map(cve => ({ id: cve.id, ...cve.attributes }));

        setStatusModal(() => () => (
            <CvePairStatusModal
                cveList={cveList}
                updateRef={() => {
                    setFirstLoad(true);
                    dispatch(clearSystemCvesStore());
                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);
                }}
                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}
                type="systemDetail"
            />
        ));
    };

    // this will be called on bulk select checkbox click as well, with array as cve parameter
    const handleCveSelect = (isSelected, payload) => {
        if (Array.isArray(payload)) {
            payload = payload.map(cve => ({ ...cve, ...cve.attributes, attributes: undefined }));
        }
        else {
            payload = { ...payload, ...payload.attributes };
            delete payload.attributes;
        }

        dispatch(selectSystemCve(payload));
    };

    const handleCveOpen = (isOpen, cves, isAllExpanded) => {
        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));
    };

    if (!systemCVEs.payload.errors) {
        return (
            <CVETableContext.Provider
                value={{
                    cves,
                    systemCVEs,
                    parameters,
                    selectedCves,
                    expandedRows,
                    isAllExpanded,
                    canEditPairStatus,
                    methods: {
                        apply,
                        downloadReport,
                        selectCves: handleCveSelect,
                        openCves: handleCveOpen,
                        showStatusModal,
                        setColumnManagementModalOpen,
                        bulkFetchResource: params => fetchCveIdsBySystem({ ...params, system: entity.id })
                    }
                }}
            >
                <StatusModal/>

                { ColumnManagementModal }

                <Stack hasGutter>
                    {showHeaderLabel && (
                        <StackItem>
                            <TextContent>
                                <Text component={TextVariants.h2}>
                                    {intl.formatMessage(messages.cvesHeader)}
                                </Text>
                            </TextContent>
                        </StackItem>
                    )}
                    <StackItem>
                        <SystemCveTableToolbar
                            entity={entity.id}
                            canExport={canExport}
                            customAction={customAction}
                            canSelect={canSelect}
                            canManageColumns={canManageColumns}
                            filters={filters}
                        />
                    </StackItem>
                </Stack>

                <SystemCveTable
                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}
                    entity={entity.id}
                    canSelect={canSelect}
                />
            </CVETableContext.Provider>
        );
    } else {
        return processError(systemCVEs.payload.errors);
    }
};

SystemCVEs.defaultProps = {
    allowedCveActions: [],
    showHeaderLabel: false,
    setPageTitle: false,
    canSelect: true,
    canManageColumns: true,
    canEditPairStatus: true,
    linkToCustomerPortal: false
};

SystemCVEs.propTypes = {
    entity: propTypes.object,
    intl: propTypes.any,
    showHeaderLabel: propTypes.bool,
    setPageTitle: propTypes.bool,
    canExport: propTypes.bool,
    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),
    canSelect: propTypes.bool,
    canEditPairStatus: propTypes.bool,
    canManageColumns: propTypes.bool,
    defaultColumns: propTypes.arrayOf(propTypes.string),
    filters: propTypes.arrayOf(propTypes.string),
    linkToCustomerPortal: propTypes.bool
};

export const ConnectedSystemCves = injectIntl(SystemCVEs);

const TranslateSystemCves = ({ customItnlProvider, customIntlProvider, ...props }) => {
    const Wrapper = (customItnlProvider || customIntlProvider) ? IntlProvider : Fragment;

    return <Wrapper {...(customItnlProvider || customIntlProvider) && {
        locale: navigator.language.slice(0, 2),
        messages
    }} >
        <ConnectedSystemCves {...props} />
    </Wrapper>;
};

TranslateSystemCves.propTypes = {
    customItnlProvider: propTypes.bool,
    customIntlProvider: propTypes.bool,
    customRouter: propTypes.bool
};

TranslateSystemCves.defaultProps = {
    customItnlProvider: false,
    customIntlProvider: false,
    customRouter: false
};

export default TranslateSystemCves;
