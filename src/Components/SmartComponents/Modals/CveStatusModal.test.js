import React from 'react';
import { Provider } from 'react-redux';
import * as deps from '../../../Helpers/APIHelper';
import CVEStatusModal from './CveStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { fireEvent, render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import TestWrapper from '../../../Utilities/TestWrapper';

const MockStore = ({ children }) => <Provider store={ReducerRegistry.getStore()}>{children}</Provider>;

describe('CveStatusModal component', () => {
    it('should render with one CVE selected', () => {
        const setCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));

        deps.setCveStatus = setCveStatusMock; // CVE status
        deps.setSystemCveStatus = setSystemCveStatusMock; // CVE-system pair status, only call when checkbox is unchecked

        const cveList = [{
            id: "CVE-2020-0001",
            status_id: "3",
            justification: "old justification"
        }];

        render(
            <MockStore>
                <TestWrapper>
                    <CVEStatusModal open cves={cveList} />
                </TestWrapper>
            </MockStore>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        userEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'No action - risk accepted' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        userEvent.click(saveButton);

        expect(setCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            status_id: 3,
            status_text: 'new justification'
        });
    });

    it('should render with multiple CVEs selected', () => {
        const setCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));

        deps.setCveStatus = setCveStatusMock; // CVE status
        deps.setSystemCveStatus = setSystemCveStatusMock; // CVE-system pair status, only call when checkbox is unchecked

        const cveList2 = [
            {
                id: "CVE-2020-0001",
                status_id: "3",
                justification: "test"
            },
            {
                id: "CVE-2020-0002",
                status_id: "4",
                justification: "test2"
            }
        ];

        render(
            <MockStore>
                <TestWrapper>
                    <CVEStatusModal open cves={cveList2} />
                </TestWrapper>
            </MockStore>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        userEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'On-hold' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        userEvent.click(saveButton);

        expect(setCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001', 'CVE-2020-0002'],
            status_id: 0,
            status_text: 'new justification'
        });
    });
});
