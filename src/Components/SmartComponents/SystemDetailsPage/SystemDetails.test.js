import SystemDetails from "./SystemDetails";
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from "react-redux";
import { initialState } from '../../../Store/Reducers/SystemCvesStore';

const customMiddleWare = store => next => action => {
    next(action);
}
  
const mockStore = configureStore([customMiddleWare]);
let storeObj = { 
    SystemCvesStore: initialState, 
    entityDetails: { 
        entity: { test: 'test' }, 
        opt_out: false, 
        loaded: true 
    },
    AppStore: { 
        popup: {}
    } 
};

describe('SystemDetails', () => {

    const mountComponent = (store) => 
        mountWithIntl(
            <Provider store={store}>
                <Router>
                    <SystemDetails />
                </Router>
            </Provider>);

    it('Should match snapshot', () => {
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should render SystemCVEs when isOptOut is false', () => {
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('SystemCVEs')).toBeTruthy();
    });

    it('Should render EmptyExcludedSystem when isOptOut is true', () => {
        storeObj.entityDetails.opt_out = true;
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('EmptyExcludedSystem')).toBeTruthy();
    });

    it('Should pass optOutSystemHandler to EmptyExcludedSystem component', () => {
        storeObj.entityDetails.opt_out = true;
        const tempStore = mockStore(storeObj);
        const mockFunc = jest.fn();
        const wrapper = mountWithIntl(
            <Provider store={tempStore}>
                <Router>
                    <SystemDetails optOutSystemHandler={mockFunc}/>
                </Router>
            </Provider>);
        const buttonAction = wrapper.find('EmptyExcludedSystem').props().buttonAction;
        buttonAction();
        expect(mockFunc).toHaveBeenCalledWith(false);
    });

    it('Should render null when entity is undefined or loaded is false', () => {
        storeObj.entityDetails.entity = undefined;
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('EmptyExcludedSystem')).toEqual({});
        expect(wrapper.find('SystemCVEs')).toEqual({});   
    });
});
