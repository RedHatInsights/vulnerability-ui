import '@testing-library/jest-dom';
import { render, screen, waitFor } from '@testing-library/react';
import CVEDetailTableTitle from './CVEDetailTableTitle';
import { AccountStatContext } from '../../../Utilities/VulnerabilityRoutes';
import { CVEPageContext } from './CVEDetailsPage';

jest.mock('@unleash/proxy-client-react', () => ( {
    ...jest.requireActual('@unleash/proxy-client-react'),
    useFlag: () => true, 
    useFlagsStatus: () => ({ flagsReady: true })
}));

afterEach(() => {
    jest.resetAllMocks()
});

const accountContextValue = {     
    hasConventionalSystems: true,
    hasEdgeDevices: true
};

const hybridSystemsCounts = {
    conventionalCount: 10,
    edgeCount: 10,
    areCountsLoading: false
}

const renderComponent = (accountContextValue = accountContextValue, cveContextValues = hybridSystemsCounts) => {
    render(
        <AccountStatContext.Provider value={accountContextValue}>
            <CVEPageContext.Provider value={cveContextValues}>
                <CVEDetailTableTitle cveName={'test-cve'}  />
            </CVEPageContext.Provider>
        </AccountStatContext.Provider>
    );
}

describe('CVE detail table title:', () => {
    test('Should show total number of affected systems when there is an edge device in an account', async () => {
        renderComponent(accountContextValue, hybridSystemsCounts);
        await waitFor(() => {
            expect(screen.getByLabelText('Affected systems table title')).toBeDefined();
        });
        
        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            '20 Total systems affected'
        );
    });
    test('Should show only Systems as title when there is no edge device in an account', async () => {
        renderComponent({...accountContextValue, hasEdgeDevices: false }, hybridSystemsCounts);
        await waitFor(() => {
            expect(screen.getByLabelText('Affected systems table title')).toBeDefined();
        });

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            'Systems'
        );
    });
    test('Should show only systems text in singular when there is a single edge device', async () => {
        hybridSystemsCounts.conventionalCount = 0
        hybridSystemsCounts.edgeCount = 1;
        renderComponent(accountContextValue, hybridSystemsCounts);
        await waitFor(() => {
            expect(screen.getByLabelText('Affected systems table title')).toBeDefined();
        });

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            '1 Total system affected'
        );
    });
    test('Should show default label Systems when  counts are loading', async () => {
        hybridSystemsCounts.areCountsLoading = true;
        renderComponent({...accountContextValue, hasEdgeDevices: false }, );

        expect(screen.getByLabelText('Table title skeleton')).toBeVisible();
    });
});
