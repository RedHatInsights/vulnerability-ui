
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withRouter } from 'react-router-dom';
import notifications from '@redhat-cloud-services/frontend-components-notifications/cjs/notifications';
import NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/cjs/NotificationPortal';
import { connect } from 'react-redux';
import './App.scss';
import ReducerRegistry from './Utilities/ReducerRegistry';
import { Routes } from './Utilities/Routes';
import NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';

ReducerRegistry.register({ notifications });

class App extends Component {
    static propTypes = {
        history: PropTypes.object
    };

    constructor(props) {
        super(props);
        this.state = { hasPermission: true };
    }

    async componentDidMount() {
        insights.chrome.init();
        insights.chrome.identifyApp('vulnerability');
        insights.chrome.navigation([]);

        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {
            if (event.domEvent) {
                this.props.history.push(`/${event.navId}`);
            }
        });

        this.buildNav = this.props.history.listen(() => insights.chrome.navigation([]));

        this.checkPermission();
    }

    componentWillUnmount() {
        this.appNav();
        this.buildNav();
    }

    checkPermission = async () => {
        const vulnerabilityPermissions = await window.insights.chrome.getUserPermissions('vulnerability');
        const permissionList = vulnerabilityPermissions.map(({ permission }) => permission);
        if (!permissionList.includes('vulnerability:*:*' || 'vulnerability:vulnerability:*')) {
            this.setState({ hasPermission: false });
        }
    }

    render() {
        if (this.state.hasPermission) {
            return (
                <React.Fragment>
                    <NotificationsPortal />
                    <Routes />
                </React.Fragment>
            );
        }
        else {
            return <NoAccessPage/>;
        }
    }
}

export default withRouter(connect()(App));
