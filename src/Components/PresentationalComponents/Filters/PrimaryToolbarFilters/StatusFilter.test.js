import statusFilter from './StatusFilter'

describe('statusFilter', () => {
    const applyMock = jest.fn();

    it('Should render the option items', () => {
        const options = [
            { label: 'Not reviewed', value: '0' },
            { label: 'In review', value: '1' },
            { label: 'On-hold', value: '2' },
            { label: 'Scheduled for patch', value: '3' },
            { label: 'Resolved', value: '4' },
            { label: 'No action - risk accepted', value: '5' },
            { label: 'Resolved via mitigation', value: '6' }
        ]

        const comp = statusFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue', () => {
        let comp = statusFilter(applyMock)
        expect(comp.filterValues.value).toStrictEqual([])
    })

    it('Should use passed currentValues', () => {
        let currentFilter = { status_id: '1' }
        let expected = ['1']
        let comp = statusFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)

        currentFilter = { status_id: '1,4,65,6' }
        expected = ['1', '4', '65', '6']
        comp = statusFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toStrictEqual(expected)
    })

    it('Should call apply with params', () => {
        let currentFilter = { status_id: '1' }
        let comp = statusFilter(applyMock, currentFilter)

        comp.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ status_id: '', page: 1 })

        comp.filterValues.onChange('event', [',', '2'])
        expect(applyMock).toBeCalledWith({ status_id: '', page: 1 })
    })

})
