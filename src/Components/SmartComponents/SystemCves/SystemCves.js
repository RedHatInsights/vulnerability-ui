/* eslint-disable camelcase */
import { Stack, StackItem } from '@patternfly/react-core';
import { classNames, expandable, sortable } from '@patternfly/react-table';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import propTypes from 'prop-types';
import qs from 'query-string';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';
import { updateStateSet } from '../../../Helpers/MiscHelper';
import { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';
import { fetchCveListBySystem } from '../../../Store/Actions/Actions';
import '../CVEs/vulnerabilities.scss';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import SystemCveTable from './SystemCveTable';
import SystemCveTableToolbar from './SystemCveTableToolbar';

export const CVETableContext = React.createContext({});

const header = [
    {
        title: 'CVE ID',
        key: 'synopsis',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')],
        cellFormatters: [expandable]
    },
    {
        title: 'Publish date',
        key: 'public_date',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: 'CVSS base score',
        key: 'cvss_score',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: 'Impact',
        key: 'impact',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')]
    },

    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },
    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }
];

class SystemCves extends Component {
    static propTypes = {
        entity: propTypes.object,
        cveList: propTypes.any,
        fetchData: propTypes.func,
        history: propTypes.object,
        location: propTypes.object
    };

    constructor(props) {
        super(props);
        this.state = {
            selectedCves: new Set(),
            openedCves: new Set(),
            StatusModal: () => null,
            expandCveDescription: false
        };
    }

    componentDidMount() {
        const defaultParams = { sort: '-public_date' };
        const queryObject = qs.parse(this.props.location.search);
        this.apply({ ...defaultParams, ...queryObject });
    }

    processError = error => {
        const { status } = error;
        const statusCode = parseInt(status);
        if (statusCode === 404 && this.props.entity) {
            return NoVulnerabilityData;
        } else {
            return GenericError;
        }
    };

    dataReload = () => {
        const { meta, data } = this.props.cveList;
        const { page, pages } = meta;
        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;

        this.setState(
            {
                ...this.state,
                page: reloadPage,
                page_size: meta.page_size
            },
            this.apply
        );
    }

    apply = (config = {}) => {

        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {
            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);

            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {
                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));
                cvssEntry = { from: values[0], to: values[1] };
            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {
                cvssEntry = { from: undefined, to: undefined };
            }

            config.cvss_from = cvssEntry.from;
            config.cvss_to = cvssEntry.to;
        }

        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {
            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);

            if (typeof publicEntry !== 'undefined') {
                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');
                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');
            } else {
                config.public_from = undefined;
                config.public_to = undefined;
                config.publish_date = undefined;
            }
        }

        this.setState({ ...this.state, ...config }, this.sendRequest);
    };

    selectCves = (isSelected, cveNames) => {
        let { selectedCves } = this.state;
        if (cveNames) {
            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);
        } else {
            selectedCves = new Set();
        }

        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });
    };

    // @TODO System has different mechanism to store opened, unify the mechanism with CVE
    openCves = (isOpen, cveNames, isExpanded) => {
        let { openedCves, expandCveDescription } = this.state;

        // if expanded, collapse rows
        if (expandCveDescription && !cveNames.length) {
            openedCves = cveNames;
        }

        if (cveNames) {
            openedCves = updateStateSet(openedCves, cveNames, isOpen);
        } else {
            openedCves = new Set();
        }

        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });
    };

    createUrlParams = allParams => {
        const params = { ...allParams };
        const allowedParams = [
            'cvss_filter',
            'publish_date',
            'filter',
            'limit',
            'offset',
            'page',
            'page_size',
            'sort',
            'impact',
            'business_risk_id',
            'status_id'
        ];
        Object.keys(allParams).forEach(
            key =>
                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&
                delete params[key]
        );
        const queryString = qs.stringify(params);
        this.props.history.push('?' + queryString);
    };

    sendRequest = () => {
        const { fetchData, entity } = this.props;
        const { expandCveDescription } = this.state;
        fetchData && fetchData({ ...this.state, system: entity.id })
        .then(({ data }) => {
            if (expandCveDescription) {
                const cveIds = data && data.map(cve => cve.id);
                this.openCves(true, cveIds, expandCveDescription);
            }
        });
        this.createUrlParams(this.state);
    };

    downloadReport = format => {
        const params = { ...this.state };
        const { entity } = this.props;
        let { payload } = fetchCveListBySystem({
            ...params,
            page_size: Number.MAX_SAFE_INTEGER,
            data_format: format,
            page: 1,
            system: entity.id
        });

        payload &&
            payload.then(({ data: response }) => {
                const data = format === 'json' ? JSON.stringify(response) : response;
                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);
            });
    };

    showStatusModal = cves => {
        this.setState({
            StatusModal: () => (
                <CvePairStatusModal
                    cves={cves}
                    updateRef={this.dataReload}
                    inventories={[{ id: this.props.entity && this.props.entity.id }]}
                />
            )
        });
    };

    render() {
        const { cveList, entity } = this.props;
        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;
        const { StatusModal } = this.state;
        const cves = cveList;
        const { errors } = cves;
        if (!errors) {
            return (
                <CVETableContext.Provider
                    value={{
                        cves,
                        params: this.state,
                        methods: {
                            apply,
                            downloadReport,
                            selectCves,
                            openCves,
                            showStatusModal,
                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })
                        }
                    }}
                >
                    <StatusModal />

                    <Stack>
                        <StackItem>
                            <SystemCveTableToolbar showRemediationButton entity={entity} />
                        </StackItem>
                        <StackItem>
                            <SystemCveTable header={header} entity={entity} />
                        </StackItem>
                    </Stack>
                </CVETableContext.Provider>
            );
        } else {
            return this.processError(errors);
        }
    }
}

function mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {
    return {
        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),
        entity
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: params => {
            const cvePromise = fetchCveListBySystem(params);
            dispatch(cvePromise);
            return cvePromise.payload;
        }
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemCves)
);
