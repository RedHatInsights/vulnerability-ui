import securityRuleFilter from './SecurityRuleFilter'

describe('SecurityRuleFilter', () => {
    const applyMock = jest.fn();

    it('Should render the security option items', () => {
        const options = [
            { label: 'Has security rule', value: 'true' },
            { label: 'Does not have security rule', value: 'false' }
        ]

        const comp = securityRuleFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should render the dynamic security option items', () => {
        const dynamic = [
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' }

        ]
        const options = [
            { label: 'Has security rule', value: 'true' },
            { label: 'Does not have security rule', value: 'false' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' }
        ]

        const comp = securityRuleFilter(applyMock, '', dynamic)
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue all', () => {
        let comp = securityRuleFilter(applyMock, '')
        expect(comp.filterValues.value).toMatchObject([])

        comp = securityRuleFilter(applyMock, undefined)
        expect(comp.filterValues.value).toMatchObject([])

        comp = securityRuleFilter(applyMock, '5')
        expect(comp.filterValues.value).toMatchObject([])

        comp = securityRuleFilter(applyMock, { rule_presence: 'true', rule: 'some_rule' })
        expect(comp.filterValues.value).toMatchObject(['true', 'some_rule'])

    })

    it('Should use the passed currentValue ', () => {
        let currentFilter = { rule_presence: 'true', rule: 'some_rule' }
        let comp = securityRuleFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toMatchObject(['true', 'some_rule'])
    })

    it('Should call apply with params', () => {
        let comp = securityRuleFilter(applyMock, undefined)
        comp.filterValues.onChange('event', ['true'])
        expect(applyMock).toBeCalledWith({ "page": 1, "rule_presence": "true" })

        comp.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ "page": 1 })
    })

    it('Should call apply with dynamic prams', () => {
        const dropdownItems = [
            { label: 'Does not have security rule', value: 'false' }
        ]
        const dynamic = [
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' }

        ]
        const options = [
            { label: 'Does not have security rule', value: 'false' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' }
        ]

        const comp = securityRuleFilter(
            applyMock,
            '',
            dynamic,
            {
                isDynamic: true,
                dropdownItems
            }
        )

        comp.filterValues.onChange('event', ['security rule 1'])
        expect(applyMock).toBeCalledWith({ "page": 1, "rule": "security rule 1" })

        expect(comp.filterValues.items).toStrictEqual(options)
    })
})
