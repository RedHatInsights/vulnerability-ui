import configureStore from 'redux-mock-store';
import { useSelector } from 'react-redux';
import ReportConfigModal from './ReportConfigModal';
import { getCveReportFilters, CUSTOM_REPORT_DEFAULT_SORT } from '../../../Helpers/constants';
import { getDefaultFilterData } from '../../../Helpers/ReportsHelper';
import TestWrapper from '../../../Utilities/TestWrapper';
import userEvent from '@testing-library/user-event';
import { render, screen } from '@testing-library/react';

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));

jest.mock("../../../Helpers/APIHelper.js", () => ({
    ...jest.requireActual("../../../Helpers/APIHelper.js"),
    getOperatingSystems: () => ({})
}));

const customMiddleWare = store => next => action => {
    useSelector.mockImplementation(callback => {
        return callback({ });
    });
    next(action);
}

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useFeatureFlag: () => false,
    useHybridSystemFilterFlag: () => false 
}));

const mockStore = configureStore([customMiddleWare]);
const store = mockStore({});
const CVE_REPORT_FILTERS = getCveReportFilters(true);
const setColumnsToInclude = jest.fn();

beforeEach(() => {
    let columnsToInclude = getDefaultFilterData(true);

    render(
        <TestWrapper store={ store }>
            <ReportConfigModal
                isOpen
                onClose={jest.fn()}
                filterData={columnsToInclude}
                sorterData={CUSTOM_REPORT_DEFAULT_SORT}
                setColumnsToInclude={setColumnsToInclude}
                columnsToInclude={Object.keys(CVE_REPORT_FILTERS)}
                userNotes=""
                globalFilterTags={[]}
                setFilterData={jest.fn()}
                handleModalClose={ jest.fn() }
                setInheritGlobalTags={ jest.fn() }
            />
        </TestWrapper>
    );
});

describe('Report config modal component', () => {
    it('Should pass correct selected columns array according to checkboxes', () => {
        userEvent.click(screen.getByRole('button', {
            name: /choose columns/i
        }));

        userEvent.click(screen.getByRole('checkbox', {
            name: /publish date/i
        }));

        expect(setColumnsToInclude).toHaveBeenCalledWith([
            "rule_presence", "known_exploit", "impact", "cvss_filter", "business_risk_id", "affecting", "status_id", "rhel_version", "advisory_available", "tags"
        ]);
    });

    it('Should clear state on close', () => {
        userEvent.click(screen.getByRole('button', {
            name: /choose columns/i
        }));

        userEvent.click(screen.getByRole('checkbox', {
            name: /publish date/i
        }));

        userEvent.click(screen.getByRole('button', {
            name: /cancel/i
        }));

        expect(setColumnsToInclude).toHaveBeenNthCalledWith(3, [
            "rule_presence", "known_exploit", "impact", "cvss_filter", "business_risk_id", "affecting", "publish_date", "status_id", "rhel_version", "advisory_available", "tags"
        ]);
    })
});
