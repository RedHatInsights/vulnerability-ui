import React from 'react';
import '@testing-library/jest-dom';
import { screen, waitFor } from '@testing-library/react';
import { ComponentWithContext } from './TestingUtilities';
import { render } from '@testing-library/react';
import '@testing-library/jest-dom';
import { InsightsElement, checkForAccountSystems } from "./VulnerabilityRoutes";


jest.mock('./useFeatureFlag', () => ({
    ...jest.requireActual('./useFeatureFlag'),
    __esModule: true,
    default: jest.fn(() => false)
}))

jest.mock('@redhat-cloud-services/frontend-components/AsyncComponent', () => ({
    __esModule: true,
    default: jest.fn((props) => (
        <div {...props} aria-label="Zero state">
            AsyncComponent
        </div>
    )),
}));

const TestElement = (props) => <div {...props} />;

afterEach(() => {
    jest.clearAllMocks();
});
describe('VulnerabilityRoutes', () => {
    describe('InsightsElement', () => {
        it('Should show loading state while account stats are being loaded', () => {
            render(<ComponentWithContext>
                <InsightsElement element={TestElement} />
            </ComponentWithContext>);

            expect(
                screen.getByLabelText('Spinner')
            ).toBeVisible();
        });

        describe(('edge parit disabled'), () => {
            it('Should show zero state when there is no conventional, regardless of edge system', async () => {
                let isEdgeParityEnabled = false;
                let hasEdgeDevices = true;
                let hasConventionalSystems = false;
                expect(checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)).toBe(false)

            });
            
            it('Should element when there is a conventional system, regardless of edge system', async () => {
                let isEdgeParityEnabled = false;
                let hasEdgeDevices = true;
                let hasConventionalSystems = true;
                expect(checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)).toBe(true)
            });
        })

        describe(('edge parit enabled'), () => {
            it('Should show zero state when there is no conventional and no edge systems', async () => {
                let isEdgeParityEnabled = true;
                let hasEdgeDevices = false;
                let hasConventionalSystems = false;
                expect(checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)).toBe(false)
            });

            it('Should element when there is no conventional, but there is an edge systems', async () => {
                let isEdgeParityEnabled = true;
                let hasEdgeDevices = true;
                let hasConventionalSystems = false;
                expect(checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)).toBe(true)
            });

            it('Should element when there is conventional, but there is no edge systems', async () => {
                let isEdgeParityEnabled = true;
                let hasEdgeDevices = false;
                let hasConventionalSystems = true;
                expect(checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)).toBe(true)
            });
        });

        
    });
})

