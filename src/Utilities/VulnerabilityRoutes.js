import React, { useEffect, useState, lazy, Suspense, Fragment, createContext } from 'react';
import PropTypes from 'prop-types';
import { Navigate, Route, Routes, useLocation } from 'react-router-dom';
import { checkEdgePresence, getRhelSystems } from '../Helpers/APIHelper';
import { PATHS } from '../Helpers/constants';
import { intl } from './IntlProvider';
import messages from '../Messages';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import useFeatureFlag from './useFeatureFlag';
import { Bullseye, Spinner } from '@patternfly/react-core';
import { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';
import { useNotification } from '../Helpers/Hooks';

const SystemsPage = lazy(() =>
    import(
        /* webpackChunkName: "Systems" */ '../Components/SmartComponents/SystemsPage/SystemsPage'
    )
);

const LandingPage = lazy(() =>
    import(
        /* webpackChunkName: "LandingPage" */ '../Components/SmartComponents/LandingPage/LandingPage'
    )
);

const Upgrade = lazy(() =>
    import(
        /* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'
    )
);

const CVEDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "CVEDetailsPage" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'
    )
);

const SystemDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "SystemDetailsPage" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'
    )
);
const Reports = lazy(() =>
    import(/* webpackChunkName: "Reports" */ '../Components/SmartComponents/Reports/ReportsPage')
);

export const AccountStatContext = createContext({
    hasConventionalSystems: true,
    hasEdgeDevices: false
});
export const checkForAccountSystems = (isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems) => {
    return isEdgeParityEnabled && (hasEdgeDevices || hasConventionalSystems) || hasConventionalSystems;
};

export const InsightsElement = ({ element: Element, title, globalFilterEnabled, ...elementProps }) => {
    let location = useLocation();
    const [isLoading, setLoading] = useState(true);
    const [hasConventionalSystems, setHasConventionalSystems] = useState(true);
    const [hasEdgeDevices, setHasEdgeDevices] = useState(true);
    const [hasAccess, setHasAccess] = useState(true);
    const [addNotification] = useNotification();
    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');
    const chrome = useChrome();

    useEffect(() => {
        const fetchData = async () => {
            getRhelSystems()
                .then(async result =>  {
                    if (isEdgeParityEnabled) {
                        //if there is at least 1 edge device in the account level, not only in vulnerability
                        const edgeDevicePresent = await checkEdgePresence();
                        setHasEdgeDevices(edgeDevicePresent);
                    }

                    setHasConventionalSystems(result);
                    setLoading(false);
                })
                .catch(error => {
                    if (error.status === '403') {
                        setHasAccess(false);
                    }
                    else {
                        addNotification({
                            variant: 'danger',
                            autoDismiss: false,
                            msg: 'Failed to fetch systems',
                            description: error.detail
                        });
                    }

                    setLoading(false);
                });
        };

        fetchData();
    }, []);

    const subPath = location.pathname && location.pathname.split('/')[4];

    useEffect(() => {
        chrome.updateDocumentTitle(`${subPath ? `${subPath} - ` : ''} ${title} -
         ${intl.formatMessage(messages.pageTitleSuffix)}`);
    }, [chrome, intl, subPath]);

    useEffect(() => {
        chrome.hideGlobalFilter(!globalFilterEnabled);
    }, [location.pathname]);

    if (isLoading) {
        return (
            <Bullseye>
                <Spinner size="lg" aria-label="Spinner"/>
            </Bullseye>
        );
    }

    return hasAccess
        ? <AsyncComponent
            appId="vulnerability_zero_state"
            appName="dashboard"
            module="./AppZeroState"
            scope="dashboard"
            ErrorComponent={<ErrorState />}
            app="Vulnerability"
            aria-label="Zero state"
            customFetchResults={checkForAccountSystems(isEdgeParityEnabled, hasEdgeDevices, hasConventionalSystems)}
        >
            <AccountStatContext.Provider value={{ hasConventionalSystems, hasEdgeDevices }}>
                <Element
                    {...elementProps}
                    hasEdgeDevices={hasEdgeDevices}
                    hasConventionalSystems={hasEdgeDevices}
                    aria-label="Insights element"
                />
            </AccountStatContext.Provider>
        </AsyncComponent>
        : <NotAuthorized
            title="This application requires Inventory permissions"
            description={
                <div>
                  To view the content of this page, you must be granted a minimum of
                  inventory permissions from your Organization Administrator.
                </div>
            }
        />;
};

InsightsElement.propTypes = {
    element: PropTypes.func,
    title: PropTypes.string,
    globalFilterEnabled: PropTypes.bool
};

export const VulnerabilityRoutes = () => {
    return (
        <Suspense fallback={Fragment}>
            <Routes>
                <Route
                    path={PATHS.cveDetailsPage.to}
                    element={
                        <InsightsElement
                            element={CVEDetailsPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            globalFilterEnabled
                        />
                    }
                />
                <Route
                    path={PATHS.cveDetailsEdgePage.to}
                    element={
                        <InsightsElement
                            element={CVEDetailsPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            isImmutableTabOpen
                        />
                    }
                />
                <Route
                    path={PATHS.systemDetailsPage.to}
                    element={<SystemDetailsPage />}
                />

                <Route
                    path={PATHS.cvesPage.to}
                    element={
                        <InsightsElement
                            element={LandingPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            globalFilterEnabled
                        />
                    }
                />

                <Route
                    path={PATHS.systemsPage.to}
                    element={
                        <InsightsElement
                            element={SystemsPage}
                            title={intl.formatMessage(messages.systemsHeader)}
                            globalFilterEnabled
                        />
                    }
                />

                <Route
                    path={PATHS.upgrade.to}
                    element={<InsightsElement element={Upgrade} title={intl.formatMessage(messages.upgradePageTitle)} />}
                />

                <Route
                    path={PATHS.reports.to}
                    element={<InsightsElement element={Reports} title={intl.formatMessage(messages.reportsPageTitle)} />}
                />

                <Route
                    path="*"
                    element={<Navigate to="cves" />}
                />
            </Routes>
        </Suspense>
    );
};
