// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SystemDetailPage Should match the snapshots 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(injectIntl(Connect(InventoryDetail)))
        addNotification={[MockFunction]}
        fetchSystemDetails={[MockFunction]}
        match={
          Object {
            "params": Object {
              "inventoryId": "testCve",
            },
          }
        }
        optOutSystem={[MockFunction]}
      >
        <injectIntl(Connect(InventoryDetail))
          addNotification={[MockFunction]}
          fetchSystemDetails={[MockFunction]}
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          optOutSystem={[MockFunction]}
        >
          <Connect(InventoryDetail)
            addNotification={[MockFunction]}
            fetchSystemDetails={[MockFunction]}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "defaultRichTextElements": undefined,
                "formatDate": [Function],
                "formatDateTimeRange": [Function],
                "formatDateToParts": [Function],
                "formatDisplayName": [Function],
                "formatList": [Function],
                "formatListToParts": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatNumberToParts": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "formatTimeToParts": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getDisplayNames": [Function],
                  "getListFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralRules": [Function],
                  "getRelativeTimeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {
                  "default.cancel": "Cancel",
                  "default.delete": "Delete",
                  "default.remove": "Remove",
                  "default.save": "Save",
                },
                "onError": [Function],
                "textComponent": Symbol(react.fragment),
                "timeZone": undefined,
                "wrapRichTextChunksInFragment": undefined,
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            optOutSystem={[MockFunction]}
          >
            <InventoryDetail
              addNotification={[Function]}
              fetchSystemDetails={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "defaultRichTextElements": undefined,
                  "formatDate": [Function],
                  "formatDateTimeRange": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatListToParts": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {
                    "default.cancel": "Cancel",
                    "default.delete": "Delete",
                    "default.remove": "Remove",
                    "default.save": "Save",
                  },
                  "onError": [Function],
                  "textComponent": Symbol(react.fragment),
                  "timeZone": undefined,
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              optOutSystem={[Function]}
              systemDetails={
                Object {
                  "entity": "testEntity",
                  "opt_out": false,
                }
              }
            >
              <ForwardRef
                fallback={
                  <Bullseye
                    className="pf-u-p-lg"
                  >
                    <Spinner
                      size="xl"
                    />
                  </Bullseye>
                }
              >
                <BaseDetailWrapper
                  fallback={
                    <Bullseye
                      className="pf-u-p-lg"
                    >
                      <Spinner
                        size="xl"
                      />
                    </Bullseye>
                  }
                  innerRef={null}
                >
                  <Suspense
                    fallback={
                      <Bullseye
                        className="pf-u-p-lg"
                      >
                        <Spinner
                          size="xl"
                        />
                      </Bullseye>
                    }
                  >
                    <ForwardRef
                      ErrorComponent={
                        <UNDEFINED
                          component="DetailWrapper"
                          fallback={
                            <Bullseye
                              className="pf-u-p-lg"
                            >
                              <Spinner
                                size="xl"
                              />
                            </Bullseye>
                          }
                          innerRef={null}
                        >
                          <Header
                            actions={Array []}
                            breadcrumbs={
                              Array [
                                Object {
                                  "loaded": true,
                                  "title": "Systems",
                                  "to": "/systems",
                                },
                                Object {
                                  "isActive": true,
                                  "loaded": undefined,
                                  "title": "Invalid System",
                                },
                              ]
                            }
                            showBreadcrumb={true}
                            title=""
                          >
                            <ForwardRef
                              actions={
                                Array [
                                  Object {
                                    "onClick": [Function],
                                    "title": "Exclude from vulnerability analysis",
                                  },
                                ]
                              }
                              fallback={
                                <Bullseye
                                  className="pf-u-p-lg"
                                >
                                  <Spinner
                                    size="xl"
                                  />
                                </Bullseye>
                              }
                              hideBack={true}
                              onLoad={[Function]}
                            />
                          </Header>
                          <Memo(Connect(Main))>
                            <React.Fragment>
                              <ForwardRef
                                fallback={
                                  <Bullseye
                                    className="pf-u-p-lg"
                                  >
                                    <Spinner
                                      size="xl"
                                    />
                                  </Bullseye>
                                }
                                optOutSystemHandler={[Function]}
                              />
                            </React.Fragment>
                          </Memo(Connect(Main))>
                        </UNDEFINED>
                      }
                      appName="chrome"
                      fallback={
                        <Bullseye
                          className="pf-u-p-lg"
                        >
                          <Spinner
                            size="xl"
                          />
                        </Bullseye>
                      }
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      innerRef={null}
                      module="./DetailWrapper"
                      scope="chrome"
                      store={
                        Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        }
                      }
                    >
                      <BaseScalprumComponent
                        ErrorComponent={
                          <UNDEFINED
                            component="DetailWrapper"
                            fallback={
                              <Bullseye
                                className="pf-u-p-lg"
                              >
                                <Spinner
                                  size="xl"
                                />
                              </Bullseye>
                            }
                            innerRef={null}
                          >
                            <Header
                              actions={Array []}
                              breadcrumbs={
                                Array [
                                  Object {
                                    "loaded": true,
                                    "title": "Systems",
                                    "to": "/systems",
                                  },
                                  Object {
                                    "isActive": true,
                                    "loaded": undefined,
                                    "title": "Invalid System",
                                  },
                                ]
                              }
                              showBreadcrumb={true}
                              title=""
                            >
                              <ForwardRef
                                actions={
                                  Array [
                                    Object {
                                      "onClick": [Function],
                                      "title": "Exclude from vulnerability analysis",
                                    },
                                  ]
                                }
                                fallback={
                                  <Bullseye
                                    className="pf-u-p-lg"
                                  >
                                    <Spinner
                                      size="xl"
                                    />
                                  </Bullseye>
                                }
                                hideBack={true}
                                onLoad={[Function]}
                              />
                            </Header>
                            <Memo(Connect(Main))>
                              <React.Fragment>
                                <ForwardRef
                                  fallback={
                                    <Bullseye
                                      className="pf-u-p-lg"
                                    >
                                      <Spinner
                                        size="xl"
                                      />
                                    </Bullseye>
                                  }
                                  optOutSystemHandler={[Function]}
                                />
                              </React.Fragment>
                            </Memo(Connect(Main))>
                          </UNDEFINED>
                        }
                        appName="chrome"
                        fallback={
                          <Bullseye
                            className="pf-u-p-lg"
                          >
                            <Spinner
                              size="xl"
                            />
                          </Bullseye>
                        }
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "createHref": [Function],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        innerRef={null}
                        module="./DetailWrapper"
                        scope="chrome"
                        store={
                          Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          }
                        }
                      />
                    </ForwardRef>
                    <Bullseye
                      className="pf-u-p-lg"
                    >
                      <div
                        className="pf-l-bullseye pf-u-p-lg"
                      >
                        <Spinner
                          size="xl"
                        >
                          <span
                            aria-valuetext="Loading..."
                            className="pf-c-spinner pf-m-xl"
                            role="progressbar"
                          >
                            <span
                              className="pf-c-spinner__clipper"
                            />
                            <span
                              className="pf-c-spinner__lead-ball"
                            />
                            <span
                              className="pf-c-spinner__tail-ball"
                            />
                          </span>
                        </Spinner>
                      </div>
                    </Bullseye>
                  </Suspense>
                </BaseDetailWrapper>
              </ForwardRef>
            </InventoryDetail>
          </Connect(InventoryDetail)>
        </injectIntl(Connect(InventoryDetail))>
      </withRouter(injectIntl(Connect(InventoryDetail)))>
    </Router>
  </BrowserRouter>
</Provider>
`;
