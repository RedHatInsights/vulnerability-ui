import * as ActionTypes from '../ActionTypes';
import { applyGlobalFilter, isTimestampValid } from './reducersHelper';
import { VULNERABILITIES_HEADER } from '../../Helpers/constants';

export const initialState = {
    cveList: {
        isLoading: true,
        payload: {},
        timestamp: new Date()
    },
    parameters: {
        sort: '-public_date'
    },
    selectedCves: [],
    expandedRows: [],
    isAllExpanded: false,
    columns: VULNERABILITIES_HEADER
};

export const CVEsStore = (state = initialState, action) => {
    let newState = { ...state };

    switch (action.type) {
        case ActionTypes.FETCH_CVE_LIST + '_PENDING':
            newState.cveList = {
                timestamp: action.meta.timestamp,
                isLoading: true
            };
            return newState;

        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':
            newState.error = true;
            newState.cveList = {
                isLoading: false,
                payload: { errors: action.payload }
            };
            return newState;

        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':
            if (isTimestampValid(state.cveList.timestamp, action.meta.timestamp)) {
                newState = {
                    ...state,
                    cveList: {
                        ...state.cveList,
                        payload: action.payload,
                        isLoading: false
                    },
                    ...state.isAllExpanded && { expandedRows: action.payload.data.map(({ id }) => id) }
                };

                return newState;
            }

            return state;

        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS: {
            const { reset, ...params } = action.payload;
            newState.parameters = { ...!reset ? newState.parameters : {}, ...params };

            return newState;
        }

        case ActionTypes.SELECT_CVE: {
            let selectedCves = newState.selectedCves.slice();

            if (Array.isArray(action.payload)) {
                selectedCves = action.payload;
            } else {
                const selectedCve = selectedCves.find(cve => cve.id === action.payload);
                if (selectedCve) {
                    selectedCves.splice(selectedCves.indexOf(selectedCve), 1);
                } else {
                    selectedCves.push(state.cveList.payload?.data.find(cve => cve.id === action.payload));
                }
            }

            return {
                ...newState,
                selectedCves
            };
        }

        case ActionTypes.CHANGE_COLUMNS_CVE_LIST:
            return {
                ...newState,
                columns: action.payload
            };

        case ActionTypes.EXPAND_CVE: {
            if (Array.isArray(action.payload)) {
                const expandedRows = action.payload;
                const isAllExpanded = action.payload.length === 0 ? false : true;
                return { ...newState, expandedRows, isAllExpanded };
            }

            const cveName = newState.cveList.payload.data[action.payload / 2].id;
            const expandedRows = newState.expandedRows.slice();
            expandedRows.includes(cveName) && expandedRows.splice(expandedRows.indexOf(cveName), 1)
                || expandedRows.push(cveName);

            return { ...newState, expandedRows };
        }

        case ActionTypes.CLEAR_CVES_STORE:
            return {
                ...initialState,
                columns: newState.columns
            };

        case ActionTypes.SET_GLOBAL_FILTER:
            newState.parameters = {
                ...applyGlobalFilter(newState.parameters, action.payload)
            };
            return newState;

        default:
            return state;
    }
};
