import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';
import { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React, { useState, useEffect } from 'react';
import { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const CveStatusModal = ({ cves, updateRef, intl }) => {
    const [cveList] = useState(cves);
    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());
    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());
    const [checkboxState, setCheckboxState] = useState(false);

    useEffect(() => {
        setSelectProps({ ouiaId: 'status-select' });
    }, [setSelectProps]);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        return setCveStatus({
            status_id: parseInt(statusId),
            cve: cveIds,
            status_text: justification
        })
        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))
        .then(updateRef);
    };

    function getDefaultStatus() {
        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';
    }

    function getDefaultLabel() {
        return (cveList && cveList.length === 1 && cveList[0].justification) || '';
    }

    const successNotification = {
        variant: 'success',
        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })
    };
    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });

    return (
        <BaseModal
            items={cveList}
            onSave={handleSave}
            onSuccessNotification={successNotification}
            title={title}
            ouiaId={'status-modal'}
        >
            <Stack hasGutter>
                <StackItem>
                    {intl.formatMessage(
                        messages.cveStatusModalSelected,
                        {
                            count: cveList.length || 0,
                            cveId: cveList[0].id, // only used when length is 1
                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold
                        }
                    )}
                </StackItem>
                <StackItem>
                    <InfoCircleIcon
                        className="pf-u-mr-xs"
                        fontSize="var(--pf-global--FontSize--md)"
                        color="var(--pf-global--active-color--300)"
                    />
                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}
                    <Tooltip
                        trigger='mouseenter focus click'
                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}
                    >
                        <React.Fragment>
                            <OutlinedQuestionCircleIcon
                                className="pf-u-ml-xs"
                                color="var(--pf-global--Color--200)"
                                style={{ verticalAlign: '-0.125em' }}
                            />
                        </React.Fragment>
                    </Tooltip>
                </StackItem>
                <StackItem>
                    <Form key="key">
                        {StatusSelect}
                        {JustificationInput}
                        <FormGroup fieldId={'overwrite'}>
                            <Split>
                                <SplitItem>
                                    <Checkbox
                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}
                                        id="alt-form-checkbox-1"
                                        name="alt-form-checkbox-1"
                                        isChecked={checkboxState}
                                        onChange={checked => setCheckboxState(checked)}
                                    />
                                </SplitItem>
                                <SplitItem>
                                    <Tooltip
                                        trigger='mouseenter focus click'
                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}
                                    >
                                        <OutlinedQuestionCircleIcon
                                            className="pf-u-ml-xs"
                                            color="var(--pf-global--Color--200)"
                                            style={{ verticalAlign: '0' }}
                                        />
                                    </Tooltip>
                                </SplitItem>
                            </Split>
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CveStatusModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func,
    intl: propTypes.any
};

export default injectIntl(CveStatusModal);
