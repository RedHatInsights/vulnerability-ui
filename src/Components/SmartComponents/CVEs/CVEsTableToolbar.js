import React from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './CVEs';
import { fetchCvesIds } from '../../../Store/Actions/Actions';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';
import affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';

const CVEsTableToolbarWithContext = (props) => {
    const handleCveDescription = () => {
        const { context } = props;
        const { cves, methods, expandCveDescription } = context;

        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(openedCves);
    };

    const { context } = props;
    const { cves, params, methods, selectedCves, expandCveDescription } = context;
    const { filter } = params;
    const selectedCvesCount = selectedCves && selectedCves.length;

    const selectOptions  = selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),
        multiRow: true
    });

    const actions = [
        '', // #NOTE empty intentionally, Remediation holder
        {
            label: props.intl.formatMessage(messages.editBusinessRisk),
            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),
            props: { isDisabled: !selectedCvesCount }
        },
        {
            label: props.intl.formatMessage(messages.editStatus),
            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),
            props: { isDisabled: !selectedCvesCount }
        },
        {
            label: cves.meta.show_all
                ? props.intl.formatMessage(messages.hideCvesNoEffecting)
                : props.intl.formatMessage(messages.showCvesAffecting),
            onClick: () => methods.apply({ show_all: !cves.meta.show_all, page: 1 })
        },
        {
            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)
                : props.intl.formatMessage(messages.kebabExpandCves),
            onClick: handleCveDescription,
            props: { isDisabled: cves.meta.total_items === 0 }
        }
    ];

    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    itemCount: cves.meta.total_items || 0,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions
                }}
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                    checked: Boolean(selectedCvesCount),
                    onSelect: ()=> selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),
                        securityRuleFilter(methods.apply, params),
                        impactFilter(methods.apply, params),
                        cvssBaseScoreFilter(methods.apply, params),
                        businessRiskFilter(methods.apply, params),
                        statusFilter(methods.apply, params),
                        publishDateFilter(methods.apply, params),
                        affectingFilter(methods.apply, params)
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(params),
                    onDelete: (e, i) => removeFilters(i, methods.apply)
                }}
                exportConfig = {{
                    isDisabled: cves.meta.total_items === 0,
                    extraItems: [
                        <li key='download-pdf' role="menuitem">
                            <DownloadCVEsReport
                                type='cves'
                                params={params}
                                filters={buildActiveFilters(params)}
                                buttonProps={{ variant: 'text', className: 'pf-c-dropdown__menu-item' }}
                            />
                        </li>
                    ],
                    ...exportConfig(methods)
                }}
            />

        </React.Fragment>
    );
};

CVEsTableToolbarWithContext.propTypes = {
    context: propTypes.object,
    intl: propTypes.object
};

CVEsTableToolbarWithContext.defaultProps = {
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

const CVEsTableToolbar = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableToolbarWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);
export default injectIntl(CVEsTableToolbar);
