import { Button, FormSelect, FormSelectOption, Modal, Stack, StackItem } from '@patternfly/react-core';
import { PencilAltIcon } from '@patternfly/react-icons';
import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { changeSystemCveStatusAction } from '../../../Store/Actions/Actions';
import  { STATUS_OPTIONS } from '../../../Helpers/constants';

const notifications = {
    success: {
        variant: 'success',
        title: 'Status change done!'
    }
};

class StatusDropdown extends Component {
    static propTypes = {
        hasNotification: propTypes.bool,
        addNotification: propTypes.func,
        systemId: propTypes.string,
        currentStatusId: propTypes.number,
        currentStatusName: propTypes.string,
        cveName: propTypes.string,
        changeStatus: propTypes.func
    };

    static defaultProps = {
        hasNotification: false
    };

    constructor(props) {
        super(props);
        this.state = {
            isModalOpen: false,
            statusId: 0
        };
    }

    componentDidMount() {
        this.setState({ statusId: this.props.currentStatusId });
    }

    createNotification(type) {
        return this.props.hasNotification && this.props.addNotification(notifications[type]);
    }

    handleOnChange = value => {
        this.setState({ statusId: parseInt(value) });
    };

    handleModalToggle = () => {
        this.setState(({ isModalOpen }) => ({
            isModalOpen: !isModalOpen
        }));
    };

    render() {
        const { systemId, currentStatusName, cveName, changeStatus } = this.props;
        const dropdownItems = (
            <FormSelect value={this.state.statusId} onChange={this.handleOnChange} id="change-status">
                {STATUS_OPTIONS.map(item => (
                    <FormSelectOption key={item.value} value={item.value} label={item.label} />
                ))}
            </FormSelect>
        );
        const actionButtons = this.state.isModalOpen && [
            <Button key="cancel" variant="secondary" onClick={this.handleModalToggle}>
                Cancel
            </Button>,
            (
                <Button
                    key="confirm"
                    variant="primary"
                    onClick={() => {
                        changeStatus(systemId, cveName, this.state.statusId, StatusDropdown.updateRef).then(() =>
                            this.createNotification('success')
                        );
                        this.handleModalToggle();
                    }}
                >
                    Confirm
                </Button>
            )
        ];
        const modal = this.state.isModalOpen && (
            <Modal
                isSmall
                title="Update the status for this CVE and system"
                isOpen={this.state.isModalOpen}
                onClose={this.handleModalToggle}
                actions={actionButtons}
            >
                <Stack>
                    <StackItem>Status</StackItem>
                    <StackItem>{(dropdownItems) || <Skeleton size={SkeletonSize.lg} />}</StackItem>
                </Stack>
            </Modal>
        );
        return (
            <React.Fragment>
                <div
                    className="status-dropdown-column"
                    onClick={() => {
                        this.handleModalToggle();
                    }}
                >
                    {currentStatusName} <PencilAltIcon size="sm" />
                </div>
                {modal}
            </React.Fragment>
        );
    }
}

const mapDispatchToProps = dispatch => {
    return {
        addNotification: data => dispatch(addNotification(data)),
        changeStatus: (inventoryId, cve, statusId, callback) =>
            dispatch(changeSystemCveStatusAction(inventoryId, cve, statusId, callback))
    };
};

StatusDropdown.updateRef = () => {};

StatusDropdown.setCallback = updateFunc => {
    StatusDropdown.updateRef = updateFunc;
};

export default connect(
    null,
    mapDispatchToProps
)(StatusDropdown);
