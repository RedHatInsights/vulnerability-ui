import BaseDropdown from './BaseDropdown';
import { DropdownItem } from '@patternfly/react-core';
import { fireEvent, render, screen } from '@testing-library/react';
import configureStore from 'redux-mock-store';
import TestWrapper from '../../../Utilities/TestWrapper';
import '@testing-library/jest-dom';

const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

const item1_action = jest.fn();

describe('BaseDropdown component', () => {
    it('Should match snapshot when expanded', () => {
        const items = [
            <DropdownItem key="item1" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ];

        const { asFragment } = render(
            <TestWrapper store={ store }>
                <BaseDropdown dropdownItems={items} />
            </TestWrapper>
        );

        fireEvent.click(screen.getByRole('button', {
            name: /actions/i
        }));

        expect(asFragment()).toMatchSnapshot();
    })

    it('Should be disabled when disabled prop is passed', () => {
        const items = [
            <DropdownItem key="item1" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ];

        render(
            <TestWrapper store={ store }>
                <BaseDropdown dropdownItems={ items } disabled={ true } />
            </TestWrapper>
        );

        expect(screen.getByRole('button', {
            name: /actions/i
        })).toBeDisabled();
    })

    it('Should call the onClick handler when clicked', async () => {
        const items = [
            <DropdownItem data-testid="dropdown-item1" key="item1" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        render(
            <TestWrapper store={ store }>
                <BaseDropdown dropdownItems={items} />
            </TestWrapper>
        );

        fireEvent.click(screen.getAllByTestId('dropdown-toggle')[0]); // open dropdown
        fireEvent.click(screen.getByRole('menuitem', {
            name: /item 1/i
        })); // click first item

        expect(item1_action).toHaveBeenCalled();
    })
});
