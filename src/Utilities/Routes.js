import React, { useEffect, useState, lazy, Suspense, Fragment } from 'react';
import some from 'lodash/some';
import PropTypes from 'prop-types';
import { Redirect, Route, Switch, useLocation } from 'react-router-dom';
import { getSystems } from '../Helpers/APIHelper';
import { PATHS } from '../Helpers/constants';
import { intl } from './IntlProvider';
import messages from '../Messages';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';

const SystemsPage = lazy(() =>
    import(
        /* webpackChunkName: "Systems" */ '../Components/SmartComponents/SystemsPage/SystemsPage'
    )
);

const LandingPage = lazy(() =>
    import(
        /* webpackChunkName: "LandingPage" */ '../Components/SmartComponents/LandingPage/LandingPage'
    )
);

const Upgrade = lazy(() =>
    import(
        /* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'
    )
);

const CVEDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "CVEDetailsPage" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'
    )
);

const SystemDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "SystemDetailsPage" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'
    )
);
const Reports = lazy(() =>
    import(/* webpackChunkName: "Reports" */ '../Components/SmartComponents/Reports/ReportsPage')
);

const InsightsRoute = ({ component: Component, title, ...rest }) => {
    const [hasSystems, setHasSystems] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            const result = await getSystems();
            setHasSystems(result?.meta?.total_items > 0);
        };

        fetchData();
    }, []);

    if (title) {
        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];
        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;
    }

    return (
        <Route
            {...rest}
            render={routeProps => (
                !hasSystems ?
                    <AsyncComponent
                        appId="vulnerability_zero_state"
                        appName="dashboard"
                        module="./AppZeroState"
                        scope="dashboard"
                        ErrorComponent={<ErrorState />}
                        app="Vulnerability"
                    />
                    :
                    <Component {...routeProps} />
            )}
        />
    );
};

InsightsRoute.propTypes = {
    component: PropTypes.elementType,
    title: PropTypes.string
};

export const Routes = () => {
    let location = useLocation();
    let path = location.pathname;
    return (
        // TODO: Discuss with UX some nice loading placeholder
        <Suspense fallback={Fragment}>
            <Switch>
                <Redirect
                    from={PATHS.cvepagePath.to}
                    to={PATHS.systemDetailsPage.to}
                />

                <InsightsRoute
                    exact
                    path={PATHS.cveDetailsPage.to}
                    component={CVEDetailsPage}
                    title={intl.formatMessage(messages.cvesHeader)}
                />

                <InsightsRoute
                    exact
                    path={PATHS.systemDetailsPage.to}
                    component={SystemDetailsPage}
                />

                <InsightsRoute
                    exact
                    path={PATHS.home.to}
                    component={LandingPage}
                    title={intl.formatMessage(messages.cvesHeader)}
                />

                <InsightsRoute
                    exact
                    path={PATHS.cvesPage.to}
                    component={LandingPage}
                    title={intl.formatMessage(messages.cvesHeader)}
                />

                <InsightsRoute
                    exact
                    path={PATHS.systemsPage.to}
                    component={SystemsPage}
                    title={intl.formatMessage(messages.systemsHeader)}
                />

                <InsightsRoute
                    exact
                    path={PATHS.upgrade.to}
                    component={Upgrade}
                    title={intl.formatMessage(messages.upgradePageTitle)}
                />

                <InsightsRoute
                    exact
                    path={PATHS.reports.to}
                    component={Reports}
                    title={intl.formatMessage(messages.reportsPageTitle)}
                />
                <Route
                    render={() => (
                        some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />
                    )}
                />
            </Switch>
        </Suspense>
    );
};
