
import { routerParams, Vulnerabilities, VulnerabilitiesCves } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { InfoCircleIcon } from '@patternfly/react-icons';
import { Tooltip } from '@patternfly/react-core';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';
import { emptyCveList, fetchCveListByAccount } from '../../../Store/Actions/Actions';

class CVEs extends React.Component {
    constructor(props) {
        super(props);
    }

    componentWillUnmount() {
        this.props.emptyStore();
    }

    render() {
        const { entity } = this.props;
        const Component = (entity && Vulnerabilities) || VulnerabilitiesCves;
        const params = (entity && { entity }) || this.props;
        return <Component {...params} />;
    }
}

const mapDispatchToProps = () => {
    return {
        emptyStore: () => dispatchAction(emptyCveList())
    };
};

CVEs.defaultProps = {
    header: [
        { title: ' ', key: 'impact', width: 3 },
        { title: 'Name', key: 'synopsis', width: 10 },
        { title: 'Description', key: 'description', hasSort: false, width: 50 },
        {
            title: (
                <React.Fragment>
                    {'CVSS Base Score'} <Tooltip
                        position="right"
                        content={
                            <div>All CVEs use Common Vulnerability Scoring System v3 except where noted.</div>
                        }
                    >
                        <InfoCircleIcon />
                    </Tooltip>
                </React.Fragment>
            ),
            key: 'cvss_score',
            width: 10
        },
        { title: 'Systems Exposed', key: 'systems_affected', width: 3 },
        { title: 'Publish date', key: 'public_date', width: 10 }
    ],
    fetchResource: fetchCveListByAccount,
    dataMapper: createCveListByAccount,
    showAllCheckbox: true,
    defaultSort: '-public_date'
};

CVEs.propTypes = {
    dataMapper: propTypes.func,
    fetchResource: propTypes.func,
    header: propTypes.array,
    showAllCheckbox: propTypes.bool,
    entity: propTypes.string,
    emptyStore: propTypes.func,
    defaultSort: propTypes.any
};

export default routerParams(
    connect(
        null,
        mapDispatchToProps
    )(CVEs)
);
