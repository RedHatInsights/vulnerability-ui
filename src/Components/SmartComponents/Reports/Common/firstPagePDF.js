import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text, View } from '@react-pdf/renderer';
import messages from '../../../../Messages';
import tablePage from './tablePage';
import {
    PUBLIC_DATE_OPTIONS,
    getFilters, getCveReportFilters,
    SYSTEM_REPORT_FILTERS
} from '../../../../Helpers/constants';
import { intlFormatWithBold, getDefaultFilterData, getAffectingFilterTexts } from '../../../../Helpers/ReportsHelper';
import styles from './styles';
import CheckboxCustomFilter
    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';

const firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type, shouldUseHybridSystemFilter }) => {
    const CVE_REPORT_FILTERS = getCveReportFilters(shouldUseHybridSystemFilter);
    const FILTERS = getFilters(shouldUseHybridSystemFilter);
    // if data isn't converted to object convert it
    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {
        obj[item.key] = {
            filter: item.category,
            values: item.key === 'publish_date'
                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label
                : item.chips.map(({ name }) => name).join(', '),
            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component
                === CheckboxCustomFilter
                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)
                : null
        };
        return obj;
    }, {});

    let cveFilterStringSegments = [
        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },
        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },
        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },
        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },
        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },
        { name: 'advisory_available', msg: messages.CVEsPDFreportFiltersAdvisoryAvailable, lowercase: true },
        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }
    ];

    let systemsFilterStringSegments = [
        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },
        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }
    ];

    let filterStringSegments = type === 'cves' ? cveFilterStringSegments : systemsFilterStringSegments;

    // find and tag first present filter segment
    for (let i = 0; i < filterStringSegments.length; i++) {
        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {
            filterStringSegments[i].isFirst = true;
            break;
        }
    }

    // find and tag last present filter segment
    for (let i = filterStringSegments.length - 1; i >= 0; i--) {
        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {
            filterStringSegments[i].isLast = true;
            break;
        }
    }

    const affectingFilterText = getAffectingFilterTexts(meta.system_count.toString(), meta?.system_count_per_type || {});
    const affectingSystemsMessage = affectingFilterText[filtersBuilder.affecting?.values] || '';

    const DEFAULT_FILTER_DATA = getDefaultFilterData(shouldUseHybridSystemFilter);
    const generateCvesFiltersParagraph = () =>
        <Paragraph>
            {
                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,
                    {
                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',
                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,
                        score: (
                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values
                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +
                        DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),
                        published: (
                            filtersBuilder.publish_date && filtersBuilder.publish_date.values
                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)
                    }
                )
            }
            {
                filterStringSegments.map(filter => (
                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen
                ) && intlFormatWithBold(filter.msg,
                    {
                        values: filter.lowercase ?
                            filtersBuilder[filter.name].values.toLowerCase() :
                            filtersBuilder[filter.name].values,
                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'
                    }
                ))
            }
            {filtersBuilder.tags ? '.\n\n' : ''}
            {
                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +
                filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''
            }
            {
                filtersBuilder.tags?.values.length > 10 && ' '
                + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })
            }
            {'.\n\n'}
        </Paragraph>;

    const generateSystemsFiltersParagraph = () => {
        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;

        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (
            <Paragraph>
                {
                    intl.formatMessage(messages.systemsPDFreportSubHeader)
                }
                {
                    includedValues?.length === 1 && ((includedValues[0] !== 'false' || includedValues[0] !== 'none')
                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersDisabled)
                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersEnabled))
                }
                {
                    filterStringSegments.map(filter => (
                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen
                    ) && intlFormatWithBold(filter.msg,
                        {
                            values: filter.lowercase ?
                                filtersBuilder[filter.name].values.toLowerCase() :
                                filtersBuilder[filter.name].values,
                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')
                        }
                    ))
                }
                {'.\n\n'}
            </Paragraph>
        ) : null
        );
    };

    return (
        <Fragment key="first-section">
            {
                isReportDynamic && (
                    <Paragraph>
                        {intlFormatWithBold(messages.customReportIntroductionText)}
                    </Paragraph>
                )
            }

            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}

            {type === 'cves' && (
                <Paragraph>
                    <Text>
                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {
                            cve_count: meta.total_items.toString(),
                            system_count: meta.system_count.toString(),
                            affectingSystemsMessage
                        })}

                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&
                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {
                                knownExploitCount: meta.knownExploitCount.toString()
                            })
                        }
                    </Text>
                </Paragraph>
            )}

            {
                reportData && reportData.userNotes ?
                    (
                        <View style={styles.userNotes}>
                            <Paragraph style={styles.userNotesTitle}>
                                <Text style={styles.bold}>
                                    {intl.formatMessage(messages.customReportUserNoteLabel)}
                                </Text>
                            </Paragraph>
                            <Paragraph>
                                <Text>{reportData.userNotes}</Text>
                            </Paragraph>
                            <Paragraph>
                                {user && user.identity &&
                                    <Text style={styles.italic}>
                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {
                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`
                                        })}
                                    </Text>
                                }
                            </Paragraph>
                        </View>
                    ) : null
            }

            <View style={styles.mt16}>
                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}
            </View>
        </Fragment>
    );
};

firstPagePDF.defaultProps = {
    user: undefined
};

firstPagePDF.propTypes = {
    intl: PropTypes.any,
    filters: PropTypes.array,
    data: PropTypes.object,
    meta: PropTypes.object,
    reportData: PropTypes.object,
    isReportDynamic: PropTypes.bool,
    user: PropTypes.object,
    type: PropTypes.string
};

export default firstPagePDF;
