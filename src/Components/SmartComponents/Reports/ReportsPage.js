import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';
import useChrome from '@redhat-cloud-services/frontend-components/useChrome';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { FileAltIcon } from '@patternfly/react-icons';
import ReportConfigModal from '../Modals/ReportConfigModal';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';
import Header from '../../PresentationalComponents/Header/Header';
import {
    useDownloadReport,
    constructReportParameters,
    buildFilters
} from '../../../Helpers/ReportsHelper';
import {
    CVE_REPORT_FILTERS,
    DEFAULT_FILTER_DATA,
    CUSTOM_REPORT_DEFAULT_SORT,
    PERMISSIONS,
    PDF_REPORT_TEMPLATES,
    getReportFilename
} from '../../../Helpers/constants';
import styles from './Common/styles';
import { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useRbac } from '../../../Helpers/Hooks';
import NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';
import useDownloadCveReport from './downloadCveReport';

const ReportsPage = () => {
    const [[canDoAdvancedReporting, canReadVulnerabilities, canReadInventory], isLoading]
        = useRbac([PERMISSIONS.advancedReporting, PERMISSIONS.readVulnerabilityResults, PERMISSIONS.readHosts], '');

    const [isModalOpen, setModalOpen] = useState(false);
    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));
    const [userNotes, setUserNotes] = useState('');
    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));
    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);
    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);
    const [inheritGlobalTags, setInheritGlobalTags] = useState(true);

    const globalFilterTags = useSelector(({ ReportsPageStore }) => ReportsPageStore.parameters.tags) ?? [];
    const chrome = useChrome();

    const dispatch = useDispatch();

    useEffect(() => {
        return () => {
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const handleModalClose = () => {
        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));
        setUserNotes('');
        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));
        setFilterData(DEFAULT_FILTER_DATA);
        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);
        setModalOpen(false);
    };

    const dissectTag = tag => {
        const [namespace, keyValue] = tag.split('/');
        const [key, value] = keyValue.split('=');
        return { string: tag, namespace, key, value };
    };

    const downloadExecutiveReport = useDownloadReport(
        PDF_REPORT_TEMPLATES.executive,
        {},
        getReportFilename('executive')
    );

    const params = constructReportParameters({ ...filterData, tags: inheritGlobalTags
        ? globalFilterTags?.map(dissectTag) : filterData.tags }, sorterData);

    const filters = buildFilters({ ...filterData, tags: inheritGlobalTags
        ? globalFilterTags?.map(dissectTag) : filterData.tags });

    const downloadCveReport = useDownloadCveReport(
        params,
        filters,
        {
            columnsToInclude,
            reportTitle,
            userNotes
        }
    );

    const handleDownloadButton = async () => {
        const user = await chrome.auth.getUser();
        setModalOpen(false);
        downloadCveReport(user);
    };

    return (
        isLoading ? <Spinner centered /> :
            (canDoAdvancedReporting && canReadInventory) ? (
                <React.Fragment>
                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />
                    <Main>
                        <Grid hasGutter lg={3} md={4} sm={12}>
                            <GridItem>
                                <Card className="report-card">
                                    <CardTitle>
                                        <ChartPieSolid style={styles.pieChartIcon} />
                                        <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                            {intl.formatMessage(messages.executiveReportCardTitle)}
                                        </span>
                                    </CardTitle>
                                    <CardBody>
                                        {intl.formatMessage(messages.executiveReportCardDescription)}
                                    </CardBody>
                                    <CardFooter>
                                        <a onClick={() => downloadExecutiveReport()}>
                                            {intl.formatMessage(messages.executiveReportCardButton)}
                                        </a>
                                    </CardFooter>
                                </Card>
                            </GridItem>
                            {canReadVulnerabilities &&
                                <GridItem>
                                    <Card className="report-card">
                                        <CardTitle>
                                            <FileAltIcon size="lg" color="var(--pf-global--link--Color)" />
                                            <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                                {intl.formatMessage(messages.customReportCardTitle)}
                                            </span>
                                        </CardTitle>
                                        <CardBody>
                                            {intl.formatMessage(messages.customReportCardDescription)}
                                        </CardBody>
                                        <CardFooter>
                                            <a className="create-report" onClick={() => setModalOpen(true)}>
                                                {intl.formatMessage(messages.customReportCardButton)}
                                            </a>
                                        </CardFooter>
                                    </Card>
                                </GridItem>
                            }
                        </Grid>
                    </Main>
                    <ReportConfigModal
                        isOpen={isModalOpen}
                        columnsToInclude={columnsToInclude}
                        setColumnsToInclude={setColumnsToInclude}
                        filterData={filterData}
                        sorterData={sorterData}
                        userNotes={userNotes}
                        reportTitle={reportTitle}
                        setReportTitle={setReportTitle}
                        setUserNotes={setUserNotes}
                        setFilterData={setFilterData}
                        setSorterData={setSorterData}
                        handleModalClose={(handleModalClose)}
                        handleDownloadButton={handleDownloadButton}
                        inheritGlobalTags={inheritGlobalTags}
                        setInheritGlobalTags={setInheritGlobalTags}
                        globalFilterTags={globalFilterTags}
                    />
                </React.Fragment>
            ) : (
                <NoAccessPage
                    title={intl.formatMessage(messages.reportsPageTitle)}
                    emptyStateTitle={intl.formatMessage(messages.emptyStateNoAccessReportsPage)}
                />
            )
    );
};

export default ReportsPage;
