import { Tooltip } from '@patternfly/react-core';
import { ExternalLinkAltIcon, ServerAltIcon, ExclamationTriangleIcon, ArrowRightIcon } from '@patternfly/react-icons';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';
import React from 'react';
import { BUSINESS_RISK_OPTIONS, CUSTOMER_PORTAL_CVE_PATH, STATUS_OPTIONS, OPENSHIFT_CLUSTER_PATH } from './constants';
import { FormattedMessage } from 'react-intl';
import { InsightsSystemRule, InsightsNoSystemRule, InsightsNotVulnerable }
    from '../Components/PresentationalComponents/InsightsSystemRule/InsightsSystemRule';
import messages from '../Messages';

/**
 * Creates the tables rows for systems exposed table
 *
 * @param {Array} items fetched data
 * @param {Array} cveId CVE id
 *
 */
export const createExposedSystemsRows = ({ items: { data, meta }, cveId }) => {
    return data?.map(row => ({
        id: row.id,
        ...row.attributes,
        patchAccess: meta.patch_access || false,
        status: row.attributes.status_name,
        children: row.attributes.mitigation_reason
            ? <InsightsNotVulnerable cve={cveId} mitigationReason={row.attributes.mitigation_reason} />
            : row.attributes?.rule?.rule?.reason
                ? <InsightsSystemRule cve={cveId} rule={row.attributes.rule} />
                : <InsightsNoSystemRule cve={cveId} />
    }));

};

export function createSystemsListTable(affectedSystems) {
    let isLoading = affectedSystems.isLoading;
    if (!isLoading) {
        let payload = affectedSystems.payload.asMutable();
        let { data, meta } = payload;
        const dataWithStatus = data.map(item => ({
            ...item,
            attributes: {
                ...item.attributes,
                status: (
                    <span>
                        {item.attributes.cve_status_id !== item.attributes.status_id ? (
                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>
                                <ServerAltIcon />
                            </Tooltip>
                        ) : (
                            ''
                        )}{' '}
                        {item.attributes.status_id !== undefined &&
                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}
                    </span>
                )
            }
        }));
        return { data: dataWithStatus, meta, isLoading };
    }

    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };
}

export function createCveDetailsPage(cves) {
    let isLoading = cves.isLoading;
    let error = cves.error;
    if (!isLoading && cves?.payload?.data) {
        let payload = cves.payload.asMutable();
        let { data, meta } = payload;
        let  clusterCount  = cves?.clusterDetails?.payload.count;
        data = {
            impact: data.attributes.impact,
            public_date: processDate(data.attributes.public_date),
            description: data.attributes.description,
            synopsis: data.attributes.synopsis,
            rh_link: createRHDBLink(data.attributes.synopsis, messages.RHDBLink),
            mitre_link: createMitreLink(data.attributes.synopsis),
            cluster_link: createClusterLink(clusterCount, data.id, messages.clusterLink),
            cvss3_score: data.attributes.cvss3_score,
            cvss2_score: data.attributes.cvss2_score,
            cvss2_metrics: data.attributes.cvss2_metrics,
            cvss3_metrics: data.attributes.cvss3_metrics,
            business_risk: BUSINESS_RISK_OPTIONS.find(
                option => option.value === data.attributes.business_risk_id.toString()
            ).label,
            business_risk_justification: data.attributes.business_risk_text,
            business_risk_id: data.attributes.business_risk_id,
            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,
            status_id: data.attributes.status_id,
            status_justification: data.attributes.status_text,
            systems_status_detail: data.attributes.systems_status_detail,
            systems_status_divergent: data.attributes.systems_status_divergent,
            rules: data.attributes.rules,
            celebrity_name: data.attributes.celebrity_name,
            known_exploit: data.attributes.known_exploit,
            affected_but_not_vulnerable: data.attributes.affected_but_not_vulnerable
        };

        return { data, meta, isLoading };
    }

    return { data: [], meta: {}, isLoading, error };
}

export function createRHDBLink(item, link = messages.RHDBLink, props) {
    return (
        <a target="_blank" rel="noopener noreferrer" href={`${CUSTOMER_PORTAL_CVE_PATH}/${item}`} {...props}>
            {<FormattedMessage {...link} />}{<ExternalLinkAltIcon className="pf-u-ml-sm" />}
        </a>
    );
}

export function createMitreLink(item) {
    return (
        <a target="_blank" rel="noopener noreferrer" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>
            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}
        </a>
    );
}

export function createClusterLink(
    clusterCount,
    cveName,
    props
) {
    let hasImpactingCusters = clusterCount > 0;
    return (
        hasImpactingCusters && (
            <a
                className="border-left"
                target="_blank"
                rel="noopener noreferrer"
                href={`${OPENSHIFT_CLUSTER_PATH}/${cveName}`}
                {...props}
            >
                <ExclamationTriangleIcon className="pf-u-mr-sm pf-u-ml-sm alertColor " />{' '}
                <FormattedMessage {...messages.clusterLink} values={{ count: clusterCount }}/>
                <ArrowRightIcon className="pf-u-ml-sm"	/>
            </a>
        )
    );
}

export const cveTableRowActions = (methods, rowIndex) => {
    return (rowIndex % 2 === 0) ?
        [
            {
                title: <FormattedMessage {...messages.editBusinessRisk} />,
                onClick: (event, rowId, rowData) =>
                    methods.showBusinessRiskModal([
                        {
                            id: rowData.id,
                            business_risk_id: rowData.business_risk_id,
                            justification: rowData.business_risk_justification
                        }
                    ], false)
            },
            {
                title: <FormattedMessage {...messages.editStatus} />,
                onClick: (event, rowId, rowData) =>
                    methods.showStatusModal([
                        {
                            id: rowData.id,
                            status_id: rowData.status_id,
                            justification: rowData.status_justification,
                            exposed_systems_count: rowData.exposed_systems_count
                        }
                    ], false)
            }
        ] : null;
};

export const systemCveTableRowActions = (methods, entity, rowIndex) => {
    return (rowIndex % 2 === 0) ?
        [{
            title: <FormattedMessage {...messages.editStatus} />,
            onClick: (event, rowId, rowData) =>
                methods.showStatusModal([
                    {
                        id: rowData.id,
                        attributes: {
                            display_name: entity.display_name,
                            status_id: rowData.status_id,
                            cve_status_id: rowData.cve_status_id,
                            status_text: rowData.status_justification,
                            cve_status_text: rowData.cve_status_justification
                        }

                    }
                ], false, entity)
        }] : null;
};

export const systemExposedTableRowActions = (showStatusModal, cve) => {
    return [{
        title: <FormattedMessage {...messages.editStatus} />,
        onClick: (event, rowId, rowData) => {
            showStatusModal(
                [{
                    id: cve.id,
                    status_id: cve.status_id,
                    justification: cve.justification
                }],
                [{
                    id: rowData.id,
                    display_name: rowData.display_name,
                    status_id: rowData.status_id,
                    justification: rowData.status_text
                }]
            );
        }
    }];
};

export const systemTableRowActions = (rowData, optOutFunc) => [
    {
        title: (
            rowData.opt_out
                ? <FormattedMessage {...messages.systemKebabIncludeAnalysis} values={{ count: 1 }} />
                : <FormattedMessage {...messages.systemKebabExcludeAnalysis} values={{ count: 1 }} />
        ),
        onClick: (event, rowId, rowData) => {
            optOutFunc([rowData], rowData.display_name, !rowData.opt_out);
        }
    }
];
