// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CvssVector Should render CVSSv3 when given both 1`] = `
<injectIntl(CvssVector)
  cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
  cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
>
  <CvssVector
    cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
    cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatHTMLMessage": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render with CVSSv2 1`] = `
<injectIntl(CvssVector)
  cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
>
  <CvssVector
    cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatHTMLMessage": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render with CVSSv3 1`] = `
<injectIntl(CvssVector)
  cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
>
  <CvssVector
    cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatHTMLMessage": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render without parameters 1`] = `
<injectIntl(CvssVector)>
  <CvssVector
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatHTMLMessage": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
        <WithLoader
          loading={true}
        >
          <Skeleton
            isDark={false}
            size="lg"
          >
            <div
              className="ins-c-skeleton ins-c-skeleton__lg"
            >
               
            </div>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;
