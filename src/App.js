
import React, { useEffect, useState, useMemo, Fragment } from 'react';
import PropTypes from 'prop-types';
import notifications from '@redhat-cloud-services/frontend-components-notifications/cjs/notifications';
import routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';
import NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/cjs/NotificationPortal';
import ReducerRegistry from './Utilities/ReducerRegistry';
import { Routes } from './Utilities/Routes';
import NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';
import './App.scss';

ReducerRegistry.register({ notifications });

const App = ({ history, location }) => {
    const [access, setAccess] = useState(true);

    const appNavClick = useMemo(() => ({
        cves(redirect) { insights.chrome.appNavClick({ id: 'cves', redirect }); },
        systems(redirect) { insights.chrome.appNavClick({ id: 'systems', redirect }); },
        reports(redirect) { insights.chrome.appNavClick({ id: 'reports', redirect }); }
    }), []);

    useEffect(() => {
        const permissionList = ['vulnerability:*:*', 'vulnerability:vulnerability:*'];

        insights.chrome.init();
        insights.chrome.identifyApp('vulnerability');

        if (insights.chrome.hideGlobalFilter) {
            insights.chrome.hideGlobalFilter();
        }

        (async () => {
            const userPermissions = await insights.chrome.getUserPermissions('vulnerability');
            setAccess(userPermissions.some(access => permissionList.includes(access.permission)));
        })();

        const unregister =  insights.chrome.on('APP_NAVIGATION', event => {
            if (event.domEvent) {
                history.push(`/${event.navId}`);
                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves;
            }
        });

        return () => unregister();

    }, [appNavClick]);

    useEffect(() => {
        const baseComponentUrl = location.pathname.split('/')[1];
        appNavClick[baseComponentUrl] !== undefined && appNavClick[baseComponentUrl](false);
    }, [appNavClick, location]);

    return (
        access ?
            <Fragment>
                <NotificationsPortal />
                <Routes />
            </Fragment>
            : <NoAccessPage/>
    );

};

App.propTypes = {
    location: PropTypes.object,
    history: PropTypes.object
};

export default routerParams(App);
