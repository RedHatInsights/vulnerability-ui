import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { FileAltIcon } from '@patternfly/react-icons';
import DownloadExecutive from './DownloadExecutive';
import ReportConfigModal from '../Modals/ReportConfigModal';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';
import Header from '../../PresentationalComponents/Header/Header';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';
import { buildFilters, constructReportParameters } from '../../../Helpers/ReportsHelper';
import { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA, CUSTOM_REPORT_DEFAULT_SORT, PERMISSIONS } from '../../../Helpers/constants';
import styles from './Common/styles';
import { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useRbac } from '../../../Helpers/Hooks';
import NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';
import { getCveListByAccount } from '../../../Helpers/APIHelper';

const ReportsPage = () => {
    const [[canDoAdvancedReporting, canReadVulnerabilities, canReadInventory], isLoading]
        = useRbac([PERMISSIONS.advancedReporting, PERMISSIONS.readVulnerabilityResults, PERMISSIONS.readHosts], '');

    const [isModalOpen, setModalOpen] = useState(false);
    const [downloadCVEReport, setDownloadCVEReport] = useState(false);
    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));
    const [userNotes, setUserNotes] = useState('');
    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));
    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);
    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);
    const [inheritGlobalTags, setInheritGlobalTags] = useState(true);
    const [cvesWithoutErrata, setCvesWithoutErrata] = useState(false);

    const globalFilterTags = useSelector(({ ReportsPageStore }) => ReportsPageStore.parameters.tags) ?? [];

    const dispatch = useDispatch();

    useEffect(() => {
        // this dummy request is to get the value of cves_without_errata feature flag
        // we only care about meta section of this response so the limit is 1
        getCveListByAccount({ limit: 1 }).then(response => {
            response?.meta?.cves_without_errata && setCvesWithoutErrata(true);
        });

        return () => {
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const handleModalClose = () => {
        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));
        setUserNotes('');
        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));
        setFilterData(DEFAULT_FILTER_DATA);
        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);
        setDownloadCVEReport(false);
        setModalOpen(false);
    };

    const handleDownloadButton = () => {
        setDownloadCVEReport(true);
        setModalOpen(false);
    };

    const dissectTag = tag => {
        const [namespace, keyValue] = tag.split('/');
        const [key, value] = keyValue.split('=');
        return { string: tag, namespace, key, value };
    };

    return (
        isLoading ? <Spinner centered /> :
            (canDoAdvancedReporting && canReadInventory) ? (
                <React.Fragment>
                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />
                    <Main>
                        <Grid hasGutter lg={3} md={4} sm={12}>
                            <GridItem>
                                <Card className="report-card">
                                    <CardTitle>
                                        <ChartPieSolid style={styles.pieChartIcon} />
                                        <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                            {intl.formatMessage(messages.executiveReportCardTitle)}
                                        </span>
                                    </CardTitle>
                                    <CardBody>
                                        {intl.formatMessage(messages.executiveReportCardDescription)}
                                    </CardBody>
                                    <CardFooter>
                                        <DownloadExecutive />
                                    </CardFooter>
                                </Card>
                            </GridItem>
                            {canReadVulnerabilities &&
                                <GridItem>
                                    <Card className="report-card">
                                        <CardTitle>
                                            <FileAltIcon size="lg" color="var(--pf-global--link--Color)" />
                                            <span className="pf-u-ml-sm" style={styles.cardTitle}>
                                                {intl.formatMessage(messages.customReportCardTitle)}
                                            </span>
                                        </CardTitle>
                                        <CardBody>
                                            {intl.formatMessage(messages.customReportCardDescription)}
                                        </CardBody>
                                        <CardFooter>
                                            <a className="create-report" onClick={() => setModalOpen(true)}>
                                                {intl.formatMessage(messages.customReportCardButton)}
                                            </a>
                                        </CardFooter>
                                    </Card>
                                </GridItem>
                            }
                        </Grid>
                    </Main>
                    <ReportConfigModal
                        isOpen={isModalOpen}
                        columnsToInclude={columnsToInclude}
                        setColumnsToInclude={setColumnsToInclude}
                        filterData={filterData}
                        sorterData={sorterData}
                        userNotes={userNotes}
                        reportTitle={reportTitle}
                        setReportTitle={setReportTitle}
                        setUserNotes={setUserNotes}
                        setFilterData={setFilterData}
                        setSorterData={setSorterData}
                        handleModalClose={(handleModalClose)}
                        handleDownloadButton={handleDownloadButton}
                        inheritGlobalTags={inheritGlobalTags}
                        setInheritGlobalTags={setInheritGlobalTags}
                        globalFilterTags={globalFilterTags}
                        cvesWithoutErrata={cvesWithoutErrata}
                    />

                    {downloadCVEReport && <DownloadCVEsReport
                        key="download"
                        reportData={{
                            header: columnsToInclude,
                            reportTitle,
                            userNotes
                        }}
                        showButton={false}
                        onSuccess={handleModalClose}
                        params={constructReportParameters({ ...filterData, tags: inheritGlobalTags
                            ? globalFilterTags?.map(dissectTag) : filterData.tags }, sorterData)}
                        filters={buildFilters({ ...filterData, tags: inheritGlobalTags
                            ? globalFilterTags?.map(dissectTag) : filterData.tags })}
                        isReportDynamic
                        label={messages.configModalExportReport}
                    />}
                </React.Fragment>
            ) : (
                <NoAccessPage
                    title={intl.formatMessage(messages.reportsPageTitle)}
                    emptyStateTitle={intl.formatMessage(messages.emptyStateNoAccessReportsPage)}
                />
            )
    );
};

export default ReportsPage;
