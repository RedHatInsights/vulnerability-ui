import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';
import { ServerAltIcon } from '@patternfly/react-icons';
import { StyledText, StyledConstants } from '@patternfly/react-styled-system';
import propTypes from 'prop-types';
import React from 'react';
import { STATUS_OPTIONS } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

const SnippetWithPopover = props => {
    const { type, row } = props;
    const {
        business_risk_text: businessRiskJustification,
        status: systemStatus,
        cve_status_id: cveStatusId,
        status_text: statusJustification,
        status_id: systemStatusId
    } = row.attributes;
    const hasDefaultStatus = systemStatusId === 0 && (cveStatusId === systemStatusId) && statusJustification === null;

    const brPopoverContent = (
        <TextContent>
            <Stack>
                <StackItem>
                    <StyledText
                        fontWeight={StyledConstants.fontWeights.bold}
                        fontSize={StyledConstants.fontSizes.sm}
                        lineHeight={StyledConstants.lineHeights.sm}
                    >
                        <FormattedMessage {...messages.justificationNote} />
                    </StyledText>
                </StackItem>
                <StackItem>{businessRiskJustification || '--'}</StackItem>
            </Stack>
        </TextContent>
    );

    const statusPopoverContent = (
        <Stack>
            <StackItem>
                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                >
                    <FormattedMessage {...messages.cveSystemPairStatus} />
                </StyledText>
                {systemStatus || '--'}

                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                    style={{ marginTop: 'var(--pf-global--spacer--sm)' }}
                >
                    <FormattedMessage {...messages.justificationNote} />
                </StyledText>
                {statusJustification || '--'}
            </StackItem>
        </Stack>
    );

    const footerContent = (
        <Stack>
            <StackItem>
                <TextContent>
                    <hr className={'splitter'} />
                </TextContent>
                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                    style={{ marginTop: 'var(--pf-global--spacer--sm)' }}
                >
                    <FormattedMessage {...messages.cveStatus} />
                </StyledText>
            </StackItem>
            <StackItem>
                {STATUS_OPTIONS.find(option => option.value === cveStatusId.toString()).label || '--'}
            </StackItem>
        </Stack>
    );

    const buttonStyle = {
        wordBreak: 'normal',
        color: hasDefaultStatus ? 'black' : '',
        whiteSpace: 'unset',
        maxWidth: '131px'
    };

    return (
        <Popover bodyContent={type === 0 ? brPopoverContent : statusPopoverContent} headerContent={''}
            aria-label={'Business risk popover'} position="left" footerContent={footerContent}>

            <Button variant="link"
                isDisabled={hasDefaultStatus}
                style={buttonStyle}>
                {cveStatusId !== systemStatusId ? (
                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>
                        <ServerAltIcon  className='pf-u-m-l'/>
                    </Tooltip>
                ) : ('')}
                {' '}{STATUS_OPTIONS.find(option => option.value === systemStatusId.toString()).label}
            </Button>
        </Popover>
    );
};

SnippetWithPopover.propTypes = {
    type: propTypes.any,
    row: propTypes.any
};
export default SnippetWithPopover;
