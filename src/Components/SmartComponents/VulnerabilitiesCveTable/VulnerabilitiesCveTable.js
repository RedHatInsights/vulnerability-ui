import React from 'react';
import './VulnerabilitiesCveTable.scss';
import { Table, Pagination, Input, SortDirection, routerParams } from '@red-hat-insights/insights-frontend-components';
import { connect } from 'react-redux';
import { fetchCVEsWithSystems } from '../../../Store/Actions/CVEActions';
import { sCvesWithSystemsTable } from '../../../Store/Selectors/CVESelectors';
import propTypes from 'prop-types';
import { Grid, GridItem } from '@patternfly/react-core';
import { SearchIcon } from '@patternfly/react-icons';
import orderBy from 'lodash/orderBy';

class VulnerabilitiesCveTable extends React.Component {
    constructor(props) {
        super(props);
        this.sort = this.sort.bind(this);
        this.filter = this.filter.bind(this);
        this.state = {
            cveList: [],
            filterValue: '',
            sortBy: {
                index: '',
                direction: SortDirection.up
            }
        };
    }

    static getDerivedStateFromProps(props, state) {
        if (state.cveList === undefined || (state.cveList.length === 0 && state.filterValue === '')) {
            return { ...state, cveList: props.cveTableRows };
        }

        return {};
    }
    componentDidMount() {
        this.props.fetchData();
    }

    filter(value) {
        let filtered = this.props.cveTableRows.filter(item => item.synopsis.indexOf(value) !== -1);
        this.setState({ ...this.state, cveList: filtered, filterValue: value }, () =>
            this.sort(this.state.sortBy.index, this.state.sortBy.direction)
        );
    }

    sort(key, value) {
        let sorted = this.state.cveList;
        let direction = value === SortDirection.down ? 'desc' : 'asc';
        switch (parseInt(key)) {
            case 0:
            case 4:
                sorted = orderBy(sorted, [item => item.cells[4].props.severity], [direction]);
                break;
            case 1:
                sorted = orderBy(sorted, [item => item.cells[key].props.children], [direction]);
                break;
            case 2:
                sorted = orderBy(sorted, [item => new Date(item.cells[key])], [direction]);
                break;
            case 3:
                sorted = orderBy(
                    sorted,
                    [item => item.cells[key].props.children.props.children[0].props.children.props.children],
                    [direction]
                );
                break;
            case 5:
                sorted = orderBy(sorted, [item => item.cells[key]], [direction]);
                break;
        }

        this.setState({ ...this.state, cveList: sorted, sortBy: { index: key, direction: value } });
    }
    handleRedirect(key) {
        this.props.history.push('/cves/' + this.state.cveList[key].synopsis);
    }
    render() {
        return (
            <React.Fragment>
                <Grid gutter="sm">
                    <GridItem span={3}>
                        <label htmlFor="search">Search: </label>
                        <Input
                            id="search"
                            type="text"
                            style={{ width: '200px' }}
                            onChange={event => this.filter(event.target.value)}
                        />{' '}
                        <SearchIcon style={{ paddingTop: '4px' }} />
                    </GridItem>

                    <GridItem span={12}>
                        <Table
                            header={['Impact', 'Synopsis', 'Public date', 'Affected Systems', 'Total Risk', 'Description']}
                            rows={this.state.cveList}
                            onRowClick={(event, key) => this.handleRedirect(key)}
                            onSort={(event, key, value) => this.sort(key, value)}
                            sortBy={this.state.sortBy}
                            footer={
                                <Pagination
                                    numberOfItems={
                                        this.state.filterValue === '' || this.state.cveList.length === 11
                                            ? 112210
                                            : this.state.cveList.length
                                    }
                                    itemsPerPage={10}
                                    pages={2500}
                                />
                            }
                        />
                    </GridItem>
                </Grid>
            </React.Fragment>
        );
    }
}
function mapStateToProps(state) {
    return {
        cve: state.CVEStore.cveListWithSystems,
        cveTableRows: sCvesWithSystemsTable(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatch(fetchCVEsWithSystems())
    };
};

VulnerabilitiesCveTable.propTypes = {
    history: propTypes.object,
    cveTableRows: propTypes.array,
    fetchData: propTypes.func
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCveTable)
);
