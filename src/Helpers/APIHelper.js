let BASE_ROUTE = '/api/vulnerability/v1';
import { GitApi } from '@redhat-cloud-services/vulnerabilities-client';
import { SystemProfileApi } from '@redhat-cloud-services/host-inventory-client';
import instance from '../Utilities/interceptors';
import { constructParameters } from './MiscHelper';

let api = new GitApi(undefined, BASE_ROUTE, instance);

const INVENTORY_API_BASE = '/api/inventory/v1';
const systemProfile = new SystemProfileApi(undefined, INVENTORY_API_BASE, instance);

const defaultParams = [
    'filter',
    'limit',
    'offset',
    'page',
    'page_size',
    'sort'
];

export function getCveDetails(synopsis) {
    const result = api.getCveDetails(synopsis);
    return result;
}

export function getSystemDetails(system) {
    const result = api.getSystemDetails(system);
    return result;
}

export function setSystemCveStatus(params) {
    let result = api.setStatus(params);
    return result;
}

export function optOutSystems(systems, optOut) {
    const data = { opt_out: optOut, inventory_id: new Array(...systems) };
    let result = api.setSystemsOptOut(data);
    return result;
}

export function setBusinessRisk(params) {
    let result = api.setCveBusinessRisk(params);
    return result;
}

export function setCveStatus(params) {
    let result = api.setCveStatus(params);
    return result;
}

/**
 * /vulnerabilities/cves
 * /vulnerabilities/cves/ids
 */
let cveParams = [
    'cvss_from',
    'cvss_to',
    'public_from',
    'public_to',
    'impact',
    'data_format',
    'business_risk_id',
    'status_id',
    'rule_presence',
    'tags',
    'sap_sids',
    'sap_system',
    'known_exploit',
    'affecting',
    'rhel_version'
];

export function getCveListByAccount(apiProps) {
    let parameterNames = [
        ...defaultParams,
        ...cveParams,
        'report',
        'advanced_report',
        'ansible',
        'mssql'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getCveList(...parameterArray);
    return result;
}

export function getCveIdsList(apiProps) {
    let parameterNames = [
        ...defaultParams,
        ...cveParams,
        'ansible',
        'mssql'
    ];

    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getCveIdsList(...parameterArray);
    return result;
}

/**
 * /cves/ID/affected_systems
 */
let systemsByCVEparams = [
    'status_id',
    'data_format',
    'uuid',
    'rule_key',
    'rule_presence',
    'rule',
    'tags',
    'sap_sids',
    'sap_system',
    'show_advisories',
    'advisory',
    'rhel_version',
    'first_reported_from',
    'first_reported_to',
    'advisory_available',
    'remediation'
];

export function getAffectedSystemsByCVE({ id, ...apiProps }) {
    let parameterNames = [
        ...defaultParams,
        ...systemsByCVEparams,
        'report',
        'ansible',
        'mssql'
    ];

    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getAffectedSystemsByCve(id, ...parameterArray);
    return result;
}

export function getAffectedSystemsIdsByCve({ id, ...apiProps }) {
    let parameterNames = [
        ...defaultParams,
        ...systemsByCVEparams,
        'ansible',
        'mssql'
    ];

    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getAffectedSystemsIdsByCve(id, ...parameterArray);
    return result;
}

/**
 * /systems/ID/cves
 * /systems/ID/cves/ids
 */
let cveBySystemParams = [
    'cvss_from',
    'cvss_to',
    'public_from',
    'public_to',
    'impact',
    'status_id',
    'data_format',
    'business_risk_id',
    'rule_presence',
    'show_advisories',
    'advisory',
    'rule_key',
    'known_exploit',
    'first_reported_from',
    'first_reported_to',
    'advisory_available',
    'remediation'
];

export function getCveListBySystem(apiProps) {
    const { system } = apiProps;
    let parameterNames = [
        ...defaultParams,
        ...cveBySystemParams,
        'report'
    ];

    if (apiProps && system) {
        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);
        const params = parameterNames.map(item => apiProps[item]);
        return api.getCveListBySystem(system, ...params).catch(err => {
            if (err && err.status === '404') {
                return { errors: err };
            }

            throw err;
        });
    }
}

export function getCveIdsBySystem(apiProps) {
    const { system } = apiProps;
    let parameterNames = [
        ...defaultParams,
        ...cveBySystemParams
    ];

    if (apiProps && system) {
        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);
        const params = parameterNames.map(item => apiProps[item]);
        return api.getCveIdsBySystem(system, ...params).catch(err => {
            if (err && err.status === '404') {
                return { errors: err };
            }

            throw err;
        });
    }
}

/**
 * /systems/ids
 * /systems
 */
let systemsParams = [
    'data_format',
    'stale',
    'uuid',
    'tags',
    'sap_sids',
    'sap_system',
    'excluded',
    'rhel_version'
];

export function getSystems(apiProps) {
    let parameterNames = [
        ...defaultParams,
        ...systemsParams,
        'report',
        'ansible',
        'mssql'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getSystemsList(...parameterArray);
    return result;
}

export function getSystemsIds(apiProps) {
    let parameterNames = [
        ...defaultParams,
        ...systemsParams
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getSystemsIds(...parameterArray);
    return result;
}

export function getAnnouncement() {
    let result = api.getAnnouncement();
    return result;
}

export function getDashbar(apiProps) {
    let parameterNames = [
        'tags',
        'sap_sids',
        'sap_system',
        'ansible',
        'mssql'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getDashbar(...parameterArray);
    return result;
}

export function getOperatingSystems() {
    return systemProfile.apiSystemProfileGetOperatingSystem();
}

export function fetchPdfReport(template, filters) {
    const CRC_PDF_GENERATE_API = '/api/crc-pdf-generator/v1/generate';
    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);

    return fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },

        body: JSON.stringify({
            service: 'vulnerability',
            template,
            params: {
                ...filters
            }
        })
    }, 50000)
        .then((response) => response.blob());
}
