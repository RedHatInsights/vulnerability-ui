import { 
    FilterNotFoundForCVE,
    FilterNotFoundForSystem,
    EmptyCVEListForSystem,
    EmptyExcludedSystem,
    EmptyCVEList,
    EmptyVulnerabilityData
} from './EmptyStates'
import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';
import toJson from 'enzyme-to-json';

describe('Empty state', () => {
    it('should render FilterNotFoundForCVE', () => {
        const wrapper = mount(<IntlProvider locale="en">{FilterNotFoundForCVE}</IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a')
        expect(link.prop('href')).toBe('https://access.redhat.com/security/team/contact/')
    })

    it('should render FilterNotFoundForSystem', () => {
        const wrapper = mount(<IntlProvider locale="en">{FilterNotFoundForSystem}</IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a')
        expect(link.prop('href')).toBe('https://access.redhat.com/security/team/contact/')
    })

    it('should render EmptyCVEListForSystem', () => {
        const wrapper = mount(<IntlProvider locale="en">{EmptyCVEListForSystem}</IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a')
        expect(link.prop('href')).toBe('https://access.redhat.com/security/team/contact/')
    })

    it('should render EmptyExcludedSystem', () => {
        const mockAction = jest.fn();
        const wrapper = mount(<IntlProvider locale="en"><EmptyExcludedSystem buttonAction={mockAction} /></IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a').simulate('click')
        expect(mockAction).toHaveBeenCalled()
    })

    it('should render EmptyCVEList', () => {
        const wrapper = mount(<IntlProvider locale="en">{EmptyCVEList}</IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a')
        expect(link.prop('href')).toBe('https://access.redhat.com/security/team/contact/')
    })

    it('should render EmptyVulnerabilityData', () => {
        const wrapper = mount(<IntlProvider locale="en">{EmptyVulnerabilityData}</IntlProvider>);
        expect(toJson(wrapper)).toMatchSnapshot();

        const link = wrapper.find('a')
        expect(link.prop('href')).toBe('http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted')
    })

})
