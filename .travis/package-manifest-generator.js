#!/usr/bin/env node

const fs = require('fs');
const [inputFile, buildVer = 'latest', listBundled = false] = process.argv.slice(2);
let deps = {};

function processPackageName(node) {
    const version = (node.from && 'NOVER') || node.version;
    const packageName = `mgmt_services:${buildVer}:vulnerability-ui/${node.name}@${version}`;
    deps[packageName] = packageName;
}

function processPackage(node) {
    
    if (node.bundled && listBundled !== 'bundled') {
        return;
    }

    node.name && processPackageName(node);
    node.dependencies && processDeps(node);
}

function processDeps(parent) {
    for (const [name, depOb] of Object.entries(parent.dependencies)) {
        if (depOb.dev === false || depOb.dev === undefined) {
            processPackage({ ...depOb, name: name });
        }
    }
}

try {
    const fileContent = fs.readFileSync(inputFile);
    let content = JSON.parse(fileContent);
    processDeps(content);
    const sortedDeps = Object.values(deps).sort();
    const file = fs.createWriteStream('vulnerability-ui.txt');
    sortedDeps.forEach(value => file.write(`${value}\n`));
    file.end();
} catch (e) {
    console.log(e);
    process.exit(1);
}
