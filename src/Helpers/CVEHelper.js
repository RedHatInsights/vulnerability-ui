import { ExternalLinkAltIcon } from '@patternfly/react-icons';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import React from 'react';
import StatusDropdown from '../Components/SmartComponents/StatusDropdown/StatusDropdown';
import { businessRiskOptions } from './constants';

export function createExposedSystemsTable(affectedSystems) {
    let isLoading = affectedSystems.isLoading;
    if (!isLoading) {
        let payload = affectedSystems.payload.asMutable();
        let { data, meta } = payload;
        const dataWithStatus = data.map(item => ({
            ...item,
            attributes: {
                ...item.attributes,
                status: (
                    <span>
                        <StatusDropdown
                            currentStatusName={item.attributes.status_name}
                            currentStatusId={item.attributes.status_id}
                            systemId={item.id}
                            cveName={affectedSystems.cve}
                            hasNotification
                        />
                    </span>
                )
            }
        }));
        return { data: dataWithStatus, meta, isLoading };
    }

    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };
}

export function createCveDetailsPage(cves) {
    let isLoading = cves.isLoading;
    let error = cves.error;
    if (!isLoading && !error) {
        let payload = cves.payload.asMutable();
        let { data, meta } = payload;

        data = {
            impact: data.attributes.impact,
            public_date: processDate(data.attributes.public_date),
            description: data.attributes.description,
            synopsis: data.attributes.synopsis,
            rh_link: createRHDBLink(data.attributes.synopsis),
            mitre_link: createMitreLink(data.attributes.synopsis),
            cvss3_score: data.attributes.cvss3_score,
            cvss2_score: data.attributes.cvss2_score,
            cvss2_metrics: data.attributes.cvss2_metrics,
            cvss3_metrics: data.attributes.cvss3_metrics,
            business_risk: businessRiskOptions.find(option => option.value === data.attributes.business_risk_id.toString()).label,
            business_risk_justification: data.attributes.business_risk_text,
            business_risk_id: data.attributes.business_risk_id
        };

        return { data, meta, isLoading };
    }

    return { data: [], meta: {}, isLoading, error };
}

export function createRHDBLink(item) {
    return (
        <a target="_blank" rel="noopener noreferrer" href={'https://access.redhat.com/security/cve/' + item}>
            View in Red Hat CVE database <ExternalLinkAltIcon />
        </a>
    );
}

export function createMitreLink(item) {
    return (
        <a target="_blank" rel="noopener noreferrer" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>
            MITRE Database <ExternalLinkAltIcon />
        </a>
    );
}
