import LandingPage from './LandingPage';
import TestWrapper from '../../../Utilities/TestWrapper';
import { render, screen } from '@testing-library/react';
import configureStore from 'redux-mock-store';
import { cveState } from '../mockData.fixtures';
import { initialState } from '../../../Store/Reducers/CVEsStore';
import { useSelector } from 'react-redux';
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false],
    useHybridSystemFilterFlag: jest.fn(() => false)
}));

jest.mock('../../../Store/Actions/Actions', () => ({
    ...jest.requireActual('../../../Store/Actions/Actions'),
    fetchCveListByAccount: () => ({
        type: 'FETCH_CVE_LIST',
        payload: new Promise(() => {})
    })
}));

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));

jest.mock('@unleash/proxy-client-react', () => ( {
    ...jest.requireActual('@unleash/proxy-client-react'),
    useFlag: () => true, 
    useFlagsStatus: () => ({ flagsReady: true })
}));

jest.mock('../../../Helpers/APIHelper');

useSelector.mockImplementation(callback => {
    return callback({ CVEsStore: cveState });
});

const mockStore = configureStore([]);
const store = mockStore(initialState);


describe('CVEs: ', () => {
    it('Should match the snapshot', () => {
        const { asFragment } = render(
            <TestWrapper store={ store }>
                <LandingPage />
            </TestWrapper>
        );
        expect(asFragment()).toMatchSnapshot();
    });

    it('Should render Header with props showBreadcrumb = false', () => {
        render(
            <TestWrapper store={ store }>
                <LandingPage />
            </TestWrapper>
        );

        expect(screen.getByRole('heading', { name: 'CVEs' })).toBeVisible();
        expect(screen.queryAllByTestId('PfBreadcrumb')).toHaveLength(0);
    });

    it('Should render VulnerabilitiesCves', () => {
        render(
            <TestWrapper store={ store }>
                <LandingPage />
            </TestWrapper>
        );

        expect(screen.getByRole('grid', { name: 'Vulnerability CVE table' })).toBeVisible();
    });
});
