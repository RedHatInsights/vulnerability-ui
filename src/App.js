
import React, {
    useEffect,
    useState,
    useMemo,
    Fragment
} from 'react';
import { useDispatch } from 'react-redux';
import routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';
import NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';
import { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import ReducerRegistry from './Utilities/ReducerRegistry';
import { setGlobalFilter } from './Store/Actions/Actions';
import { Routes } from './Utilities/Routes';
import { useHistory, useLocation } from 'react-router-dom';
import NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';
import './App.scss';

ReducerRegistry.register({ notifications });

const App = () => {
    const { push } = useHistory();
    const { pathname } = useLocation();
    const [access, setAccess] = useState(true);

    const dispatch = useDispatch();

    const appNavClick = useMemo(() => ({
        cves(redirect) { insights?.chrome?.appNavClick({ id: 'cves', redirect }); },
        systems(redirect) { insights?.chrome?.appNavClick({ id: 'systems', redirect }); },
        reports(redirect) { insights?.chrome?.appNavClick({ id: 'reports', redirect }); }
    }), []);

    useEffect(() => {
        const permissionList = ['vulnerability:*:*', 'vulnerability:vulnerability:*'];

        insights?.chrome?.init();
        insights?.chrome?.identifyApp('vulnerability');

        (async () => {
            const userPermissions = await insights?.chrome?.getUserPermissions?.('vulnerability');
            setAccess(userPermissions.some(access => permissionList.includes(access.permission)));
        })();

        const unregister = insights?.chrome?.on('APP_NAVIGATION', event => {
            insights?.chrome?.hideGlobalFilter?.(false);
            if (event.domEvent) {
                push(`/${event.navId}`);
                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves(true);
            }
        });

        return () => unregister();

    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useEffect(() => {
        const baseComponentUrl = pathname.split('/')[1];
        insights?.chrome &&
            baseComponentUrl &&
            appNavClick[baseComponentUrl] !== undefined &&
            appNavClick[baseComponentUrl](false);

        const unregister = insights?.chrome?.on('GLOBAL_FILTER_UPDATE', ({ data }) => {
            const [workloads, SIDs, tags] = insights?.chrome?.mapGlobalFilter?.(data, true, true);
            dispatch(setGlobalFilter({ workloads, SIDs, tags }));

        });

        return () => unregister();
    }, [appNavClick, pathname, dispatch]);

    return (
        access ?
            <Fragment>
                <NotificationPortal />
                <Routes />
            </Fragment>
            : <NoAccessPage/>
    );

};

export default routerParams(App);
