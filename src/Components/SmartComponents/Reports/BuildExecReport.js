
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';
import {
    Paragraph,
    Section,
    Column,
    Table,
    Panel,
    PanelItem,
    Chart
} from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text } from '@react-pdf/renderer';
import messages from '../../../Messages';

const BuildExecReport = ({ data,  intl }) => {

    const safeCharLength = { colChars: 70, rows: 15 };

    const {
        cves_by_severity: cvesBySeverity,
        recent_cves: recentCves,
        top_cves: topCves,
        cves_total: cvesTotal,
        system_count: systemTotal
    } = data;

    const mapFields = (fields, data, percentageInfo = false) => {
        let arr = [];

        for (const field in fields) {

            let { [field]: label } = fields;
            let { [field]: fieldData } = data;

            let value = fieldData.count !== undefined ? fieldData.count : fieldData;
            if (field === 'na' && value === 0) {
                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table
            }

            if (percentageInfo && fieldData.percentage) {
                value = intl.formatMessage(messages.executiveReportOfTotal, { count: value, percentage: fieldData.percentage });
            }

            arr.push([label, value.toString()]);
        }

        return arr;
    };

    const recentCvesData = mapFields(
        recentCvesMapping,
        {
            ...recentCves
        }
    );
    const CVSSDataMap = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        }
    );

    const CVSSChart = CVSSDataMap.map((severity) => {
        let [x, y] = severity;
        return { x: `CVSS ${x}`, y: Number(y) };
    });

    const CVSSData = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        },
        true
    );

    const calculateTopCves = () => {
        let panelGroups = { firstPage: [], secondPage: [] };
        let totalRows = 0;

        topCves.forEach(cve => {
            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);
            totalRows += rows;
            const panel = (
                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>
                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>
                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}
                    </PanelItem>
                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>
                        {cve.systems_affected.toString()}
                    </PanelItem>
                </Panel>
            );
            totalRows <= 15 && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);

        });
        return panelGroups;
    };

    return [(
        <Fragment key="first-section">
            <Paragraph>
                {intl.formatMessage(messages.executiveReportHeader)}
            </Paragraph>
            <Paragraph>
                {intl.formatMessage(messages.executiveReportSubHeader, {
                    systems: <Text style={{ fontWeight: 700 }}>
                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}
                    </Text>,
                    cves: <Text style={{ fontWeight: 700 }}>
                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}
                    </Text>
                })}
            </Paragraph>
            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>

                <Column>
                    <Table
                        withHeader
                        rows={[CVSSHeader, ...CVSSData]}
                    />
                </Column>
                <Column>
                    <Chart
                        chartType="pie"
                        subTitle="Cves"
                        title="100"
                        data={CVSSChart}
                    />
                </Column>
            </Section>
            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>
                <Column>
                    <Table
                        withHeader
                        rows={[recentCvesHeader, ...recentCvesData]}
                    />
                </Column>
                <Column>
                </Column>
            </Section>
            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>
                {
                    calculateTopCves().firstPage

                }
            </Section>
        </Fragment>
    ),
    calculateTopCves().secondPage
    ];
};

BuildExecReport.propTypes = {
    data: PropTypes.exact({
        cves_by_severity: PropTypes.object,
        recent_cves: PropTypes.object,
        top_cves: PropTypes.array,
        cves_total: PropTypes.number,
        system_count: PropTypes.number
    }),
    intl: PropTypes.any
};

export default BuildExecReport;
