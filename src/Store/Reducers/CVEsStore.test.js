import { VULNERABILITIES_HEADER } from '../../Helpers/constants';
import * as ActionTypes from '../ActionTypes';
import { initialState, CVEsStore } from './CVEsStore';

let action;
describe('CVE reducer:', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
    });

    it('Should return initial state', () => {
        expect(CVEsStore(undefined, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(CVEsStore(undefined, action)).toEqual(initialState);
    });

    it('Should start loading CVE_List', () => {
        action.type = ActionTypes.FETCH_CVE_LIST + '_PENDING';
        action.meta = new Date();
        expect(CVEsStore(undefined, action).cveList.isLoading).toEqual(true);
    });

    it('Should load CVE_List', () => {
        let testObject = { testObject: 'value' };
        let timestamp = new Date();
        action.type = ActionTypes.FETCH_CVE_LIST + '_FULFILLED';
        action.payload = testObject;
        action.meta = timestamp;
        expect(CVEsStore(undefined, action).cveList).toEqual({ isLoading: false, payload: testObject, timestamp: initialState.cveList.timestamp });
    });

    it('Should not load CVE_List, race condition', () => {
        let testObject = { testObject: 'value' };
        let timestamp = new Date(Date.now() - 100);
        action.type = ActionTypes.FETCH_CVE_LIST + '_FULFILLED';
        action.payload = testObject;
        action.meta = timestamp;
        expect(CVEsStore(undefined, action).cveList.timestamp).not.toEqual(timestamp);
    });

    it('Should empty the store', () => {
        action.type = ActionTypes.EMPTY_CVE_LIST + '_FULFILLED';
        expect(CVEsStore(undefined, action)).toEqual(initialState);
    });

    it('Should reject the CVE list', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.FETCH_CVE_LIST + '_REJECTED';
        action.payload = testObject;
        let retval = CVEsStore(undefined, action).cveList;
        expect(retval.isLoading).toEqual(false);
        expect(retval.payload.errors).toEqual(testObject);
    });

    it('Should change cve list parameters', () => {
        let testObject = { affecting: 'true,false', sort: 'public_date', selectedCves: ['cve'], expandedRows: ['cve-id'] };
        action.type = ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED';
        action.payload = testObject;
        let retval = CVEsStore(initialState, action);
        expect(retval.parameters).toEqual(testObject);
    });


    it('Should return selected CVEs', () => {
        action.type = ActionTypes.SELECT_CVE;
        action.payload = ['cve-1']
        let retval = CVEsStore(initialState, action);
        expect(retval.selectedCves).toEqual(['cve-1']);
    });


    it('Should unselect CVEs it is already selected', () => {
        let newState = {
            cveList: {
                isLoading: true,
                payload: [],
                timestamp: new Date()
            },
            parameters: {
                affecting: 'true,true',
                sort: '-public_date'
            },
            selectedCves: ['cve-1', 'cve-2', 'cve-3'],
            expandedRows: [],
            isAllExpanded: false,
            prevLoadedRows: [{id: 'cve-1'}]
        };

        action.type = ActionTypes.SELECT_CVE;
        action.payload = 'cve-1'
        let retval = CVEsStore(newState, action);
        expect(retval.selectedCves).toEqual(['cve-2', 'cve-3']);
    });

    it('Should expand cve row', () => {
        let newState = {
            cveList: {
                isLoading: true,
                payload: [],
                timestamp: new Date()
            },
            parameters: {
                affecting: 'true,true',
                sort: '-public_date'
            },
            selectedCves: ['cve-1', 'cve-2', 'cve-3'],
            expandedRows: [],
            isAllExpanded: false
        };

        action.type = ActionTypes.EXPAND_CVE;
        action.payload = ['cve-1', 'cve-2'];
        let retval = CVEsStore(newState, action);
        expect(retval.expandedRows).toEqual(['cve-1', 'cve-2']);
    });

    it('Should collapse cve row', () => {
        let newState = {
            cveList: {
                isLoading: true,
                payload: {
                    data: [ {id: 'cve-1'}, {id:'cve-2'}]
                },
                timestamp: new Date(),
            },
            parameters: {
                affecting: 'true,true',
                sort: '-public_date'
            },
            selectedCves: ['cve-1', 'cve-2', 'cve-3'],
            expandedRows: ['cve-1', 'cve-2', 'cve-3'],
            isAllExpanded: false
        };

        action.type = ActionTypes.EXPAND_CVE;
        action.payload = 2;
        let retval = CVEsStore(newState, action);
        expect(retval.expandedRows).toEqual(['cve-1', 'cve-3']);
    });

    it('Should clear CVEsStore', () => {
        let newState = {
            cveList: {
                isLoading: true,
                payload: {
                    data: [ {id: 'cve-1'}, {id:'cve-2'}]
                },
                timestamp: new Date(),
            },
            parameters: {
                affecting: 'true,true',
                sort: '-public_date'
            },
            selectedCves: ['cve-1', 'cve-2', 'cve-3'],
            expandedRows: ['cve-1', 'cve-2', 'cve-3'],
            isAllExpanded: false,
            columns: VULNERABILITIES_HEADER
        };
        action.type = ActionTypes.CLEAR_CVES_STORE;

        let retval = CVEsStore(newState, action);
        expect(retval).toEqual(initialState);
    })
});
