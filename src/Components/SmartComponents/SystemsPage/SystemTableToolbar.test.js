import SystemsTableToolbar from './SystemsTableToolbar';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { intl } from '../../../Utilities/IntlProvider';
import useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';
import { systems } from '../../../Helpers/fixtures';

const mockStore = configureStore([store => next => action => { }]);
let store = mockStore({});

const applyMock = jest.fn();
const handleSelectMock = jest.fn();
const doOptOutMock = jest.fn();

jest.mock('../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter')

let wrapper;

beforeEach(() => {
    wrapper = mountWithIntl(
        <Provider store={store}>
            <Router>
                <SystemsTableToolbar
                    intl={intl}
                    methods={{
                        apply: applyMock,
                        handleSelect: handleSelectMock,
                        doOptOut: doOptOutMock
                    }}
                    selectedRows={[]}
                    canExport
                    canSetExcludedIncluded
                    canReadExcluded
                    parameters={{
                        excluded: "false",
                        page: 1,
                        page_size: 20,
                        sort: "-updated"
                    }}
                    rawData={{ data: systems.data, meta: { totalItems: 10 } }}
                />
            </Router>
        </Provider>
    );
});

describe('SystemsTableToolbar component', () => {
    it("Renders toolbar", () => {
        expect(
          wrapper.find({
            ouiaId: "PrimaryToolbar",
          })
        ).toHaveLength(1);
      });

    it('Should match snapshot', () => {
        expect(toJson(wrapper.find('Toolbar'))).toMatchSnapshot();
    });

    it('Select all systems', () => {
        const selectAllToggle = wrapper.find('DropdownToggle button').first();
        selectAllToggle.simulate('click');

        wrapper.find('Dropdown').first().find("button").at(2).simulate('click');

        expect(handleSelectMock).toHaveBeenCalledWith(
            [
                { display_name: "hypervisor.beav", id: "ece17ad9-97db-4480-a486-3eb4edd6c330", opt_out: false, remediation: undefined, selected: true },
                { display_name: "client01.apex.example.com", id: "84b763c8-9611-4bf0-9fb8-4f737253b994", opt_out: true, remediation: undefined, selected: true },
                { display_name: "edge-host-1", id: "9ad25b17-b805-437b-8fc3-074559c453b8", opt_out: false, remediation: undefined,  selected: true },
                { display_name: "rhel7-insights-client-prod.virbr0.akofink-laptop",id: "ae7a9d76-ccc8-44d8-b8f0-692199199f10", opt_out: false, remediation: undefined, selected: true },
                { display_name: "vm-9-105.lab.eng.tlv2.redhat.com",id: "721d9b9f-0db5-46f4-ba71-5611d6c12887", opt_out: false, remediation: undefined, selected: true },
                { display_name: "dhcp-2-44.vms.sat.rdu2.redhat.com",id: "57c715fd-c49c-4c0d-81bc-f95599cd28f8", opt_out: false, remediation: undefined, selected: true }
            ], true
        );

    });

    it('Should exclude the selected system', () => {
        wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <SystemsTableToolbar
                        intl={intl}
                        methods={{
                            apply: applyMock,
                            handleSelect: handleSelectMock,
                            doOptOut: doOptOutMock
                        }}
                        selectedRows={[{ display_name: "hypervisor.beav", id: "ece17ad9-97db-4480-a486-3eb4edd6c330", opt_out: false, remediation: undefined, selected: true }]}
                        selectedRowsCount={1}
                        totalSelectedRows={1}
                        canExport
                        canSetExcludedIncluded
                        canReadExcluded
                        parameters={{
                            excluded: "false",
                            page: 1,
                            page_size: 20,
                            sort: "-updated"
                        }}
                        rawData={{ data: systems.data, meta: { totalItems: 10 } }}
                    />
                </Router>
            </Provider>
        );

        const actionsToggle = wrapper.find('KebabToggle button');
        actionsToggle.simulate('click');

        const exclude = wrapper.find('Dropdown').at(3).find("DropdownItem button").at(0)
        const include = wrapper.find('Dropdown').at(3).find("DropdownItem button").at(1);

        exclude.simulate('click');

        expect(include.props('disabled')).toBeTruthy();
        expect(exclude.text()).toBe('Exclude system from vulnerability analysis');
        expect(doOptOutMock).toHaveBeenCalled();
    })

    it('Should include the excluded selected system', () => {
        wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <SystemsTableToolbar
                        intl={intl}
                        methods={{
                            apply: applyMock,
                            handleSelect: handleSelectMock,
                            doOptOut: doOptOutMock
                        }}
                        selectedRows={[{ display_name: "client01.apex.example.com", id: "84b763c8-9611-4bf0-9fb8-4f737253b994", opt_out: true, remediation: undefined, selected: true }]}
                        selectedRowsCount={1}
                        canExport
                        canSetExcludedIncluded
                        canReadExcluded
                        parameters={{
                            excluded: "false",
                            page: 1,
                            page_size: 20,
                            sort: "-updated"
                        }}
                        rawData={{ data: systems.data, meta: { totalItems: 10 } }}
                    />
                </Router>
            </Provider>
        );

        const actionsToggle = wrapper.find('KebabToggle button');
        actionsToggle.simulate('click');

        const exclude = wrapper.find('Dropdown').at(3).find("DropdownItem button").at(0)
        const include = wrapper.find('Dropdown').at(3).find("DropdownItem button").at(1);

        include.simulate('click');

        expect(exclude.props('disabled')).toBeTruthy();
        expect(include.text()).toBe('Include system in vulnerability analysis');
        expect(doOptOutMock).toHaveBeenCalled();
    })

    it("The default filter is set by name", () => {
        const container = wrapper.find('button[data-ouia-component-id="ConditionalFilter"]');
        expect(container).toHaveLength(1);
        expect(container.text()).toBe('Name');
      })
});
