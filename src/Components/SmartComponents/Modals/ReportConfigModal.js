import React from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    Form,
    FormGroup,
    TextInput,
    Checkbox,
    TextArea
} from '@patternfly/react-core';
import CustomReportFilter from '../Reports/CustomReportFilter';
import { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';

const ReportConfigModal = ({
    isOpen: isModalOpen,
    handleModalClose,
    filterData,
    setFilterData,
    handleDownloadButton,
    columnsToInclude,
    setColumnsToInclude,
    userNotes,
    setUserNotes,
    reportTitle,
    setReportTitle

}) => {

    const activeFilters = ['publish_date', 'impact',  'cvss_filter', 'status_id', 'business_risk_id'];

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        } else {
            setColumnsToInclude(
                columnsToInclude.filter((item) => item !== parameter)
            );
        }
    };

    return (
        <Modal
            title={intl.formatMessage(messages.configModalTitle)}
            id="custom-report-modal"
            ouiaId={'custom-report-modal'}
            isOpen={isModalOpen}
            onClose={handleModalClose}
            actions={[
                <Button
                    key="export"
                    variant="primary"
                    onClick={handleDownloadButton}
                    isDisabled={
                        +filterData.cvss_filter.min < 0 ||
                        +filterData.cvss_filter.max > 10 ||
                        +filterData.cvss_filter.min > +filterData.cvss_filter.max ||
                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH
                    }
                >
                    {intl.formatMessage(messages.configModalExportReport)}
                </Button>,
                <Button
                    key="cancel"
                    variant="secondary"
                    onClick={handleModalClose}
                >
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <Form>
                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId="horizontal-form-name">
                    <TextInput
                        value={reportTitle}
                        onChange={(value) => setReportTitle(value)}
                        type="text"
                        id="horizontal-form-name"
                    />
                    <Checkbox
                        id="hasRule"
                        key="hasRule"
                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}
                        isChecked={filterData.security_rule === 'true'}
                        onChange={(newValue) =>
                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : undefined })
                        }
                        className="pf-u-mt-md"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}
                    fieldId="horizontal-form-name"
                >
                    <div style={{ columnCount: 2 }}>
                        <Checkbox
                            id="cve_id"
                            label="CVE ID"
                            isChecked
                            isDisabled
                            className="pf-u-mb-md"
                        />
                        {
                            Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>
                                key !== 'security_rule' &&
                                <Checkbox
                                    id={key}
                                    key={key}
                                    label={value.title}
                                    isChecked={columnsToInclude.includes(key)}
                                    onChange={(newValue) =>
                                        handleCheckboxChange(key, newValue)
                                    }
                                    className='pf-u-mb-md'
                                />
                            )
                        }
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}
                    fieldId="horizontal-form-name"
                >
                    <div className="custom-report-filter-wrapper"> {/* Width of modal minus padding from both sides */}
                        {activeFilters &&
                            activeFilters.map((item) => {
                                return (
                                    <CustomReportFilter
                                        key={item}
                                        filterName={item}
                                        filterData={filterData}
                                        setFilterData={setFilterData}
                                    />
                                );
                            })}
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportUserNotesLabel)}
                    fieldId="user-notes-box"
                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}
                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                >
                    <TextArea
                        value={userNotes}
                        onChange={(value) => setUserNotes(value)}
                        type="text"
                        id="user-notes-box"
                        resizeOrientation='vertical'
                        style={{ minHeight: '4em' }}
                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
};

ReportConfigModal.propTypes = {
    isOpen: propTypes.bool,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    handleModalClose: propTypes.func,
    handleDownloadButton: propTypes.func,
    columnsToInclude: propTypes.array,
    setColumnsToInclude: propTypes.func,
    userNotes: propTypes.string,
    setUserNotes: propTypes.func,
    reportTitle: propTypes.string,
    setReportTitle: propTypes.func
};

export default ReportConfigModal;
