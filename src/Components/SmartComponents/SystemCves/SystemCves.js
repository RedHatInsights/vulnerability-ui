import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';
import {
    fetchCveListBySystem,
    changeSystemCVEsParameters,
    selectSystemCve,
    expandSystemCve,
    clearSystemCvesStore,
    fetchSystemDetailsIds
} from '../../../Store/Actions/Actions';
import propTypes from 'prop-types';
import '../CVEs/vulnerabilities.scss';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import SystemCveTable from './SystemCveTable';
import { injectIntl, IntlProvider } from 'react-intl';
import { useDispatch, useSelector } from 'react-redux';
import { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';
import { constructFilterParameters } from '../../../Helpers/MiscHelper';
import { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';
import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import DownloadReport from '../../../Helpers/DownloadReport';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import SystemCveTableToolbar from './SystemCveTableToolbar';
import { useCreateUrlParams, updateRef } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';

export const CVETableContext = createContext({});

export const SystemCVEs = (props) => {
    const dispatch = useDispatch();
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);
    const [isFirstLoad, setIsFirstLoad] = useState(true);
    const systemCVEs = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.cveList
    );
    const parameters = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.parameters
    );
    const selectedCves = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.selectedCves
    );
    const openedCves = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.openedCves
    );
    const expandCveDescription = useSelector(
        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription
    );

    const cves = useMemo(() => createCveListBySystem(props.entity.id, systemCVEs), [systemCVEs]);
    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);

    const downloadReport = format => {
        const params = { ...parameters, system: props.entity.id };
        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');
    };

    const processError = error => {
        const { status } = error;
        const statusCode = parseInt(status);
        if (statusCode === 404 && props.entity.id) {
            return EmptyVulnerabilityData;
        } else {
            return GenericError;
        }
    };

    const apply = (filterParams = {}) => {
        const params = constructFilterParameters(filterParams);
        dispatch(changeSystemCVEsParameters(params));
    };

    useEffect(() => {
        if (isFirstLoad) {
            apply({ sort: '-public_date',  ...urlParameters });
            setIsFirstLoad(false);
        }
        else {
            dispatch(fetchCveListBySystem({ ...parameters, system: props.entity.id }));
            urlParamsAllowed
                && createUrlParams({ ...parameters })
                || setUrlParamsAllowed(true);
        }
    }, [parameters]);

    useEffect(() => {
        return () => {
            dispatch(clearSystemCvesStore());
        };
    }, []);

    const showStatusModal = cvesList => {
        let hasDifferentStatus;
        if (cvesList.length > 1) {
            const selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));

            hasDifferentStatus = selectedCves.some(element => {
                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;
            });
        }

        setStatusModal(() => () =>
            (<CvePairStatusModal
                cves={cvesList}
                updateRef={() => updateRef(cves.meta, apply)}
                inventories={[{ id: props.entity.id, display_name: props.entity.display_name }]}
                hasDifferentStatus={hasDifferentStatus}
                type={'systemDetail'}
            />)
        );
    };

    const handleCveSelect = (iSelected, payload) => {
        dispatch(selectSystemCve(payload));
    };

    const handleCveOpen = (isOpen, cves, expandCveDescription) => {
        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));
    };

    if (!systemCVEs.errors) {
        return (
            <CVETableContext.Provider
                value={{
                    cves,
                    parameters,
                    selectedCves,
                    openedCves,
                    expandCveDescription,
                    methods: {
                        apply,
                        downloadReport,
                        selectCves: handleCveSelect,
                        openCves: handleCveOpen,
                        showStatusModal,
                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: props.entity.id })
                    }
                }}
            >
                <StatusModal />

                <Stack hasGutter>
                    <StackItem>
                        <TextContent>
                            <Text component={TextVariants.h2}>
                                {props.intl.formatMessage(messages.systemCvesTableHeader)}
                            </Text>
                        </TextContent>
                    </StackItem>
                    <StackItem>
                        <SystemCveTableToolbar showRemediationButton entity={props.entity.id} />
                    </StackItem>
                </Stack>

                <SystemCveTable
                    header={SYSTEM_DETAILS_HEADER}
                    entity={props.entity.id}
                />
            </CVETableContext.Provider>
        );
    }
    else {
        return processError(systemCVEs.errors);
    }

};

SystemCVEs.propTypes = {
    entity: propTypes.object,
    cveList: propTypes.any,
    fetchData: propTypes.func,
    history: propTypes.object,
    location: propTypes.object,
    intl: propTypes.any
};

export const ConnectedSystemCves = withRouter(
    injectIntl(SystemCVEs)
);

const TranslateSystemCves = ({ customItnlProvider, customRouter, ...props }) => {
    const RouterWrapper = customRouter ? Router : Fragment;
    const Wrapper = customItnlProvider ? IntlProvider : Fragment;
    return <Wrapper {...customItnlProvider && {
        locale: navigator.language.slice(0, 2),
        messages
    } } >
        <RouterWrapper
            {...customRouter && { basename: `${window.location.pathname}` } }
        >
            <ConnectedSystemCves { ...props } />
        </RouterWrapper>
    </Wrapper>;
};

TranslateSystemCves.propTypes = {
    customItnlProvider: propTypes.bool,
    customRouter: propTypes.bool
};

TranslateSystemCves.defaultProps = {
    customItnlProvider: false,
    customRouter: false
};

export default TranslateSystemCves;
