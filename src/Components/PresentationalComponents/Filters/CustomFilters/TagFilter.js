import React, { useState, useRef } from 'react';
import propTypes from 'prop-types';
import { Badge, Checkbox, Menu, MenuGroup, MenuItem, MenuList, Select, Split, SplitItem } from '@patternfly/react-core';
import { intl } from '../../../../Utilities/IntlProvider';
import messages from '../../../../Messages';
import axios from 'axios';
import { useEffect } from 'react';
import TagModal from '@redhat-cloud-services/frontend-components/TagModal/TagModal';
import { Fragment } from 'react';
import { uniqBy } from 'lodash';
import debounce from 'lodash/debounce';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';
import { useDispatch } from 'react-redux';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';
import { dissectTag } from '../../../../Helpers/MiscHelper';

const TagFilter = ({ selectedTags, setSelectedTags, onEdit, globalTags }) => {
    const [isSelectOpen, setSelectOpen] = useState(false);
    const [isModalOpen, setModalOpen] = useState(false);

    const [isLoading, setLoading] = useState(true);
    const [tags, setTags] = useState([]);
    const [totalItemsCount, setTotalItemsCount] = useState([]);
    const [page, setPage] = useState(1);
    const [perPage, setPerPage] = useState(10);
    const [tagSearch, setTagSearch] = useState('');
    const [modalSelectedTags, setModalSelectedTags] = useState([]);

    const dispatch = useDispatch();

    const fetchTags = params => {
        setLoading(true);

        axios.get('/api/inventory/v1/tags', { params })
            .then(response => {
                setTotalItemsCount(response.data.total);
                setTags(response.data.results);
                setLoading(false);
            })
            .catch(() => {
                dispatch(addNotification({
                    variant: 'danger',
                    autoDismiss: false,
                    title: intl.formatMessage(messages.tagFilterFailure)
                }));
            });
    };

    const debouncedFetchTags = useRef(debounce(params => fetchTags(params), 500));

    useEffect(() => {
        debouncedFetchTags.current({ page: 1, per_page: perPage, search: tagSearch });
    }, [tagSearch]);

    useEffect(() => {
        fetchTags({ page, per_page: perPage, search: tagSearch });
    }, [page, perPage]);

    useEffect(() => {
        setSelectedTags(globalTags.map(tag => dissectTag(tag)));
    }, []);

    const groups = tags.reduce((acc, currentTag) => {
        const currentNamespace = currentTag.tag.namespace || 'null';
        const currentKey = currentTag.tag.key;
        const currentValue = currentTag.tag.value;
        const currentCount = currentTag.count;

        const indexOfNamespace = acc.findIndex(group => group.namespace === currentNamespace);

        if (indexOfNamespace === -1) {
            acc.push({
                namespace: currentNamespace,
                items: [{
                    count: currentCount,
                    key: currentKey,
                    value: currentValue
                }]
            });
        }
        else {
            acc[indexOfNamespace].items.push({
                count: currentCount,
                key: currentKey,
                value: currentValue
            });
        }

        return acc;
    }, []);

    const onMenuItemClick = (e, tag, group) => {
        if (e.target.localName !== 'button' && e.target.localName !== 'input') {
            return;
        }

        onEdit();

        const foundIndex = selectedTags.findIndex(item => item.string === `${group.namespace}/${tag.key}=${tag.value}`);

        if (foundIndex === -1) {
            setSelectedTags([...selectedTags, {
                string: `${group.namespace}/${tag.key}=${tag.value}`,
                namespace: group.namespace,
                key: tag.key,
                value: tag.value
            }]);
        }
        else {
            setSelectedTags(selectedTags.filter((tag, currentIndex) => foundIndex !== currentIndex));
        }
    };

    return (
        <Fragment>
            <TagModal
                isOpen={isModalOpen}
                toggleModal={() => {
                    setModalOpen(false);
                    setModalSelectedTags([]);
                    setTagSearch('');
                    setPage(1);
                }}
                loaded={!isLoading}
                title={intl.formatMessage(messages.tagFilterModalTitle)}
                columns={[
                    { title: intl.formatMessage(messages.tagFilterModalColumnName) },
                    { title: intl.formatMessage(messages.tagFilterModalColumnValue) },
                    { title: intl.formatMessage(messages.tagFilterModalColumnTagSource) }
                ]}
                rows={tags.map(({ tag }) => ({
                    id: `${tag.namespace}/${tag.key}=${tag.value}`,
                    selected: uniqBy([...modalSelectedTags, ...selectedTags.map(tag => ({ id: tag.string }))], 'id')
                        .find(({ id }) => id === `${tag.namespace}/${tag.key}=${tag.value}`),
                    cells: [tag.key, tag.value, tag.namespace]
                }))}
                pagination={{
                    count: totalItemsCount,
                    page,
                    perPage
                }}
                selected={uniqBy([...modalSelectedTags, ...selectedTags.map(tag => ({ id: tag.string }))], 'id')}
                onSelect={a => {
                    setModalSelectedTags(a);
                }}
                onUpdateData={({ page, perPage }) => {
                    setPage(page);
                    setPerPage(perPage);
                }}
                onApply={() => {
                    setSelectedTags([...selectedTags, ...modalSelectedTags.filter(tag => tag.cells)
                        .map(tag => ({ string: tag.id, key: tag.cells[0], value: tag.cells[1], namespace: tag.cells[2] }))]);

                    setModalSelectedTags([]);
                    onEdit();
                }}
                tableProps={{
                    canSelectAll: false
                }}
                filters={[{
                    label: intl.formatMessage(messages.tagFilterSearchLabel),
                    placeholder: intl.formatMessage(messages.tagFilterSearchPlaceholder),
                    value: 'tags-filter',
                    filterValues: {
                        value: tagSearch,
                        onChange: (_e, value) => {
                            setTagSearch(value);
                        }
                    }
                }]}
            />
            <Select
                variant="checkbox"
                aria-label="Select Input"
                onToggle={() => {
                    setSelectOpen(!isSelectOpen);
                }}
                isOpen={isSelectOpen}
                placeholderText={
                    intl.formatMessage(messages.tagFilterPrefix) +
                        (selectedTags.length === 0 ? intl.formatMessage(messages.optionsAll) : selectedTags.map(selectedTag =>
                            `${selectedTag.namespace}: ${selectedTag.key} = ${selectedTag.value}`).join(', '))
                }
                key="tag-filter"
                isCheckboxSelectionBadgeHidden
                style={{ maxHeight: '280px', overflow: 'auto' }}
                width="400px"
                customContent={
                    isLoading
                        ? <Spinner centered />
                        : <Menu>
                            {groups.map(group => (
                                <MenuGroup key={group.namespace} label={group.namespace} value={group.namespace}>
                                    <MenuList>
                                        {group.items.map(tag => (
                                            <MenuItem
                                                key={`${tag.key}=${tag.value}`}
                                                onClick={e => onMenuItemClick(e, tag, group)}
                                            >
                                                <Checkbox
                                                    className="ins-c-global-filter__checkbox"
                                                    id={`${tag.key}=${tag.value}`}
                                                    isChecked={selectedTags.some(checkedTag =>
                                                        checkedTag.string === `${group.namespace}/${tag.key}=${tag.value}`)}
                                                    label={<Split style={{ width: '100%' }}>
                                                        <SplitItem>
                                                            {`${tag.key}=${tag.value}`}
                                                        </SplitItem>
                                                        <SplitItem>
                                                            <Badge className="pf-u-ml-sm">{tag.count}</Badge>
                                                        </SplitItem>
                                                    </Split>
                                                    }
                                                />
                                            </MenuItem>
                                        )
                                        )}
                                    </MenuList>
                                </MenuGroup>
                            ))}
                            {totalItemsCount > 10 &&
                                <MenuGroup>
                                    <MenuList>
                                        <MenuItem
                                            isLoadButton
                                            onClick={() => {
                                                setModalOpen(true);
                                                setSelectOpen(false);
                                            }}
                                        >
                                            {intl.formatMessage(messages.tagFilterMoreTagsAvailable, {
                                                count: totalItemsCount - 10
                                            })}
                                        </MenuItem>
                                    </MenuList>
                                </MenuGroup>
                            }
                        </Menu>
                }
            />
        </Fragment>
    );
};

TagFilter.propTypes = {
    selectedTags: propTypes.array,
    setSelectedTags: propTypes.func,
    onEdit: propTypes.func,
    globalTags: propTypes.array
};

export default TagFilter;
