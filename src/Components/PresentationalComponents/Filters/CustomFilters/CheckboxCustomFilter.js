import React, { useState } from 'react';
import propTypes from 'prop-types';
import { Select, SelectGroup, SelectOption } from '@patternfly/react-core';
import { intl } from '../../../../Utilities/IntlProvider';
import messages from '../../../../Messages';

const CheckboxCustomFilter = ({
    filterData,
    setFilterData,
    selectProps,
    options,
    groups,
    filterName,
    filterId,
    allSelectedText
}) => {
    const [isOpen, setOpen] = useState(false);

    const handleOnCheckboxChange = (filterId, optionId) => {
        if (!filterData[filterId].includes(optionId)) { // checkbox got checked, add value
            setFilterData({ ...filterData, [filterId]: [...filterData[filterId], optionId] });
        }
        else { // check got unchecked, remove value
            let optionIndex = filterData[filterId].indexOf(optionId);
            let options = filterData[filterId].slice();
            options.splice(optionIndex, 1);
            setFilterData({ ...filterData, [filterId]: options });
        }
    };

    const getPlaceholderText = () => {
        const itemsString = filterData[filterId].map(id => options.find(item => item.value === id).label).join(', ');

        return `${filterName}: ${filterData[filterId].length === 0 || filterData[filterId].length === options.length
            ? allSelectedText ?? intl.formatMessage(messages.optionsAll) : itemsString}`;
    };

    return (
        <Select
            variant="checkbox"
            aria-label="Select Input"
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={getPlaceholderText()}
            key={filterId}
            width="auto"
            onSelect={(event, optionName) => { handleOnCheckboxChange(filterId, optionName); }}
            selections={filterData[filterId]}
            isCheckboxSelectionBadgeHidden
            {...groups && { isGrouped: true }}
            {...selectProps}
        >
            {groups
                ? Object.entries(groups).map(([groupName, groupOptions]) =>
                    <SelectGroup label={groupName} key={groupName}>
                        {groupOptions.map(item =>
                            <SelectOption key={filterId + item.value} value={item.value}>
                                {item.renderFunc ?? item.label}
                            </SelectOption>
                        )}
                    </SelectGroup>
                )
                : options.map(item =>
                    <SelectOption key={filterId + item.value} value={item.value}>
                        {item.renderFunc ?? item.label}
                    </SelectOption>
                )}
        </Select>
    );
};

CheckboxCustomFilter.propTypes = {
    filterName: propTypes.string.isRequired,
    filterId: propTypes.string.isRequired,
    filterData: propTypes.object.isRequired,
    setFilterData: propTypes.func.isRequired,
    selectProps: propTypes.object,
    allSelectedText: propTypes.string,
    options: propTypes.arrayOf(propTypes.shape({
        label: propTypes.string.isRequired,
        value: propTypes.string.isRequired,
        renderFunc: propTypes.oneOfType([propTypes.string, propTypes.node])
    })),
    groups: propTypes.object
};

export default CheckboxCustomFilter;
