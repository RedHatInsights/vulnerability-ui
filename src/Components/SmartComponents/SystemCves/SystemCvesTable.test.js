import SystemCveTable from './SystemCveTable';
import { CVETableContext } from './SystemCves';
import { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';
import { handleSortColumn } from '../../../Helpers/MiscHelper';
import { SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';
import TestWrapper from '../../../Utilities/TestWrapper';
import { systemCvesTableData } from './systemCves.fixtures';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/MiscHelper', () => (
    {
        ...(jest.requireActual('../../../Helpers/MiscHelper')),
        handleSortColumn: jest.fn()
    }
));

jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useParams: jest.fn().mockReturnValue({ environment: 'dev', service: 'fakeService' })
}))

const mockContext = {
    cves: createCveListBySystem('CVE-2019-6454', {
        payload: {
            isLoading: false,
            meta: {
                test: 'test'
            },
            data: systemCvesTableData
        }
    }, SYSTEM_DETAILS_HEADER),
    parameters: {},
    selectedCves: [{ id: 'CVE-2019-6454', attributes: {} }],
    systemCVEs: { payload: { data: [{ id: 'CVE-2019-6454' }]} },
    expandedRows: ['CVE-2019-6454'],
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn(),
        fetchResource: jest.fn()
    }
};

describe('SystemCvesTable', () => {
    const mountComponent = (testContext) =>
        render(
            <CVETableContext.Provider value={testContext}>
                <TestWrapper>
                    <SystemCveTable
                        header={SYSTEM_DETAILS_HEADER}
                        entity="CVE-2019-6454"
                        canSelect
                    />
                </TestWrapper>
            </CVETableContext.Provider>
        );

    it('Should display SkeletonTable during load', () => {
        const testContext = { ...mockContext, cves: { isLoading: true, meta: { test: 'test' }, data: [] } };
        mountComponent(testContext);
        expect(screen.getByRole('grid', { name: 'Loading' })).toBeVisible();
    });

    it('Should handle empty data list and display EmptyCVEListForSystem page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: { test: 'test' }, data: [] } };
        mountComponent(testContext);
        expect(screen.getByRole('heading', { name: 'No matching CVEs found' })).toBeVisible();
    });

    it('Should handle empty sort result and display FilterNotFoundForSystem page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: { filter: 'test' }, data: [] } };
        mountComponent(testContext);
        expect(screen.getByRole('heading', { name: 'No matching CVEs found' })).toBeVisible();
    });

    it('Should handle empty list when entity prop is set and display EmptyCVEList page', () => {
        const testContext = { ...mockContext, cves: { isLoading: false, meta: {}, data: [] } };
        mountComponent(testContext);
        expect(screen.getByRole('heading', { name: 'No matching CVEs found' })).toBeVisible();
    });

    it('Should render advisory column', () => {
        mountComponent(mockContext);
        expect(screen.getByRole('columnheader', { name: 'Advisory' })).toBeVisible();
    });

    it('Should call selectCves ', () => {
        mountComponent(mockContext);
        userEvent.click(screen.getByRole('checkbox', { name: 'Select row 0' }));
        expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, { id: 'CVE-2019-6454' });
    });

    it('Should call openCves ', () => {
        mountComponent(mockContext);
        userEvent.click(screen.getByRole('button', {
            name: /expand all rows/i
        }));

        expect(mockContext.methods.openCves).toHaveBeenCalledWith(
            true,
            [
                "CVE-2019-6454",
                "CVE-2020-0543",
                "CVE-2022-1234",
                "CVE-2022-1235",
            ],
            true
        );
    });

    it('Should call handleSortColumn ', () => {
        mountComponent(mockContext);
        userEvent.click(screen.getByRole('button', {
            name: /cve id/i
        }));
        expect(handleSortColumn).toHaveBeenCalledWith(
            2,
            "asc",
            [{ key: 'collapse' }, { key: 'checkbox' }, ...SYSTEM_DETAILS_HEADER],
            mockContext.cves.meta.sort,
            expect.any(Function)
        );
    });
});
