import { Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { QuestionCircleIcon } from '@patternfly/react-icons';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import propTypes from 'prop-types';
import React from 'react';
import { CVEPageContext } from '../../SmartComponents/CVEPage/CVEPage';
import WithLoader from '../WithLoader/WithLoader';
import './CvssVector.scss';

const V3names = {
    AV: { name: 'Attack Vector', values: { N: 'Network', A: 'Adjacent', L: 'Local', P: 'Physical' } },
    AC: { name: 'Attack Complexity', values: { L: 'Low', H: 'High' } },
    PR: { name: 'Privileges Required', values: { N: 'None', L: 'Low', H: 'High' } },
    UI: { name: 'User Interaction', values: { N: 'None', R: 'Required' } },
    S: { name: 'Scope', values: { U: 'Unchanged', C: 'Changed' } },
    C: { name: 'Confidentiality', values: { H: 'High', L: 'Low', N: 'None' } },
    I: { name: 'Integrity', values: { H: 'High', L: 'Low', N: 'None' } },
    A: { name: 'Availability', values: { H: 'High', L: 'Low', N: 'None' } },
    CVSS: { name: 'cvssVersion', values: { '3.0': 3.0 } }
};

const V2names = {
    AV: { name: 'Access Vector', values: { N: 'Network', A: 'Adjacent Network', L: 'Local' } },
    AC: { name: 'Access Complexity', values: { L: 'Low', H: 'High', M: 'Medium' } },
    Au: { name: 'Authentication', values: { M: 'Multiple', S: 'Single', N: 'None' } },
    C: { name: 'Confidentiality Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } },
    I: { name: 'Integrity Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } },
    A: { name: 'Availability Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } }
};

export const parseVector = (vector, namesMapping) => {
    let res = {};
    vector &&
        vector.split('/').forEach(curr => {
            let [key, val] = curr.split(':');
            const name = namesMapping[key] && namesMapping[key].name;
            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';
            if (name) {
                res[name] = value;
            }
        });
    return res;
};

const CvssVector = (props) => {
    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector } = props;
    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';
    const cvssVector = CVSS3Vector || CVSS2Vector;
    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);
    const parsedVector = parseVector(cvssVector, namesMapping);
    // eslint-disable-next-line no-unused-vars
    const { cvssVersion, ...values } = parsedVector;

    return (
        <CVEPageContext.Consumer>
            {context => (
                <TextContent>
                    <Text component={TextVariants.h6}>
                        <WithLoader loading={context.isLoading}>
                            {cvssVer} vector{' '}
                            <Popover
                                position="bottom"
                                maxWidth={'100%'}
                                enableFlip
                                headerContent={<div>{cvssVer} vector breakdown</div>}
                                bodyContent={
                                    <Table
                                        aria-label={'Metric breakdown'}
                                        variant={TableVariant.compact}
                                        borders={false}
                                        gridBreakPoint={null}
                                        cells={['Metric', 'Value']}
                                        rows={Object.entries(values)}
                                    >
                                        <TableHeader />
                                        <TableBody />
                                    </Table>
                                }
                            >
                                <a>
                                    <QuestionCircleIcon color={'var(--pf-global--link--Color)'} />
                                </a>
                            </Popover>
                        </WithLoader>
                    </Text>

                    <WithLoader loading={context.isLoading}>{cvssVector} </WithLoader>
                </TextContent>
            )}
        </CVEPageContext.Consumer>
    );
};

CvssVector.propTypes = {
    cvss2_metrics: propTypes.string,
    cvss3_metrics: propTypes.string
};

export default CvssVector;
