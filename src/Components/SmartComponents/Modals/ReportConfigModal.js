import React, { useState } from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    Form,
    FormGroup,
    TextInput,
    Checkbox,
    TextArea
} from '@patternfly/react-core';
import CustomReportFilter from '../Reports/CustomReportFilter';
import { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';
import { FILTERS, DEFAULT_FILTER_DATA, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';

const ReportConfigModal = ({ isOpen: isModalOpen, onClose: closeModal }) => {
    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));
    const [userNotes, setUserNotes] = useState('');
    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(FILTERS));
    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);

    const activeFilters = ['publish_date', 'impact',  'cvss_filter', 'status_id', 'business_risk_id'];

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        } else {
            setColumnsToInclude(
                columnsToInclude.filter((item) => item !== parameter)
            );
        }
    };

    const handleModalClose = () => {
        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));
        setUserNotes('');
        setColumnsToInclude(Object.keys(FILTERS));
        setFilterData(DEFAULT_FILTER_DATA);

        closeModal();
    };

    return (
        <Modal
            title={intl.formatMessage(messages.configModalTitle)}
            variant="small"
            isOpen={isModalOpen}
            onClose={handleModalClose}
            actions={[
                <DownloadCVEsReport
                    type='cves'
                    key="download"
                    reportData={{
                        header: columnsToInclude,
                        reportTitle,
                        userNotes
                    }}
                    params={constructFilterParameters(filterData)}
                    filters={buildFilters(filterData)}
                    isReportDynamic
                    buttonProps={{
                        isDisabled:
                            +filterData.cvss_filter.min < 0 ||
                            +filterData.cvss_filter.max > 10 ||
                            +filterData.cvss_filter.min > +filterData.cvss_filter.max ||
                            userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH,
                        style: { marginRight: '0.5em' }
                    }}
                    label={messages.configModalExportReport}
                />,
                <Button
                    key="cancel"
                    variant="secondary"
                    onClick={handleModalClose}
                >
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <Form>
                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId="horizontal-form-name">
                    <TextInput
                        value={reportTitle}
                        onChange={(value) => setReportTitle(value)}
                        type="text"
                        id="horizontal-form-name"
                    />
                    <Checkbox
                        id="hasRule"
                        key="hasRule"
                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}
                        isChecked={filterData.security_rule === 'true'}
                        onChange={(newValue) =>
                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : undefined })
                        }
                        className="pf-u-mt-md"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}
                    fieldId="horizontal-form-name"
                >
                    <div style={{ columnCount: 2 }}>
                        <Checkbox
                            id="cve_id"
                            label="CVE ID"
                            isChecked
                            isDisabled
                            className="pf-u-mb-md"
                        />
                        {
                            Object.entries(FILTERS).map(([key, value]) =>
                                key !== 'security_rule' &&
                                <Checkbox
                                    id={key}
                                    key={key}
                                    label={value.checkboxOverrideTitle || value.title}
                                    isChecked={columnsToInclude.includes(key)}
                                    onChange={(newValue) =>
                                        handleCheckboxChange(key, newValue)
                                    }
                                    className='pf-u-mb-md'
                                />
                            )
                        }
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}
                    fieldId="horizontal-form-name"
                >
                    <div className="custom-report-filter-wrapper"> {/* Width of modal minus padding from both sides */}
                        {activeFilters &&
                            activeFilters.map((item) => {
                                return (
                                    <CustomReportFilter
                                        key={item}
                                        filterName={item}
                                        filterData={filterData}
                                        setFilterData={setFilterData}
                                    />
                                );
                            })}
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportUserNotesLabel)}
                    fieldId="horizontal-form-name"
                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}
                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                >
                    <TextArea
                        value={userNotes}
                        onChange={(value) => setUserNotes(value)}
                        type="text"
                        id="horizontal-form-name"
                        resizeOrientation='vertical'
                        style={{ minHeight: '4em' }}
                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
};

ReportConfigModal.propTypes = {
    isOpen: propTypes.bool,
    onClose: propTypes.func
};

export default ReportConfigModal;
