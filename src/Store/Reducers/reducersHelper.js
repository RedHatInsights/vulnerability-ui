export const error = {
    errorCode: null,
    message: null,
    hasError: false
};

const hasResetFilters = (
    workloads,
    SIDs,
    tags
) => (workloads === undefined || workloads?.SAP === undefined) && SIDs.length === 0 && tags.length === 0;

const hasSetAnyFilter = (state) => ['sap_system', 'tags', 'sap_sids'].some(key => state.hasOwnProperty(key));

export const applyGlobalFilter = (state, { workloads, SIDs, tags }) => {
    // DO nothing in first load
    if (!hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        return state;
    }

    if (hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {
        // reset the filters
        state = {
            ...state,
            sap_system: undefined,
            tags: undefined,
            sap_sids: undefined,
            page: 1
        };
    } else {
        state = {
            ...state,
            ...workloads && { sap_system: workloads?.SAP?.isSelected === true ? true : undefined },
            ...SIDs && { sap_sids: SIDs },
            ...tags && { tags },
            page: 1
        };
    }

    return state;
};

export const isTimestampValid = (stateTimestamp, actionTimestamp) => actionTimestamp >= stateTimestamp;

/**
 * Adds or removes item from the given (targetObj) object based on the value
 *
 * @param {Object} targetObj
 * @param {Array} inputArr
 * @returns {Object}
 */
export const addOrRemoveItemFromObj = (targetObj, inputArr) => {
    const inputObj = inputArr.reduce((obj, { id, selected }) => {
        if (selected === false) {
            delete targetObj[id];
        } else {
            obj[id] = selected;
        }

        return obj;

    }, {});

    return { ...targetObj, ...inputObj };
};

export const selectRows = (state, action) => {
    let selectedRows = state.selectedRows.slice();
    if (Array.isArray(action.payload)) {
        // when the state and payload are the same length it means that it is a "select none" action
        if (state.selectedRows.length && state.selectedRows.length === action.payload.length) {
            selectedRows = [];
        } else {
            selectedRows = action.payload;
        }
    } else {
        const selectedRow = selectedRows.find(selected => selected.id === action.payload.id);
        if (selectedRow) {
            selectedRows.splice(selectedRows.indexOf(selectedRow), 1);
        } else {
            // We need the whole object, not just id in selectedRows, so using rows in our advantage
            selectedRows.push(state.rows.find(row => row.id === action.payload.id));
        }
    }

    return {
        ...state,
        selectedRows,
        selectedRowsCount: selectedRows.length
    };
};

