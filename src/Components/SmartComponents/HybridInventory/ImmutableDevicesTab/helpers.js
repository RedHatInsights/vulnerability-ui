import { getAffectedSystemsByCVE, useGetImageData } from '../../../../Helpers/APIHelper';
import { SYSTEMS_EXPOSED_HEADER, DEFAULT_PAGE_SIZE } from '../../../../Helpers/constants';
import { getSortValue } from '../../../../Helpers/Hooks';
import ReducerRegistry from '../../../../Utilities/ReducerRegistry';
import { inventoryEntitiesReducer } from '../../../../Store/Reducers/InventoryEntitiesReducer';
import { useCallback } from 'react';
import { translateUrlSortParameter } from '../../../../Helpers/MiscHelper';

export const fetchFullDeviceInfo = async (parameters, fetchImagesData) => {
    const vulnerableSystems = await getAffectedSystemsByCVE(parameters);
    const deviceIds = vulnerableSystems?.data.map(data => data.id);

    if (deviceIds.length) {
        const deviceData = await fetchImagesData({ devices_uuid: deviceIds });
        vulnerableSystems.data?.forEach(system => {
            const systemDevice = deviceData?.data?.devices?.find(device => device.DeviceUUID === system.id);
            return system.attributes = { ...system.attributes, ...systemDevice };
        });
    }

    return vulnerableSystems;
};

export const useGetEntities = ({ id, apply, createRows }) => {
    const fetchImagesData = useGetImageData();
    const getEntities = async (
        _items,
        { orderBy, orderDirection, page, per_page: perPage, edgeParams, filters }
    ) => {
        const { hostnameOrId: filter } = filters;

        const params = {
            filter,
            ...edgeParams,
            ...filters?.hostGroupFilter ? {
                group_names: filters.hostGroupFilter.join(',')
            } : {},
            ...filters?.osFilter?.length > 0 ? {
                rhel_version: filters.osFilter.map(({ value }) => value).join(',')
            } : {},
            page,
            page_size: perPage,
            sort: getSortValue(orderBy, orderDirection)
        };

        apply?.({ ...params });

        const items = await fetchFullDeviceInfo(
            {
                ...id && { id },
                ...params
            },
            fetchImagesData
        );

        return {
            results: typeof createRows === 'function'
                ? createRows(items || {})
                : items?.data?.map(row => ({ id: row.id, ...row.attributes })),
            total: items?.meta?.total_items,
            page: items?.meta?.page,
            perPage: items?.meta?.page_size,
            meta: {
                page: items?.meta?.page,
                sort: items?.meta?.sort,
                page_size: items?.meta?.page_size,
                cves_without_errata: items?.meta?.cves_without_errata
            }
        };
    };

    return getEntities;
};

export const mergeAppColumns = (defaultColumns) => {
    const osColumn = SYSTEMS_EXPOSED_HEADER.find((column) => column.key === 'os');
    const advisoryColumn = SYSTEMS_EXPOSED_HEADER.find((column) => column.key === 'advisories_list');

    const osIndex = defaultColumns.findIndex(column =>{
        return column.key === 'system_profile';
    });
    if (osIndex !== -1) {
        defaultColumns[osIndex] = osColumn;
    }

    return [...defaultColumns, ...[advisoryColumn || []]];
};

export const useOnLoad = (parameters) => useCallback(({ mergeWithEntities }) => {
    ReducerRegistry.register({
        ...mergeWithEntities(
            inventoryEntitiesReducer([]),
            {
                page: Number(parameters.page || 1),
                perPage: DEFAULT_PAGE_SIZE,
                ...(parameters.sort && {
                    sortBy: translateUrlSortParameter(parameters.sort)
                })
            }
        )
    });
}, []);
