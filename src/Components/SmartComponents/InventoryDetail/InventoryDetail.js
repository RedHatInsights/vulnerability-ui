import * as reactCore from '@patternfly/react-core';
import { Card, CardBody } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { withRouter } from 'react-router-dom';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchAffectedSystemsByCVE } from '../../../Store/Actions/Actions';
import { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';
import { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';

class InventoryDetail extends React.Component {
    constructor(props) {
        super(props);
        this.checkItem = this.checkItem.bind(this);
        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => {}
        };
    }

    componentDidMount() {
        this.setState({
            removeListener: middlewareListener.addNew({
                on: 'LOAD_ENTITIES_FULFILLED',
                callback: () => this.props.fetchData(this.props.cve)
            })
        });
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons
        });

        ReducerRegistry.register({
            ...mergeWithEntities(),
            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryDetail
        });
        this.state.removeListener();
    }

    checkItem(key, value) {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    }

    render() {
        const { InventoryCmp } = this.state;
        const { data } = this.props.affectedSystems;
        return (
            <Card>
                <CardBody>
                    <InventoryCmp items={data.map(item => item.inventory_id)} />
                </CardBody>
            </Card>
        );
    }
}

InventoryDetail.propTypes = {
    cve: propTypes.string,
    fetchData: propTypes.func,
    affectedSystems: dataShape
};

function mapStateToProps(state) {
    return {
        affectedSystems: sExposedSystemsTable(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: cve => dispatchAction(fetchAffectedSystemsByCVE(cve))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(InventoryDetail)
);
