import { cellWidth, sortable } from '@patternfly/react-table';
import Vulnerabilities, {
    VulnerabilitiesCves
} from '@redhat-cloud-services/frontend-components-inventory-vulnerabilities';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';
import { emptyCveList, fetchCveListByAccount, setHeader } from '../../../Store/Actions/Actions';
import './CVEs.scss';

class CVEs extends React.Component {
    constructor(props) {
        super(props);
    }

    componentWillUnmount() {
        this.props.emptyStore();
    }

    dispatchSetHeader(entity) {
        if (!entity) {
            this.props.setHeader({
                title: 'Vulnerability',
                breadcrumbs: []
            });
        }
    }

    render() {
        const { entity } = this.props;
        this.dispatchSetHeader(entity);
        const Component = (entity && Vulnerabilities) || VulnerabilitiesCves;
        const params = (entity && { entity }) || this.props;
        return <Component {...params} />;
    }
}

const mapDispatchToProps = () => {
    return {
        emptyStore: () => dispatchAction(emptyCveList()),
        setHeader: header => dispatchAction(setHeader(header))
    };
};

CVEs.defaultProps = {
    header: [
        { title: 'Name', key: 'synopsis', transforms: [sortable, cellWidth(10)] },
        { title: 'Description', key: 'description', transforms: [cellWidth(50)] },
        { title: 'Publish date', key: 'public_date', transforms: [sortable, cellWidth(10)] },
        {
            title: 'CVSS base score',
            key: 'cvss_score',
            transforms: [sortable, cellWidth(10)]
        },
        { title: 'Severity', key: 'impact', transforms: [sortable, cellWidth(10)] },
        { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, cellWidth(10)] }
    ],
    fetchResource: fetchCveListByAccount,
    dataMapper: createCveListByAccount,
    showAllCheckbox: true,
    defaultSort: '-public_date'
};

CVEs.propTypes = {
    dataMapper: propTypes.func,
    fetchResource: propTypes.func,
    setHeader: propTypes.func,
    header: propTypes.array,
    showAllCheckbox: propTypes.bool,
    entity: propTypes.string,
    emptyStore: propTypes.func,
    defaultSort: propTypes.any
};

export default withRouter(
    connect(
        null,
        mapDispatchToProps
    )(CVEs)
);
