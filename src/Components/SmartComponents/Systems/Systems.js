import * as reactCore from '@patternfly/react-core';
import { Page, ToolbarGroup } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import * as pfReactTable from '@patternfly/react-table';
import { Main, SimpleTableFilter } from '@redhat-cloud-services/frontend-components';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import debounce from 'lodash/debounce';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, optOutSystemsAction, setHeader } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sAllSystems } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import {
    kebabItemDownloadCSV,
    kebabItemDownloadJSON,
    kebabItemToggleExcludeSystemDisplay,
    kebabItemExcludeSystemAnalysis
} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import './Systems.scss';

/*eslint camelcase: 0*/

class Systems extends React.Component {
    static propTypes = {
        fetchData: propTypes.func,
        systems: dataShape,
        optOutSystems: propTypes.func,
        addNotification: propTypes.func
    };

    constructor(props) {
        super(props);
        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            filter: '',
            removeListener: () => {},
            columns: [
                {
                    key: 'display_name',
                    title: 'Name',
                    composed: ['facts.os_release', 'display_name']
                },
                {
                    key: 'cve_count',
                    title: 'Number of CVEs'
                },
                {
                    key: 'updated',
                    title: 'Last seen',
                    isTime: true
                }
            ],
            opt_out: false,
            isKebabOpen: false,
            selectListener: middlewareListener.addNew({
                on: 'SELECT_ENTITY',
                callback: payload => this.onSelect(payload)
            }),
            selected: new Set()
        };
    }

    componentDidMount() {
        this.props.fetchData();
        this.fetchInventory();
    }

    downloadReport = format => {
        const { opt_out, filter } = this.state;
        const { payload } = fetchSystems({
            opt_out,
            filter,
            data_format: format,
            page: 1,
            page_size: Number.MAX_SAFE_INTEGER
        });
        payload &&
            payload.then(({ data: response }) => {
                const data = format === 'json' ? JSON.stringify(response) : response;
                return downloadFile(data, `systems-${new Date().toISOString()}`, format);
            });
    };

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns, this.getSelected)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
        this.state.removeListener();
    }

    apply = (config = {}) => {
        this.setState({ ...this.state, ...config }, () => {
            this.props.fetchData(this.params());
        });
    };

    addFilter = (param, value, type) => {
        let newFilter;
        if (type === 'radio' || param === 'show_all') {
            newFilter = { [param]: value };
        } else {
            newFilter = this.state[param] ? { [param]: `${this.state[param]},${value}` } : { [param]: value };
        }

        this.apply({ ...newFilter, page: 1 });
    };

    doOptOut = () => {
        if (this.state.selected.size > 0) {
            this.props.optOutSystems(this.state.selected, !this.state.opt_out).then(() => {
                this.props.fetchData({ ...this.params(), page: 1 });
                this.state.opt_out === false
                    ? this.props.addNotification({
                        variant: 'success',
                        title: this.state.selected.size + ' systems successfully excluded from vulnerability analysis'
                    })
                    : this.props.addNotification({
                        variant: 'success',
                        title: this.state.selected.size + ' systems successfully resumed vulnerability analysis',
                        description: 'There may be 24 hours before data is available'
                    });
                this.setState({ selected: new Set() });
            });
        }
    };

    onSelect = payload => {
        const { selected } = this.state;
        payload.data.selected ? selected.add(payload.data.id) : selected.delete(payload.data.id);
        this.setState({ selected });
    };

    getSelected = () => {
        return this.state.selected;
    };

    params = () => {
        const { filter, opt_out, page, page_size } = this.state;
        return { filter, opt_out, page, page_size };
    };

    handleFilterChange = debounce(value => {
        const { meta } = this.props.systems;
        const { page_size } = meta;
        this.apply({ filter: value, page_size });
    }, 400);

    handleRefresh = ({ page, per_page: perPage }) => {
        const { meta } = this.props.systems;
        if (meta.page !== page || meta.page_size !== perPage) {
            this.apply({
                page: meta.page_size !== perPage ? 1 : page,
                page_size: perPage,
                filter: this.state.filter
            });
        }
    };

    handleOptOut = () => {
        this.setState({
            opt_out: !this.state.opt_out,
            selected: new Set(),
            page: 1
        });
        this.handleFilterChange(this.state.filter);
    };

    handleKebabToggle = isKebabOpen => {
        this.setState({
            isKebabOpen
        });
    };

    handleKebabSelect = () => {
        this.setState({
            isKebabOpen: !this.state.isKebabOpen
        });
    };

    render() {
        const { InventoryCmp } = this.state;
        const { data, meta } = this.props.systems;
        const items = data.map(item => {
            const { cve_count, ...rest } = item.attributes;
            return {
                cve_count: (meta.opt_out && 'Excluded') || cve_count,
                id: item.attributes.inventory_id,
                ...rest
            };
        });

        const kebabOptions = [
            kebabItemExcludeSystemAnalysis(this.doOptOut, this.state.opt_out,
                {
                    isDisabled: !this.getSelected().size
                }
            ),
            kebabItemToggleExcludeSystemDisplay(this.handleOptOut, this.state.opt_out),
            kebabItemDownloadJSON(this.downloadReport),
            kebabItemDownloadCSV(this.downloadReport)
        ];
        return (
            <Page>
                <VulnerabilityHeader showBreadcrumb={false} />
                <Main>
                    <InventoryCmp
                        hasCheckbox={data.length !== 0}
                        page={meta.page}
                        total={meta.total_items}
                        perPage={meta.page_size}
                        onRefresh={this.handleRefresh}
                        items={items}
                    >
                        <ToolbarGroup className="systems-toolbar">
                            <div>
                                <SimpleTableFilter
                                    onFilterChange={this.handleFilterChange}
                                    buttonTitle={null}
                                    placeholder="Find a system by UUID"
                                />
                            </div>
                            <div>
                                <BaseKebab dropdownItems={kebabOptions} />
                            </div>
                        </ToolbarGroup>
                    </InventoryCmp>
                </Main>
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        systems: sAllSystems(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        setHeader: header => dispatch(setHeader(header)),
        fetchData: options => dispatch(fetchSystems(options)),
        optOutSystems: (systems, status) => dispatch(optOutSystemsAction(systems, status)),
        addNotification: notification => dispatch(addNotification(notification))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(Systems)
);
