import '@testing-library/jest-dom';
import configureStore from 'redux-mock-store';
import ReportsPage from './ReportsPage';
import { useSelector } from 'react-redux';
import { render, screen, waitFor } from '@testing-library/react';
import { useHybridSystemFilterFlag, useFeatureFlag } from '../../../Helpers/Hooks';
import { ComponentWithContext } from '../../../Utilities/TestingUtilities';
import { buildFilters } from '../../../Helpers/ReportsHelper';
import TestWrapper from '../../../Utilities/TestWrapper';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true], false],
    useFeatureFlag: jest.fn(() => false),
    useHybridSystemFilterFlag: jest.fn(() => false)
}));

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));
jest.mock('../../../Helpers/ReportsHelper', () => ({
    ...jest.requireActual('../../../Helpers/ReportsHelper'),
    __esModule: true,
    buildFilters: jest.fn(() => {})
}));


jest.mock("../../../Helpers/APIHelper.js", () => ({
    ...jest.requireActual("../../../Helpers/APIHelper.js"),
    getOperatingSystems: () => ({}),
    getCveListByAccount: () => new Promise(() => {}, () => {})
}));

const state = {
    parameters: {}
}

const customMiddleWare = store => next => action => {
    useSelector.mockImplementation(callback => {
        return callback({ ReportsPageStore: state });
    });
    next(action);
}

const mockStore = configureStore([customMiddleWare]);

const store = mockStore(state);

beforeEach(() => {
    store.clearActions();
    useSelector.mockImplementation(callback => {
        return callback({ ReportsPageStore: state });
    });
});

describe('Reports page component', () => {
    it('Should match snapshots', () => {
        const { asFragment } = render(
            <TestWrapper store={ store }>
                <ReportsPage />
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it('Should open configuration modal upon clicking button in the second card and close upon clicking cancel.', () => {
        render(
            <TestWrapper store={ store }>
                <ReportsPage />
            </TestWrapper>
        );

        userEvent.click(screen.getByText(/create report/i));

        expect(screen.getByRole('heading', { name: 'Report by CVEs' })).toBeVisible();

        userEvent.click(screen.getByRole('button', {
            name: /cancel/i
        }));

        expect(screen.queryByRole('heading', { name: 'Report by CVEs' })).toBeFalsy();
    });

    it('Should open configuration modal upon clicking button in the second card and close and start download upon clicking export.', () => {
        render(
            <TestWrapper store={ store }>
                <ReportsPage />
            </TestWrapper>
        );

        userEvent.click(screen.getByText(/create report/i));

        expect(screen.getByRole('heading', { name: 'Report by CVEs' })).toBeVisible();

        userEvent.click(screen.getByRole('button', {
            name: /handle download button/i
        }));

        expect(screen.queryByRole('heading', { name: 'Report by CVEs' })).toBeFalsy();
    });

    it('Should pass enabled feature flag to DownloadCvesReport.', async () => {
        useHybridSystemFilterFlag.mockReturnValue(true);

        const { unmount } = render(<ComponentWithContext>
            <ReportsPage/>
        </ComponentWithContext>)

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        (await screen.findByLabelText('Handle download button')).click();

        expect(buildFilters).toHaveBeenCalledWith(
            expect.any(Object),
            true,
        );
    });

    it('Should pass enabled feature flag to DownloadCvesReport.', async () => {
        useHybridSystemFilterFlag.mockReturnValue(true);

        const { unmount } = render(<ComponentWithContext>
            <ReportsPage/>
        </ComponentWithContext>)

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        (await screen.findByLabelText('Handle download button')).click();

        expect(buildFilters).toHaveBeenCalledWith(
            expect.any(Object),
            true,
        );
    });

    it('Should hide Systems filter when edge parity feature is disabled', async () => {
        render(<ComponentWithContext renderOptions={{ store }}> 
            <ReportsPage />
        </ComponentWithContext>);

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        await waitFor(() => {
            screen.findByLabelText('Custom report modal');
        });
   
        expect(screen.queryByText(/systems: 1 or more/i)).toBeNull() 
    });

    it('Should show Systems filter when edge parity feature is enabled, but hybrid filtering is not enabled', async () => {
        useFeatureFlag.mockReturnValue(true);
        useHybridSystemFilterFlag.mockReturnValue(false);
        render(<ComponentWithContext renderOptions={{ store }}> 
            <ReportsPage />
        </ComponentWithContext>);

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        await waitFor(() => {
            screen.findByLabelText('Custom report modal');
        });

        expect(screen.getByText(/^systems: 1 or more$/i)).toBeVisible();
    });

    it('Should show Systems filter when edge parity feature is enabled, and hybrid filtering is enabled', async () => {
        useFeatureFlag.mockReturnValue(true);
        useHybridSystemFilterFlag.mockReturnValue(true);
        render(<ComponentWithContext renderOptions={{ store }}> 
            <ReportsPage />
        </ComponentWithContext>);

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        await waitFor(() => {
            screen.findByLabelText('Custom report modal');
        });

        expect(screen.getByText(/systems: 1 or more conventional \(rpm\-dnf\), 1 or more immutable \(ostree\)/i)).toBeVisible();
    });


    it('Should show Systems filter when edge parity feature is enabled, and hybrid filtering is enabled', async () => {
        useFeatureFlag.mockReturnValue(true);
        useHybridSystemFilterFlag.mockReturnValue(true);
        render(<ComponentWithContext renderOptions={{ store }}> 
            <ReportsPage />
        </ComponentWithContext>);

        await waitFor(() => {
            screen.findByLabelText('Custom report button');
        });

        (await screen.findByLabelText('Custom report button')).click();

        await waitFor(() => {
            screen.findByLabelText('Custom report modal');
        });

        expect(screen.getByText(/systems: 1 or more conventional \(rpm\-dnf\), 1 or more immutable \(ostree\)/i)).toBeVisible();
    });
});

