import React, { useEffect, useState, Fragment } from 'react';
import { Text, TextContent, TextVariants } from '@patternfly/react-core';
import { SkeletonTable } from '@redhat-cloud-services/frontend-components';
import PropType from 'prop-types';
import { FormattedMessage } from 'react-intl';
import { useSelector, useDispatch } from 'react-redux';
import { createSelector } from 'reselect';
import { InsightsReportCard } from '@redhat-cloud-services/frontend-components-inventory-insights';
import { fetchInsigtsSystemRules } from '../../../Store/Actions/Actions';
import { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';

import messages from '../../../Messages';

export const InsightsSystemRule = ({ systemId }) => {
    const dispatch = useDispatch();

    const [report, setReport] = useState();

    const selectSystemRule = createSelector(
        ({ InsightsRuleStore, CVEStore: { affectedSystemsByCVE: { openedRows, payload: { data } } } }) => ({
            openedRows,
            systemRules: InsightsRuleStore.systemRules,
            rulesData: data
        }),
        ({ systemRules, openedRows, rulesData }) => ({
            systemRule: systemRules.filter(({ id }) => id === systemId),
            isOpen: openedRows.includes(systemId),
            ...rulesData.find(({ id }) => id === systemId) || { attributes: {} }
        })
    );

    const isLoading = useSelector(
        ({ InsightsRuleStore }) => InsightsRuleStore.isLoading,
    );
    const error = useSelector(
        ({ InsightsRuleStore }) => InsightsRuleStore.error,
    );

    const { systemRule, isOpen, attributes: { rule } } = useSelector(selectSystemRule);
    useEffect(() => {
        if (isOpen && !systemRule.length) {
            dispatch(
                fetchInsigtsSystemRules(systemId, rule.rule_id)
            );

        }
    }, [isOpen]);

    useEffect(() => {
        let [report] = systemRule.map(({ rules }) => rules.find(({ rule }) => rule.rule_id === rule.rule_id));
        setReport(report);
    }, [isLoading]);

    return (
        isLoading ? <SkeletonTable colSize={1} rowSize={3} />
            : error ? <InsightsSystemRuleError/>
                : (
                    <Fragment>
                        <TextContent className="icon-with-label">
                            <Text component={TextVariants.h3}>
                                <CSAwIcon/> {rule.rule_description || rule.rule_id}
                            </Text>
                        </TextContent>

                        {
                            report ? <InsightsReportCard report={report} /> : <InsightsNoSystemRule/>
                        }
                    </Fragment>
                )

    );
};

InsightsSystemRule.propTypes = {
    systemId: PropType.string
};

export const InsightsNoSystemRule = () => {
    return <FormattedMessage {...messages.exposedSystemNoRules} />;
};

const InsightsSystemRuleError = () => {
    return <FormattedMessage {...messages.errorReload} />;
};
