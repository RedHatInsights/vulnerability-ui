import React, { Fragment } from 'react';
import BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';
import ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';
import { classNames, expandable, sortable } from '@patternfly/react-table';
import { renderSystemCSAwIcon } from './VulnerabilitiesHelper';
import StatusColumn from '../Components/PresentationalComponents/StatusColumn/StatusColumn';
import messages from '../Messages';
import { intl } from '../Utilities/IntlProvider';

export const DEFAULT_PAGE_SIZE = 20;
export const RH_KB_URL = 'https://access.redhat.com/node';
export const CVES_PATH = `${document.baseURI}insights/vulnerability/cves`;

export const impactTextList = {
    critical: intl.formatMessage(messages.impactTextListCritical),
    important: intl.formatMessage(messages.impactTextListImportant),
    moderate: intl.formatMessage(messages.impactTextListModerate),
    low: intl.formatMessage(messages.impactTextListLow)
};

export const PATHS = {
    vulnerabilities: {
        title: 'Vulnerability',
        to: '/'
    },
    vulnerabilitiesCves: {
        title: 'CVEs',
        to: '/cves'
    },
    cvePage: {
        title: 'CVE',
        to: '/cves/:cve'
    },
    systems: {
        title: 'Systems',
        to: '/systems'
    },
    inventoryDetail: {
        title: 'Inventory Detail',
        to: '/systems/:inventoryId'
    },
    cvepagePath: {
        title: 'CVE Page',
        to: '/cves/:cve/:inventoryId'
    },
    upgrade: {
        title: 'Upgrade',
        to: '/upgrade'
    }
};
export const impactColorList = {
    unknown: 'severity-unknown',
    default: 'severity-low',
    danger: 'severity-critical',
    warning: 'severity-moderate',
    orange: 'severity-color-important'
};

export const impactList = {
    Critical: {
        title: intl.formatMessage(messages.impactListCritical),
        color: impactColorList.danger,
        text: impactTextList.critical
    },
    High: {
        title: intl.formatMessage(messages.impactListHigh),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Important: {
        title: intl.formatMessage(messages.impactListImportant),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Medium: {
        title: intl.formatMessage(messages.impactListMedium),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Moderate: {
        title: intl.formatMessage(messages.impactListModerate),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Low: {
        title: intl.formatMessage(messages.impactListLow),
        color: impactColorList.default,
        text: impactTextList.low
    }
};

// Read-only mode notification text
export const ReadOnlyNotification = {
    title: intl.formatMessage(messages.readOnlyNotificationTitle),
    detail: intl.formatMessage(messages.readOnlyNotificationBody)
};

export const SECURITY_RULE_OPTIONS = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
    { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
];

//CVSS Base score label to value
export const CVSS_OPTIONS = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'less4', label: '0.0 - 3.9', from: 0, to: 3.999 },
    { value: 'from4to8', label: '4.0 - 7.9', from: 4, to: 7.999 },
    { value: 'from8to10', label: '8.0 - 10.0', from: 8, to: 10 }
];

const substractDays = (toSubstract, currDate = new Date()) => {
    return currDate.setDate(currDate.getDate() - toSubstract);
};

const substractYears = (toSubstract, currDate = new Date()) => {
    return currDate.setFullYear(currDate.getFullYear() - toSubstract);
};

//Public date labels to value
export const PUBLIC_DATE_OPTIONS = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'last7', label: intl.formatMessage(messages.lastxdays, { days: 7 }), from: substractDays(7) },
    { value: 'last30', label: intl.formatMessage(messages.lastxdays, { days: 30 }), from: substractDays(30) },
    { value: 'last90', label: intl.formatMessage(messages.lastxdays, { days: 90 }), from: substractDays(90) },
    { value: 'lastYear', label: intl.formatMessage(messages.lastYear), from: substractYears(1) },
    { value: 'MoreThanYear', label: intl.formatMessage(messages.moreThanYear), to: substractYears(1) }
];

export const AFFECTING_SYSTEMS_OPTIONS = [
    { value: 'hide',  label: intl.formatMessage(messages.hideCvesNoEffecting) },
    { value: 'show', label: intl.formatMessage(messages.showCvesAffecting) }
];

export const IMPACT_OPTIONS = [
    {
        label: intl.formatMessage(messages.impactListCritical),
        value: '7',
        hasIcon: true,
        iconColor: 'var(--pf-global--danger-color--100)'
    },
    {
        label: intl.formatMessage(messages.impactListImportant),
        value: '5',
        hasIcon: true,
        iconColor: 'var(--pf-global--palette--orange-300)' },
    {
        label: intl.formatMessage(messages.impactListModerate),
        value: '4',
        hasIcon: true,
        iconColor: 'var(--pf-global--warning-color--100)'
    },
    {
        label: intl.formatMessage(messages.impactListLow),
        value: '2',
        hasIcon: true,
        iconColor: 'var(--pf-global--Color--200)'
    },
    {
        label: intl.formatMessage(messages.impactListUnknown),
        value: '1',
        hasIcon: false
    }
];

export const STATUS_OPTIONS = [
    { label: intl.formatMessage(messages.notReviewed), value: '0' },
    { label: intl.formatMessage(messages.inReview), value: '1' },
    { label: intl.formatMessage(messages.onHold), value: '2' },
    { label: intl.formatMessage(messages.scheduledPatch), value: '3' },
    { label: intl.formatMessage(messages.resolved), value: '4' },
    { label: intl.formatMessage(messages.noAction), value: '5' },
    { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }
];

export const BUSINESS_RISK_OPTIONS = [
    {
        value: '3',
        label: intl.formatMessage(messages.high)
    },

    {
        value: '2',
        label: intl.formatMessage(messages.medium)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.low)
    },
    {
        value: '0',
        label: intl.formatMessage(messages.notDefined)
    }
];

export const FILTERS = {
    cvss_filter: {
        title: intl.formatMessage(messages.cvssBaseScore),
        items: CVSS_OPTIONS.map(item => ({ ...item }))
    },
    publish_date: {
        title: intl.formatMessage(messages.publishDate),
        items: PUBLIC_DATE_OPTIONS.map(item => ({ ...item }))
    },
    show_all: {
        title: intl.formatMessage(messages.filterAffectingCVEs),
        items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ ...item }))
    },
    impact: {
        title: intl.formatMessage(messages.impact),
        items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value }))
    },
    status_id: {
        title: intl.formatMessage(messages.status),
        items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))
    },
    business_risk_id: {
        title: intl.formatMessage(messages.businessRisk),
        items: BUSINESS_RISK_OPTIONS.map(item => ({ ...item }))
    },
    security_rule: {
        title: intl.formatMessage(messages.securityRules),
        items: SECURITY_RULE_OPTIONS.map(item => ({ ...item }))
    }
};

export const CVSSHeader =  [
    intl.formatMessage(messages.cvssScoreRange),
    intl.formatMessage(messages.numberOfCves)
];

export const recentCvesHeader =  [
    intl.formatMessage(messages.timeFrame),
    intl.formatMessage(messages.numberOfCves)
];

export const CVSSMapping = {
    '8to10': '8.0 - 10.0',
    '4to7.9': '4.0 - 7.9',
    '0to3.9': '0.0 - 3.9'
};

export const recentCvesMapping = {
    last7days: intl.formatMessage(messages.lastxdays, { days: 7 }),
    last30days: intl.formatMessage(messages.lastxdays, { days: 30 }),
    last90days: intl.formatMessage(messages.lastxdays, { days: 90 })
};

export const RISK_OF_CHANGE_TOOLTIP = {
    1: intl.formatMessage(messages.riskOfChangeTooltipVeryLow),
    2: intl.formatMessage(messages.riskOfChangeTooltipLow),
    3: intl.formatMessage(messages.riskOfChangeTooltipModerate),
    4: intl.formatMessage(messages.riskOfChangeTooltipHigh)
};

export const RISK_OF_CHANGE_LABEL = {
    1: (
        <Fragment>
            <BellIcon color={'var(--pf-global--info-color--200)'} />
            {intl.formatMessage(messages.impactListVeryLow)}
        </Fragment>
    ),
    2: (
        <Fragment>
            <ExclamationTriangleIcon color={'var(--pf-global--info-color--100)'} />
            {intl.formatMessage(messages.impactListLow)}
        </Fragment>
    ),
    3: (
        <Fragment>
            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />
            {intl.formatMessage(messages.impactListModerate)}
        </Fragment>
    ),
    4: (
        <Fragment>
            <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} />
            {intl.formatMessage(messages.impactListHigh)}
        </Fragment>
    )
};

export const VULNERABILITIES_HEADER = [
    {
        title: intl.formatMessage(messages.cveId),
        key: 'synopsis',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')],
        cellFormatters: [expandable]
    },
    {
        title: intl.formatMessage(messages.publishDate),
        key: 'public_date',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('hide-description')]
    },
    {
        title: intl.formatMessage(messages.impact),
        key: 'impact',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')]
    },
    {
        title: intl.formatMessage(messages.cvssBaseScore),
        key: 'cvss_score',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: intl.formatMessage(messages.systemsExposed),
        key: 'systems_affected',
        transforms: [sortable, classNames('col-width-10')] },
    {
        title: intl.formatMessage(messages.businessRisk),
        key: 'business_risk',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: intl.formatMessage(messages.status),
        key: 'status',
        transforms: [sortable, classNames('col-width-10')] }
];

export const SYSTEMS_EXPOSED_HEADER = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        composed: ['facts.os_release', 'display_name'],
        props: {
            width: 40
        },
        renderFunc: (item, _id, { rule }) => renderSystemCSAwIcon(item, rule)
    },
    {
        key: 'status',
        title: intl.formatMessage(messages.status),
        props: {
            width: 30
        },
        renderFunc: (
            value,
            _id,
            { cve_status_id: cveStatusId, status_id: systemStatusId }
        ) => <StatusColumn cveStatusId={cveStatusId} systemStatusId={systemStatusId} />
    }
];

export const SYSTEMS_HEADER = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        composed: ['facts.os_release', 'display_name']
    },
    {
        key: 'cve_count',
        title: intl.formatMessage(messages.systemsColumnHeaderCveCount)
    }
];

export const SYSTEM_DETAILS_HEADER = [
    {
        title: intl.formatMessage(messages.cveId),
        key: 'synopsis',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')],
        cellFormatters: [expandable]
    },
    {
        title: intl.formatMessage(messages.publishDate),
        key: 'public_date',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: intl.formatMessage(messages.impact),
        key: 'impact',
        transforms: [sortable, classNames('col-width-10')],
        columnTransforms: [classNames('no-wrap')]
    },
    {
        title: intl.formatMessage(messages.cvssBaseScore),
        key: 'cvss_score',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: intl.formatMessage(messages.businessRisk),
        key: 'business_risk',
        transforms: [sortable, classNames('col-width-10')]
    },
    {
        title: intl.formatMessage(messages.status),
        key: 'status',
        transforms: [sortable, classNames('col-width-10')]
    }
];
export const CVES_ALLOWED_PARAMS = [
    'cvss_filter',
    'publish_date',
    'filter',
    'limit',
    'offset',
    'page',
    'page_size',
    'sort',
    'impact',
    'business_risk_id',
    'status_id',
    'security_rule'
];

export const SYSTEMS_EXPOSED_ALLOWED_PARAMS = ['filter', 'page', 'page_size', 'status_id', 'security_rule'];

export const SYSTEMS_ALLOWED_PARAMS = ['filter', 'page', 'page_size', 'opt_out'];
