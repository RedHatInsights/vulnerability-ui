import messages from '../Messages';
import { getFilters, ONLY_NON_VULNERABLE_SYSTEMS } from './constants';
import { intl } from '../Utilities/IntlProvider';
import isEqual from 'lodash/isEqual';

export const handleChangePage = (_event, page, apply) => apply({ page });

export const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });

export const exportConfig = (methods) => (
    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }
);

export const buildActiveFilters = (currentFilters, filterRuleValues = [], shouldUseHybridSystemFilter = false) => {
    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;
    const FILTERS = getFilters(shouldUseHybridSystemFilter);

    const buildChip = (key, parameter) => (
        FILTERS[key].items.reduce((object, item) => {
            if (parameter === item.value) {
                object.name = item.label;
                object.value = item.value;
            }
            else if (key === 'rule_presence') {
                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);

                ['true', 'false', ONLY_NON_VULNERABLE_SYSTEMS].includes(parameter)
                    ? object.name = FILTERS.rule_presence.items.find(e => e.value === parameter).label
                    : object.name = filteredRule && filteredRule.label || parameter;

                object.value = parameter;
            }

            return object;
        }, {})
    );

    const buildChips = (paramValues, key) => {
        return paramValues.reduce((values, parameter) => {
            values.push(buildChip(key, parameter));
            return values;
        }, []);
    };

    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);

    // FIXME please!!!
    const filterChips = Object.keys(FILTERS).reduce((array, key) => {
        if (key === 'rule_presence' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {
            const multiValue = [].concat(
                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],
                currentFilters.rule ? currentFilters.rule.split(',') : []);
            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });
        }
        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {
            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';
            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';

            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {
                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });
            }
        }
        else if (key === 'rhel_version' && hasValue(currentFilters, 'rhel_version')) {
            array.push({
                key,
                multiValue: currentFilters.rhel_version.split(','),
                category: 'Operating system',
                chips: currentFilters.rhel_version
                    .split(',')
                    .map((v) => ({ value: v, name: `RHEL ${v}` }))
            });
        }
        else if (hasValue(currentFilters, key)) {
            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');
            const filteredValues = (multiValue && multiValue.length > 1)
                && buildChips(multiValue, key)
                || [buildChip(key, currentFilters[key])];

            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });
        }

        return array;
    }, []);

    nameFilter && filterChips.push(
        {
            key: 'filter',
            category: intl.formatMessage(messages.searchLabel),
            chips: [{ name: nameFilter }]
        }
    );

    advisoryFilter && filterChips.push(
        {
            key: 'advisory',
            category: intl.formatMessage(messages.advisoryName),
            chips: [{ name: advisoryFilter }]
        }
    );

    return filterChips;
};

export const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {
    if (reset) {
        apply({ ...defaultFilters, page: 1, reset });
        return;
    }

    const emptyFilter = chips.reduce((obj, item) => {
        if (item.key === 'rule_presence') {
            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));
            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';
            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';
        }
        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {
            obj[item.key] = '';
        }
        else if (item.key === 'cvss_filter') {
            obj.cvss_filter = undefined;
            obj.cvss_from = undefined;
            obj.cvss_to = undefined;
        }
        else if (item.multiValue) {
            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');
        }

        if (obj[item.key] === '') {
            obj[item.key] = undefined;
        }

        return obj;
    }, {});

    apply({ ...emptyFilter, page: 1 });
};

export const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {
    // filter out params which have nothing to do with filter chips, like page, sort, etc.
    currentParams = filterParams.reduce((acc, param) => (
        {
            ...acc,
            ...currentParams[param] && { [param]: currentParams[param] }
        }
    ), {});

    return isEqual(currentParams, defaultParams);
};
