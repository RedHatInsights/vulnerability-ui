import { DropdownPosition, Page } from '@patternfly/react-core';
import { InvalidObject, Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React, { useMemo, useState, useEffect } from 'react';
import { createCveDetailsPage } from '../../../Helpers/CVEHelper';
import { useDispatch, useSelector } from 'react-redux';
import {
    fetchCveDetails,
    setHeader,
    changeExposedSystemsParameters,
    fetchAffectedSystemsByCVE
} from '../../../Store/Actions/Actions';
import { withRouter } from 'react-router-dom';
import { PATHS } from '../../../Helpers/constants';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import CveStatusModal from '../Modals/CveStatusModal';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

export const CVEPageContext = React.createContext({ isLoading: true });

const CVEDetailsPage = (props) => {
    const dispatch = useDispatch();
    const [cveName] = useState(props.match.params.cve);
    const [BusinessModal, setBusinessRisk] = useState(() => () => null);
    const [StatusModal, setStatusModal] = useState(() => () => null);

    const details = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails
    );
    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);

    useEffect(() => {
        dispatch(
            setHeader({
                breadcrumbs: [
                    { title: PATHS.home.title, to: PATHS.home.to },
                    { title: PATHS.cvesPage.title, to: PATHS.cvesPage.to },
                    { title: cveName, isActive: true }
                ]
            })
        );
        dispatch(fetchCveDetails(cveName));
    }, []);

    const showBusinessRiskModal = cves => {
        setBusinessRisk(
            () => () =>
                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />
        );
    };

    const showStatusModal = cves => {
        setStatusModal(
            () => () =>
                <CveStatusModal
                    cves={cves}
                    updateRef={() => {
                        dispatch(fetchCveDetails(cveName));
                        dispatch(fetchAffectedSystemsByCVE(cveName));
                    }}
                />
        );
    };

    const { error, data } = cveDetails;

    const cveStatusDetails = {
        id: cveName,
        status_id: cveDetails.data.status_id,
        justification: cveDetails.data.status_justification
    };
    const kebabItems = [
        kebabItemEditBusinessRisk(showBusinessRiskModal, [
            {
                business_risk_id: cveDetails.data.business_risk_id,
                id: cveName,
                justification: cveDetails.data.business_risk_justification
            }
        ]),
        kebabItemEditStatus(showStatusModal, [cveStatusDetails])
    ];
    const { rules } = data;
    const filterRuleValues = rules && rules.map(
        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })
    );

    if (!error) {
        return (
            <Page>
                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>
                    <VulnerabilityHeader
                        title={
                            <span style={{ display: 'flex', justifyContent: 'space-between' }}>
                                {cveName}
                                <BaseKebab dropdownItems={kebabItems} position={DropdownPosition.right}></BaseKebab>
                            </span>
                        }
                    >
                        <CVEPageDetails changeExposedSystemsParameters={changeExposedSystemsParameters} data={cveDetails} />
                        <StatusModal />
                        <BusinessModal />
                    </VulnerabilityHeader>
                    <Main>
                        <SystemsExposedTable
                            cve={cveName}
                            filterRuleValues={filterRuleValues}
                            cveStatusDetails={cveStatusDetails}
                            methods={{ showStatusModal }}
                        />
                    </Main>
                </CVEPageContext.Provider>
            </Page>
        );
    } else {
        return (
            <React.Fragment>
                <VulnerabilityHeader title={cveName}/>
                <InvalidObject />
            </React.Fragment>
        );
    }
};

CVEDetailsPage.propTypes = {
    match: propTypes.object,
    cveDetails: propTypes.object,
    fetchCveDetails: propTypes.func,
    setHeader: propTypes.func,
    handleCveDetailsError: propTypes.func
};
export default withRouter(CVEDetailsPage);
