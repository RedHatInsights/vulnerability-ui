import { Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import propTypes from 'prop-types';
import React from 'react';
import { CVEPageContext } from '../../SmartComponents/CVEPage/CVEPage';
import WithLoader from '../WithLoader/WithLoader';
import './CvssVector.scss';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { V3names, V2names } from './vectorNames';

export const parseVector = (vector, namesMapping) => {
    let res = {};
    vector &&
        vector.split('/').forEach(curr => {
            let [key, val] = curr.split(':');
            const name = namesMapping[key] && namesMapping[key].name;
            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';
            if (name) {
                res[name] = value;
            }
        });
    return res;
};

const CvssVector = props => {
    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;
    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';
    const cvssVector = CVSS3Vector || CVSS2Vector;
    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);
    const parsedVector = parseVector(cvssVector, namesMapping);
    const notAvailable = 'N/A';
    // eslint-disable-next-line no-unused-vars
    const { cvssVersion, ...values } = parsedVector;

    return (
        <CVEPageContext.Consumer>
            {context => (
                <TextContent>
                    <WithLoader loading={context.isLoading}>
                        <Popover
                            position="bottom"
                            maxWidth={'100%'}
                            enableFlip
                            headerContent={ `${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}` }
                            bodyContent={
                                cvssVector ?
                                    (
                                        <Table
                                            aria-label={'Metric breakdown'}
                                            variant={TableVariant.compact}
                                            gridBreakPoint={null}
                                            cells={
                                                [intl.formatMessage(messages.cvssVectorMetric),
                                                    intl.formatMessage(messages.cvssVectorValue)]
                                            }
                                            rows={Object.entries(values)}
                                        >
                                            <TableHeader />
                                            <TableBody />
                                        </Table>
                                    ) : (notAvailable)
                            }
                        >
                            <React.Fragment>
                                <Text component={TextVariants.h6} style={{ display: 'inline-block', cursor: 'pointer' }}>
                                    {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}
                                    <OutlinedQuestionCircleIcon color={'var(--pf-global--secondary-color--100)'}/>
                                </Text>
                                <br />
                            </React.Fragment>
                        </Popover>
                    </WithLoader>

                    <WithLoader loading={context.isLoading}>{cvssVector || notAvailable} </WithLoader>
                </TextContent>
            )}
        </CVEPageContext.Consumer>
    );
};

CvssVector.propTypes = {
    cvss2_metrics: propTypes.string,
    cvss3_metrics: propTypes.string,
    intl: propTypes.any
};

export default injectIntl(CvssVector);
