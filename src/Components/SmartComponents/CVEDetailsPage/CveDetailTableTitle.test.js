import '@testing-library/jest-dom';
import { render, screen, act, waitFor, within } from '@testing-library/react';
import { getAffectedSystemsByCVE } from '../../../Helpers/APIHelper';
import CVEDetailTableTitle from './CVEDetailTableTitle';

jest.mock('@unleash/proxy-client-react', () => ( {
    ...jest.requireActual('@unleash/proxy-client-react'),
    useFlag: () => true, 
    useFlagsStatus: () => ({ flagsReady: true })
}))

jest.mock('../../../Helpers/APIHelper', () => ({
    ...jest.requireActual('../../../Helpers/APIHelper'),
    getAffectedSystemsByCVE: jest.fn()
}));

afterEach(() => {
    jest.resetAllMocks()
});

getAffectedSystemsByCVE.mockImplementation(() => () => Promise.resolve({}))

const waitComponent = async () => {
    await act( async () => {
        render(<CVEDetailTableTitle cveName={'test-cve'}  />);
    });
    await waitFor(() => {
        expect(screen.getByLabelText('Affected systems table title')).toBeDefined();
    });
}

describe('CVE detail table title:', () => {
    test('Should show total number of affected systems when there is an edge device in an account', async () => {
        getAffectedSystemsByCVE.mockImplementation(() => Promise.resolve({ meta: { total_items: 10 } }));
        await waitComponent();

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            '10 Total systems affected'
        );
    });
    test('Should show only Systems as title when there is no edge device in an account', async () => {
        getAffectedSystemsByCVE.mockImplementation(() => Promise.resolve({ meta: { total_items: 0 } }));

        await waitComponent();

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            'Systems'
        );
    });
    test('Should show only systems text in singular when there is a single edge device', async () => {
        getAffectedSystemsByCVE.mockImplementation(() => Promise.resolve({ meta: { total_items: 1 } }));

        await waitComponent();

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            '1 Total system affected'
        );
    });
    test('Should show default label Systems when there is am api error', async () => {
        getAffectedSystemsByCVE.mockImplementation(() => Promise.reject(new Error('API error')));

        await waitComponent();

        expect(screen.getByLabelText('Affected systems table title')).toHaveTextContent(
            'System'
        );
    });
});
