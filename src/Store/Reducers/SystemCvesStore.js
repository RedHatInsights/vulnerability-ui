import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';
import { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';
import unionBy from 'lodash/unionBy';
import { SYSTEM_DETAILS_HEADER } from '../../Helpers/constants';

export const initialState = {
    parameters: {
        page: 1,
        page_size: 20,
        show_advisories: true,
        sort: '-public_date'
    },
    cveList: {
        isLoading: true,
        payload: [],
        meta: new Date(),
        error: false
    },
    expandedRows: [],
    prevLoadedRows: [],
    selectedCves: [],
    selectedRowsRawData: [],
    isAllExpanded: false,
    columns: SYSTEM_DETAILS_HEADER
};

function pendingVulnerabilities(state, { meta }) {
    return {
        ...state,
        timestamp: meta,
        cveList: {
            ...state.cveList,
            isLoading: true
        }
    };
}

function rejectedVulnerabilities(state, { meta, payload }) {
    return {
        ...state,
        timestamp: meta,
        cveList: {
            payload: { errors: payload },
            isLoading: false
        }
    };
}

function fulfilledVulnerabilities(state, action) {
    const { payload, meta } = action;
    if (meta >= state.timestamp) {
        return {
            ...state,
            timestamp: meta,
            cveList: {
                payload,
                isLoading: false
            },
            prevLoadedRows: unionBy(action.payload.data, state.prevLoadedRows, 'id'),
            ...state.isAllExpanded && { expandedRows: action.payload.data.map(({ id }) => ({ id, isOpen: true })) }
        };
    }

    return state;
}

// #TODO refactor to use selectRows helper
function selectEntity(state, action) {
    let newState = state;
    let selectedCves = newState.selectedCves.slice();
    let prevLoadedRows = [].concat(state.prevLoadedRows);

    if (Array.isArray(action.payload)) {
        selectedCves = action.payload;
    } else {
        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||
            selectedCves.push(action.payload);
    }

    let selectedRowsRawData = prevLoadedRows.filter(({ id }) => selectedCves.includes(id));

    return {
        ...newState,
        selectedCves,
        selectedRowsRawData
    };
}

function expandCve(state, action) {
    let newState = state;
    const { isOpen, cves, isAllExpanded } = action.payload;
    let expandedRows = newState.expandedRows.slice();

    if (cves.length > 0) {
        cves.map(cve => {
            const index = expandedRows.findIndex(element => element.id === cve);
            if (index > -1) { expandedRows[index] = ({ id: cve, isOpen }); }
            else { expandedRows.push({ id: cve, isOpen }); }
        });
    }
    else {
        expandedRows = expandedRows.map(cve => ({ id: cve.id, isOpen: false }));
    }

    return { ...newState, expandedRows, isAllExpanded };
}

function changeParameters(state, action) {
    let newState = state;
    newState.parameters = { ...state.parameters, ...action.payload };
    return newState;
}

function clearSystemCvesStore(state) {
    let newState = state;
    newState.selectedCves = [];
    newState.prevLoadedRows = [];
    newState.selectedRowsRawData = [];
    newState.expandedRows = [];
    newState.parameters = {
        page: 1,
        page_size: 20,
        show_advisories: true
    };
    return newState;
}

function changeColumns(state, action) {
    return {
        ...state,
        columns: action.payload
    };
}

export const SystemCvesStore = applyReducerHash({
    [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,
    [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,
    [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,
    ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,
    ['CHANGE_COLUMNS_SYSTEM_DETAIL']: changeColumns,
    ['SELECT_SYSTEM_CVE']: selectEntity,
    ['EXPAND_SYSTEM_CVE']: expandCve,
    ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore
}, initialState);
