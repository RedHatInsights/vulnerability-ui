// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CvssVector Should render CVSSv3 when given both 1`] = `
<injectIntl(CvssVector)
  cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
  cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
>
  <CvssVector
    cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
    cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <Popover
          bodyContent={
            <WithLoader
              colSize={2}
              isLoading={true}
              rowSize={8}
              variant="compactTable"
            >
              <Table
                aria-label="Metric breakdown"
                borders={true}
                canCollapseAll={false}
                canSelectAll={true}
                canSortFavorites={true}
                cells={
                  Array [
                    "Metric",
                    "Value",
                  ]
                }
                className=""
                collapseAllAriaLabel=""
                contentId="expanded-content"
                dropdownDirection="down"
                dropdownPosition="right"
                expandId="expandable-toggle"
                gridBreakPoint=""
                isHeaderSelectDisabled={false}
                isNested={false}
                isStickyHeader={false}
                isTreeTable={false}
                ouiaSafe={true}
                role="grid"
                rowLabeledBy="simple-node"
                rows={
                  Array [
                    Array [
                      "Attack vector",
                      "Adjacent",
                    ],
                    Array [
                      "Attack complexity",
                      "Low",
                    ],
                    Array [
                      "Privileges required",
                      "Low",
                    ],
                    Array [
                      "User interaction",
                      "Required",
                    ],
                    Array [
                      "Scope",
                      "Unchanged",
                    ],
                    Array [
                      "Confidentiality",
                      "Low",
                    ],
                    Array [
                      "Integrity",
                      "None",
                    ],
                    Array [
                      "Availability",
                      "None",
                    ],
                  ]
                }
                selectVariant="checkbox"
                variant="compact"
              >
                <TableHeader />
                <TableBody />
              </Table>
            </WithLoader>
          }
          enableFlip={true}
          headerContent="CVSS 3.0  vector breakdown"
          id="popover-cvss"
          maxWidth="100%"
          position="bottom"
        >
          <Popper
            appendTo={[Function]}
            distance={25}
            enableFlip={true}
            flipBehavior={
              Array [
                "top",
                "right",
                "bottom",
                "left",
                "top",
                "right",
                "bottom",
              ]
            }
            isVisible={false}
            onDocumentClick={[Function]}
            onDocumentKeyDown={[Function]}
            onTriggerClick={[Function]}
            placement="bottom"
            popper={
              <ForwardRef
                active={false}
                aria-describedby="popover-popover-cvss-body"
                aria-labelledby="popover-popover-cvss-header"
                aria-modal="true"
                className="pf-c-popover"
                focusTrapOptions={
                  Object {
                    "clickOutsideDeactivates": true,
                    "fallbackFocus": [Function],
                    "returnFocusOnDeactivate": true,
                    "tabbableOptions": Object {
                      "displayCheck": "none",
                    },
                  }
                }
                onMouseDown={[Function]}
                preventScrollOnDeactivate={true}
                role="dialog"
                style={
                  Object {
                    "maxWidth": "100%",
                    "minWidth": null,
                    "opacity": 0,
                    "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                  }
                }
              >
                <PopoverArrow />
                <PopoverContent>
                  <PopoverCloseButton
                    aria-label="Close"
                    onClose={[Function]}
                  />
                  <PopoverHeader
                    alertSeverityScreenReaderText="undefined alert:"
                    icon={null}
                    id="popover-popover-cvss-header"
                    titleHeadingLevel="h6"
                  >
                    CVSS 3.0  vector breakdown
                  </PopoverHeader>
                  <PopoverBody
                    id="popover-popover-cvss-body"
                  >
                    <WithLoader
                      colSize={2}
                      isLoading={true}
                      rowSize={8}
                      variant="compactTable"
                    >
                      <Table
                        aria-label="Metric breakdown"
                        borders={true}
                        canCollapseAll={false}
                        canSelectAll={true}
                        canSortFavorites={true}
                        cells={
                          Array [
                            "Metric",
                            "Value",
                          ]
                        }
                        className=""
                        collapseAllAriaLabel=""
                        contentId="expanded-content"
                        dropdownDirection="down"
                        dropdownPosition="right"
                        expandId="expandable-toggle"
                        gridBreakPoint=""
                        isHeaderSelectDisabled={false}
                        isNested={false}
                        isStickyHeader={false}
                        isTreeTable={false}
                        ouiaSafe={true}
                        role="grid"
                        rowLabeledBy="simple-node"
                        rows={
                          Array [
                            Array [
                              "Attack vector",
                              "Adjacent",
                            ],
                            Array [
                              "Attack complexity",
                              "Low",
                            ],
                            Array [
                              "Privileges required",
                              "Low",
                            ],
                            Array [
                              "User interaction",
                              "Required",
                            ],
                            Array [
                              "Scope",
                              "Unchanged",
                            ],
                            Array [
                              "Confidentiality",
                              "Low",
                            ],
                            Array [
                              "Integrity",
                              "None",
                            ],
                            Array [
                              "Availability",
                              "None",
                            ],
                          ]
                        }
                        selectVariant="checkbox"
                        variant="compact"
                      >
                        <TableHeader />
                        <TableBody />
                      </Table>
                    </WithLoader>
                  </PopoverBody>
                </PopoverContent>
              </ForwardRef>
            }
            popperMatchesTriggerWidth={false}
            positionModifiers={
              Object {
                "bottom": "pf-m-bottom",
                "bottom-end": "pf-m-bottom-right",
                "bottom-start": "pf-m-bottom-left",
                "left": "pf-m-left",
                "left-end": "pf-m-left-bottom",
                "left-start": "pf-m-left-top",
                "right": "pf-m-right",
                "right-end": "pf-m-right-bottom",
                "right-start": "pf-m-right-top",
                "top": "pf-m-top",
                "top-end": "pf-m-top-right",
                "top-start": "pf-m-top-left",
              }
            }
            removeFindDomNode={false}
            trigger={
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                CVSS 3.0
                 
                 base score
                <OutlinedQuestionCircleIcon
                  className="pf-u-ml-xs"
                  color="var(--pf-global--secondary-color--100)"
                  noVerticalAlign={false}
                  size="sm"
                />
              </Label>
            }
            zIndex={9999}
          >
            <FindRefWrapper
              onFoundRef={[Function]}
            >
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                <span
                  className="vuln-label pf-u-mb-xs pointer"
                  style={
                    Object {
                      "display": "block",
                      "fontSize": "medium",
                    }
                  }
                >
                  CVSS 3.0
                   
                   base score
                  <OutlinedQuestionCircleIcon
                    className="pf-u-ml-xs"
                    color="var(--pf-global--secondary-color--100)"
                    noVerticalAlign={false}
                    size="sm"
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-u-ml-xs"
                      fill="var(--pf-global--secondary-color--100)"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"
                      />
                    </svg>
                  </OutlinedQuestionCircleIcon>
                </span>
              </Label>
            </FindRefWrapper>
          </Popper>
        </Popover>
        <WithLoader
          isLoading={true}
          style={
            Object {
              "width": "320px",
            }
          }
        >
          <Skeleton
            size="lg"
            style={
              Object {
                "width": "320px",
              }
            }
          >
            <Skeleton
              className="ins-c-skeleton ins-c-skeleton__lg"
              style={
                Object {
                  "width": "320px",
                }
              }
            >
              <div
                className="pf-c-skeleton ins-c-skeleton ins-c-skeleton__lg"
                style={
                  Object {
                    "width": "320px",
                  }
                }
              >
                <span
                  className="pf-u-screen-reader"
                />
              </div>
            </Skeleton>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render with CVSSv2 1`] = `
<injectIntl(CvssVector)
  cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
>
  <CvssVector
    cvss2_metrics="AV:L/AC:H/Au:N/C:N/I:N/A:P"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <Popover
          bodyContent={
            <WithLoader
              colSize={2}
              isLoading={true}
              rowSize={8}
              variant="compactTable"
            >
              <Table
                aria-label="Metric breakdown"
                borders={true}
                canCollapseAll={false}
                canSelectAll={true}
                canSortFavorites={true}
                cells={
                  Array [
                    "Metric",
                    "Value",
                  ]
                }
                className=""
                collapseAllAriaLabel=""
                contentId="expanded-content"
                dropdownDirection="down"
                dropdownPosition="right"
                expandId="expandable-toggle"
                gridBreakPoint=""
                isHeaderSelectDisabled={false}
                isNested={false}
                isStickyHeader={false}
                isTreeTable={false}
                ouiaSafe={true}
                role="grid"
                rowLabeledBy="simple-node"
                rows={
                  Array [
                    Array [
                      "Access vector",
                      "Local",
                    ],
                    Array [
                      "Access complexity",
                      "High",
                    ],
                    Array [
                      "Authentication",
                      "None",
                    ],
                    Array [
                      "Confidentiality impact",
                      "None",
                    ],
                    Array [
                      "Integrity impact",
                      "None",
                    ],
                    Array [
                      "Availability impact",
                      "Partial",
                    ],
                  ]
                }
                selectVariant="checkbox"
                variant="compact"
              >
                <TableHeader />
                <TableBody />
              </Table>
            </WithLoader>
          }
          enableFlip={true}
          headerContent="CVSS 2.0  vector breakdown"
          id="popover-cvss"
          maxWidth="100%"
          position="bottom"
        >
          <Popper
            appendTo={[Function]}
            distance={25}
            enableFlip={true}
            flipBehavior={
              Array [
                "top",
                "right",
                "bottom",
                "left",
                "top",
                "right",
                "bottom",
              ]
            }
            isVisible={false}
            onDocumentClick={[Function]}
            onDocumentKeyDown={[Function]}
            onTriggerClick={[Function]}
            placement="bottom"
            popper={
              <ForwardRef
                active={false}
                aria-describedby="popover-popover-cvss-body"
                aria-labelledby="popover-popover-cvss-header"
                aria-modal="true"
                className="pf-c-popover"
                focusTrapOptions={
                  Object {
                    "clickOutsideDeactivates": true,
                    "fallbackFocus": [Function],
                    "returnFocusOnDeactivate": true,
                    "tabbableOptions": Object {
                      "displayCheck": "none",
                    },
                  }
                }
                onMouseDown={[Function]}
                preventScrollOnDeactivate={true}
                role="dialog"
                style={
                  Object {
                    "maxWidth": "100%",
                    "minWidth": null,
                    "opacity": 0,
                    "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                  }
                }
              >
                <PopoverArrow />
                <PopoverContent>
                  <PopoverCloseButton
                    aria-label="Close"
                    onClose={[Function]}
                  />
                  <PopoverHeader
                    alertSeverityScreenReaderText="undefined alert:"
                    icon={null}
                    id="popover-popover-cvss-header"
                    titleHeadingLevel="h6"
                  >
                    CVSS 2.0  vector breakdown
                  </PopoverHeader>
                  <PopoverBody
                    id="popover-popover-cvss-body"
                  >
                    <WithLoader
                      colSize={2}
                      isLoading={true}
                      rowSize={8}
                      variant="compactTable"
                    >
                      <Table
                        aria-label="Metric breakdown"
                        borders={true}
                        canCollapseAll={false}
                        canSelectAll={true}
                        canSortFavorites={true}
                        cells={
                          Array [
                            "Metric",
                            "Value",
                          ]
                        }
                        className=""
                        collapseAllAriaLabel=""
                        contentId="expanded-content"
                        dropdownDirection="down"
                        dropdownPosition="right"
                        expandId="expandable-toggle"
                        gridBreakPoint=""
                        isHeaderSelectDisabled={false}
                        isNested={false}
                        isStickyHeader={false}
                        isTreeTable={false}
                        ouiaSafe={true}
                        role="grid"
                        rowLabeledBy="simple-node"
                        rows={
                          Array [
                            Array [
                              "Access vector",
                              "Local",
                            ],
                            Array [
                              "Access complexity",
                              "High",
                            ],
                            Array [
                              "Authentication",
                              "None",
                            ],
                            Array [
                              "Confidentiality impact",
                              "None",
                            ],
                            Array [
                              "Integrity impact",
                              "None",
                            ],
                            Array [
                              "Availability impact",
                              "Partial",
                            ],
                          ]
                        }
                        selectVariant="checkbox"
                        variant="compact"
                      >
                        <TableHeader />
                        <TableBody />
                      </Table>
                    </WithLoader>
                  </PopoverBody>
                </PopoverContent>
              </ForwardRef>
            }
            popperMatchesTriggerWidth={false}
            positionModifiers={
              Object {
                "bottom": "pf-m-bottom",
                "bottom-end": "pf-m-bottom-right",
                "bottom-start": "pf-m-bottom-left",
                "left": "pf-m-left",
                "left-end": "pf-m-left-bottom",
                "left-start": "pf-m-left-top",
                "right": "pf-m-right",
                "right-end": "pf-m-right-bottom",
                "right-start": "pf-m-right-top",
                "top": "pf-m-top",
                "top-end": "pf-m-top-right",
                "top-start": "pf-m-top-left",
              }
            }
            removeFindDomNode={false}
            trigger={
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                CVSS 2.0
                 
                 base score
                <OutlinedQuestionCircleIcon
                  className="pf-u-ml-xs"
                  color="var(--pf-global--secondary-color--100)"
                  noVerticalAlign={false}
                  size="sm"
                />
              </Label>
            }
            zIndex={9999}
          >
            <FindRefWrapper
              onFoundRef={[Function]}
            >
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                <span
                  className="vuln-label pf-u-mb-xs pointer"
                  style={
                    Object {
                      "display": "block",
                      "fontSize": "medium",
                    }
                  }
                >
                  CVSS 2.0
                   
                   base score
                  <OutlinedQuestionCircleIcon
                    className="pf-u-ml-xs"
                    color="var(--pf-global--secondary-color--100)"
                    noVerticalAlign={false}
                    size="sm"
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-u-ml-xs"
                      fill="var(--pf-global--secondary-color--100)"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"
                      />
                    </svg>
                  </OutlinedQuestionCircleIcon>
                </span>
              </Label>
            </FindRefWrapper>
          </Popper>
        </Popover>
        <WithLoader
          isLoading={true}
          style={
            Object {
              "width": "320px",
            }
          }
        >
          <Skeleton
            size="lg"
            style={
              Object {
                "width": "320px",
              }
            }
          >
            <Skeleton
              className="ins-c-skeleton ins-c-skeleton__lg"
              style={
                Object {
                  "width": "320px",
                }
              }
            >
              <div
                className="pf-c-skeleton ins-c-skeleton ins-c-skeleton__lg"
                style={
                  Object {
                    "width": "320px",
                  }
                }
              >
                <span
                  className="pf-u-screen-reader"
                />
              </div>
            </Skeleton>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render with CVSSv3 1`] = `
<injectIntl(CvssVector)
  cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
>
  <CvssVector
    cvss3_metrics="CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N"
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <Popover
          bodyContent={
            <WithLoader
              colSize={2}
              isLoading={true}
              rowSize={8}
              variant="compactTable"
            >
              <Table
                aria-label="Metric breakdown"
                borders={true}
                canCollapseAll={false}
                canSelectAll={true}
                canSortFavorites={true}
                cells={
                  Array [
                    "Metric",
                    "Value",
                  ]
                }
                className=""
                collapseAllAriaLabel=""
                contentId="expanded-content"
                dropdownDirection="down"
                dropdownPosition="right"
                expandId="expandable-toggle"
                gridBreakPoint=""
                isHeaderSelectDisabled={false}
                isNested={false}
                isStickyHeader={false}
                isTreeTable={false}
                ouiaSafe={true}
                role="grid"
                rowLabeledBy="simple-node"
                rows={
                  Array [
                    Array [
                      "Attack vector",
                      "Adjacent",
                    ],
                    Array [
                      "Attack complexity",
                      "Low",
                    ],
                    Array [
                      "Privileges required",
                      "Low",
                    ],
                    Array [
                      "User interaction",
                      "Required",
                    ],
                    Array [
                      "Scope",
                      "Unchanged",
                    ],
                    Array [
                      "Confidentiality",
                      "Low",
                    ],
                    Array [
                      "Integrity",
                      "None",
                    ],
                    Array [
                      "Availability",
                      "None",
                    ],
                  ]
                }
                selectVariant="checkbox"
                variant="compact"
              >
                <TableHeader />
                <TableBody />
              </Table>
            </WithLoader>
          }
          enableFlip={true}
          headerContent="CVSS 3.0  vector breakdown"
          id="popover-cvss"
          maxWidth="100%"
          position="bottom"
        >
          <Popper
            appendTo={[Function]}
            distance={25}
            enableFlip={true}
            flipBehavior={
              Array [
                "top",
                "right",
                "bottom",
                "left",
                "top",
                "right",
                "bottom",
              ]
            }
            isVisible={false}
            onDocumentClick={[Function]}
            onDocumentKeyDown={[Function]}
            onTriggerClick={[Function]}
            placement="bottom"
            popper={
              <ForwardRef
                active={false}
                aria-describedby="popover-popover-cvss-body"
                aria-labelledby="popover-popover-cvss-header"
                aria-modal="true"
                className="pf-c-popover"
                focusTrapOptions={
                  Object {
                    "clickOutsideDeactivates": true,
                    "fallbackFocus": [Function],
                    "returnFocusOnDeactivate": true,
                    "tabbableOptions": Object {
                      "displayCheck": "none",
                    },
                  }
                }
                onMouseDown={[Function]}
                preventScrollOnDeactivate={true}
                role="dialog"
                style={
                  Object {
                    "maxWidth": "100%",
                    "minWidth": null,
                    "opacity": 0,
                    "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                  }
                }
              >
                <PopoverArrow />
                <PopoverContent>
                  <PopoverCloseButton
                    aria-label="Close"
                    onClose={[Function]}
                  />
                  <PopoverHeader
                    alertSeverityScreenReaderText="undefined alert:"
                    icon={null}
                    id="popover-popover-cvss-header"
                    titleHeadingLevel="h6"
                  >
                    CVSS 3.0  vector breakdown
                  </PopoverHeader>
                  <PopoverBody
                    id="popover-popover-cvss-body"
                  >
                    <WithLoader
                      colSize={2}
                      isLoading={true}
                      rowSize={8}
                      variant="compactTable"
                    >
                      <Table
                        aria-label="Metric breakdown"
                        borders={true}
                        canCollapseAll={false}
                        canSelectAll={true}
                        canSortFavorites={true}
                        cells={
                          Array [
                            "Metric",
                            "Value",
                          ]
                        }
                        className=""
                        collapseAllAriaLabel=""
                        contentId="expanded-content"
                        dropdownDirection="down"
                        dropdownPosition="right"
                        expandId="expandable-toggle"
                        gridBreakPoint=""
                        isHeaderSelectDisabled={false}
                        isNested={false}
                        isStickyHeader={false}
                        isTreeTable={false}
                        ouiaSafe={true}
                        role="grid"
                        rowLabeledBy="simple-node"
                        rows={
                          Array [
                            Array [
                              "Attack vector",
                              "Adjacent",
                            ],
                            Array [
                              "Attack complexity",
                              "Low",
                            ],
                            Array [
                              "Privileges required",
                              "Low",
                            ],
                            Array [
                              "User interaction",
                              "Required",
                            ],
                            Array [
                              "Scope",
                              "Unchanged",
                            ],
                            Array [
                              "Confidentiality",
                              "Low",
                            ],
                            Array [
                              "Integrity",
                              "None",
                            ],
                            Array [
                              "Availability",
                              "None",
                            ],
                          ]
                        }
                        selectVariant="checkbox"
                        variant="compact"
                      >
                        <TableHeader />
                        <TableBody />
                      </Table>
                    </WithLoader>
                  </PopoverBody>
                </PopoverContent>
              </ForwardRef>
            }
            popperMatchesTriggerWidth={false}
            positionModifiers={
              Object {
                "bottom": "pf-m-bottom",
                "bottom-end": "pf-m-bottom-right",
                "bottom-start": "pf-m-bottom-left",
                "left": "pf-m-left",
                "left-end": "pf-m-left-bottom",
                "left-start": "pf-m-left-top",
                "right": "pf-m-right",
                "right-end": "pf-m-right-bottom",
                "right-start": "pf-m-right-top",
                "top": "pf-m-top",
                "top-end": "pf-m-top-right",
                "top-start": "pf-m-top-left",
              }
            }
            removeFindDomNode={false}
            trigger={
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                CVSS 3.0
                 
                 base score
                <OutlinedQuestionCircleIcon
                  className="pf-u-ml-xs"
                  color="var(--pf-global--secondary-color--100)"
                  noVerticalAlign={false}
                  size="sm"
                />
              </Label>
            }
            zIndex={9999}
          >
            <FindRefWrapper
              onFoundRef={[Function]}
            >
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                <span
                  className="vuln-label pf-u-mb-xs pointer"
                  style={
                    Object {
                      "display": "block",
                      "fontSize": "medium",
                    }
                  }
                >
                  CVSS 3.0
                   
                   base score
                  <OutlinedQuestionCircleIcon
                    className="pf-u-ml-xs"
                    color="var(--pf-global--secondary-color--100)"
                    noVerticalAlign={false}
                    size="sm"
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-u-ml-xs"
                      fill="var(--pf-global--secondary-color--100)"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"
                      />
                    </svg>
                  </OutlinedQuestionCircleIcon>
                </span>
              </Label>
            </FindRefWrapper>
          </Popper>
        </Popover>
        <WithLoader
          isLoading={true}
          style={
            Object {
              "width": "320px",
            }
          }
        >
          <Skeleton
            size="lg"
            style={
              Object {
                "width": "320px",
              }
            }
          >
            <Skeleton
              className="ins-c-skeleton ins-c-skeleton__lg"
              style={
                Object {
                  "width": "320px",
                }
              }
            >
              <div
                className="pf-c-skeleton ins-c-skeleton ins-c-skeleton__lg"
                style={
                  Object {
                    "width": "320px",
                  }
                }
              >
                <span
                  className="pf-u-screen-reader"
                />
              </div>
            </Skeleton>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;

exports[`CvssVector Should render without parameters 1`] = `
<injectIntl(CvssVector)>
  <CvssVector
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <TextContent>
      <div
        className="pf-c-content"
      >
        <Popover
          bodyContent={
            <WithLoader
              colSize={2}
              isLoading={true}
              rowSize={8}
              variant="compactTable"
            >
              N/A
            </WithLoader>
          }
          enableFlip={true}
          headerContent="CVSS 3.0  vector breakdown"
          id="popover-cvss"
          maxWidth="100%"
          position="bottom"
        >
          <Popper
            appendTo={[Function]}
            distance={25}
            enableFlip={true}
            flipBehavior={
              Array [
                "top",
                "right",
                "bottom",
                "left",
                "top",
                "right",
                "bottom",
              ]
            }
            isVisible={false}
            onDocumentClick={[Function]}
            onDocumentKeyDown={[Function]}
            onTriggerClick={[Function]}
            placement="bottom"
            popper={
              <ForwardRef
                active={false}
                aria-describedby="popover-popover-cvss-body"
                aria-labelledby="popover-popover-cvss-header"
                aria-modal="true"
                className="pf-c-popover"
                focusTrapOptions={
                  Object {
                    "clickOutsideDeactivates": true,
                    "fallbackFocus": [Function],
                    "returnFocusOnDeactivate": true,
                    "tabbableOptions": Object {
                      "displayCheck": "none",
                    },
                  }
                }
                onMouseDown={[Function]}
                preventScrollOnDeactivate={true}
                role="dialog"
                style={
                  Object {
                    "maxWidth": "100%",
                    "minWidth": null,
                    "opacity": 0,
                    "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                  }
                }
              >
                <PopoverArrow />
                <PopoverContent>
                  <PopoverCloseButton
                    aria-label="Close"
                    onClose={[Function]}
                  />
                  <PopoverHeader
                    alertSeverityScreenReaderText="undefined alert:"
                    icon={null}
                    id="popover-popover-cvss-header"
                    titleHeadingLevel="h6"
                  >
                    CVSS 3.0  vector breakdown
                  </PopoverHeader>
                  <PopoverBody
                    id="popover-popover-cvss-body"
                  >
                    <WithLoader
                      colSize={2}
                      isLoading={true}
                      rowSize={8}
                      variant="compactTable"
                    >
                      N/A
                    </WithLoader>
                  </PopoverBody>
                </PopoverContent>
              </ForwardRef>
            }
            popperMatchesTriggerWidth={false}
            positionModifiers={
              Object {
                "bottom": "pf-m-bottom",
                "bottom-end": "pf-m-bottom-right",
                "bottom-start": "pf-m-bottom-left",
                "left": "pf-m-left",
                "left-end": "pf-m-left-bottom",
                "left-start": "pf-m-left-top",
                "right": "pf-m-right",
                "right-end": "pf-m-right-bottom",
                "right-start": "pf-m-right-top",
                "top": "pf-m-top",
                "top-end": "pf-m-top-right",
                "top-start": "pf-m-top-left",
              }
            }
            removeFindDomNode={false}
            trigger={
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                CVSS 3.0
                 
                 base score
                <OutlinedQuestionCircleIcon
                  className="pf-u-ml-xs"
                  color="var(--pf-global--secondary-color--100)"
                  noVerticalAlign={false}
                  size="sm"
                />
              </Label>
            }
            zIndex={9999}
          >
            <FindRefWrapper
              onFoundRef={[Function]}
            >
              <Label
                className="pf-u-mb-xs pointer"
                isLarge={true}
              >
                <span
                  className="vuln-label pf-u-mb-xs pointer"
                  style={
                    Object {
                      "display": "block",
                      "fontSize": "medium",
                    }
                  }
                >
                  CVSS 3.0
                   
                   base score
                  <OutlinedQuestionCircleIcon
                    className="pf-u-ml-xs"
                    color="var(--pf-global--secondary-color--100)"
                    noVerticalAlign={false}
                    size="sm"
                  >
                    <svg
                      aria-hidden={true}
                      aria-labelledby={null}
                      className="pf-u-ml-xs"
                      fill="var(--pf-global--secondary-color--100)"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"
                      />
                    </svg>
                  </OutlinedQuestionCircleIcon>
                </span>
              </Label>
            </FindRefWrapper>
          </Popper>
        </Popover>
        <WithLoader
          isLoading={true}
          style={
            Object {
              "width": "320px",
            }
          }
        >
          <Skeleton
            size="lg"
            style={
              Object {
                "width": "320px",
              }
            }
          >
            <Skeleton
              className="ins-c-skeleton ins-c-skeleton__lg"
              style={
                Object {
                  "width": "320px",
                }
              }
            >
              <div
                className="pf-c-skeleton ins-c-skeleton ins-c-skeleton__lg"
                style={
                  Object {
                    "width": "320px",
                  }
                }
              >
                <span
                  className="pf-u-screen-reader"
                />
              </div>
            </Skeleton>
          </Skeleton>
        </WithLoader>
      </div>
    </TextContent>
  </CvssVector>
</injectIntl(CvssVector)>
`;
