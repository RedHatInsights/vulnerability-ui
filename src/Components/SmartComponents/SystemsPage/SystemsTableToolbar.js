import React, { Fragment, useState, useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';
import DownloadReport from '../../../Helpers/DownloadReport';
import DownloadSystemsReport from '../Reports/DownloadSystemsReport';
import { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';
import excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';
import { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';
import { useBulkSelect } from '../../../Helpers/Hooks';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';

const SystemsTableToolbar = ({
    selectedRows,
    selectedRowsCount,
    selectedRowsRawData,
    intl,
    parameters,
    rawData,
    methods
}) => {
    const [exportPDF, setExportPDF] = useState(false);
    const { apply, handleSelect, doOptOut, setColumnModalOpen } = methods;
    const dispatch = useDispatch();

    const downloadReport = format => {
        let params = { ...parameters };
        DownloadReport.exec(
            fetchSystems,
            params,
            format,
            'system-list',
            notification => dispatch(
                addNotification(notification)
            ),
            () => dispatch(clearNotifications())
        );
    };

    const kebabProps = useMemo(() => {
        return {
            selectedExcluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === true),
            selectedIncluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === false)
        };
    }, [selectedRowsRawData]);

    const kebabOptions = [
        '',
        {
            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, true),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }
        },
        {
            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, false, selectedRows),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }
        },
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => setColumnModalOpen(true)
        }
    ];

    const bulkSelectProps = useBulkSelect({
        rawData,
        selectedRows,
        selectedRowsCount,
        handleSelect,
        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })
    });

    return <Fragment>
        <PrimaryToolbar
            className="vuln-systems-primary-toolbar"
            bulkSelect={bulkSelectProps}
            actionsConfig={{
                actions: kebabOptions,
                dropdownProps: { ouiaId: 'toolbar-actions' }
            }}
            filterConfig={{
                items: [
                    useSearchFilter(
                        'filter',
                        messages.systemsSearchName,
                        messages.searchFilterByName,
                        parameters.filter,
                        apply
                    ),
                    excludedFilter(apply, parameters)
                ]
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters(parameters),
                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),
                deleteTitle: intl.formatMessage(messages.resetFilters),
                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)
            }}
            exportConfig={{
                isDisabled: rawData.meta.totalItems === 0,
                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],
                ouiaId: 'export',
                ...exportConfig({ downloadReport })
            }}
        />

        {exportPDF &&
            <DownloadSystemsReport
                showButton={false}
                params={parameters}
                filters={buildActiveFilters(parameters)}
                onSuccess={() => setExportPDF(false)}
            />
        }

    </Fragment>;

};

SystemsTableToolbar.propTypes = {
    rawData: dataShape,
    parameters: propTypes.object,
    selectedRows: propTypes.array,
    selectedRowsCount: propTypes.number,
    selectedRowsRawData: propTypes.array,
    methods: propTypes.shape({
        doOptOut: propTypes.func,
        apply: propTypes.func,
        handleSelect: propTypes.func,
        setColumnModalOpen: propTypes.func
    }),
    intl: propTypes.any
};

export default withRouter(
    injectIntl(SystemsTableToolbar)
);

