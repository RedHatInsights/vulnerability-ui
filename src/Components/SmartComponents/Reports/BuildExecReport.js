
import React from 'react';
import PropTypes from 'prop-types';
import { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';

import messages from '../../../Messages';

import FirstPage from './Executive/FirstPage';
import SecondPage  from './Executive/SecondPage';
import ThirdPage  from './Executive/ThirdPage';

const BuildExecReport = ({ data, intl }) => {

    const {
        cves_by_severity: cvesBySeverity,
        recent_cves: recentCves,
        top_cves: topCves,
        cves_total: totalCves,
        system_count: totalSystems,
        top_rules: topRules,
        rules_total: totalRules,
        rules_by_severity: rulesBySeverity
    } = data;

    let rulesBySeverityMap = Object.keys(rulesBySeverity).map(severity =>{
        return [
            EXEC_RULES_SEVERITY_MAP[severity],
            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())
        ];
    });

    const mapFields = (fields, data, percentageInfo = false) => {
        let arr = [];

        for (const field in fields) {
            let { [field]: label } = fields;
            let { [field]: fieldData } = data;

            let value = fieldData.count !== undefined ? fieldData.count : fieldData;
            if (field === 'na' && value === 0) {
                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table
            }

            if (percentageInfo && fieldData.percentage) {
                if (percentageInfo === 'number') { // only return number representing percentage
                    value = fieldData.percentage;
                }
                else { // return formatted string including CVE count and percentage
                    value = intl.formatMessage(messages.executiveReportOfTotal,
                        { count: value, percentage: fieldData.percentage });
                }
            }

            arr.push([label, value.toString()]);
        }

        return arr;
    };

    const recentCvesData = mapFields(
        recentCvesMapping,
        {
            ...recentCves
        }
    );
    const CVSSDataMap = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        },
        'number'
    );

    const CVSSChart = CVSSDataMap.map((severity) => {
        let [x, y] = severity;
        return { x: `CVSS ${x}`, y: Number(y) };
    });

    const CVSSData = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        },
        'string'
    );

    const coverPageData = {
        totalSystems,
        totalCves,
        totalRules
    };

    const cvesData = {
        recentCvesData,
        CVSSChart,
        CVSSData,
        CVSSHeader,
        topCves
    };

    const rulesData = {
        topRules,
        rulesHeader,
        rulesBySeverityMap
    };

    return [
        <FirstPage key="first-page" intl={intl} data={coverPageData} />,
        <SecondPage key="second-page-cves" intl={intl} data={cvesData} />,
        <ThirdPage key="third-page-rules" intl={intl} data={rulesData} />
    ];
};

BuildExecReport.propTypes = {
    data: PropTypes.exact({
        cves_by_severity: PropTypes.object,
        recent_cves: PropTypes.object,
        top_cves: PropTypes.array,
        cves_total: PropTypes.number,
        system_count: PropTypes.number
    }),
    intl: PropTypes.any
};

export default BuildExecReport;
