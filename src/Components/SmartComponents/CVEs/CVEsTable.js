import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';
import { cveTableRowActions } from '../../../Helpers/CVEHelper';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { CVETableContext } from './CVEs';
import messages from '../../../Messages';
import { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';

const CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {
    const noCves = () => {
        return ([{
            heightAuto: true,
            cells: [
                {
                    props: { colSpan: header?.length },
                    title:
                        <EmptyStateNoCVEs
                            secondParagraph={context.cves.meta.cves_without_errata === null
                                ? messages.emptyStateThereShouldBeCVEsFeatureDisabled
                                : context.cves.meta.cves_without_errata
                                    ? messages.emptyStateThereShouldBeCVEsNoErrata
                                    : messages.emptyStateThereShouldBeCVEs
                            }
                        />
                }
            ]
        }]);
    };

    const { cves, methods, selectedCves, expandedRows, isAllExpanded, params } = context;
    const isEmpty = cves.data.length === 0;

    const handleOnSelect = (event, isSelected, rowId) => {
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    const rows = cves.data && cves.data
        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)
        .map((cve, index) => {
            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;
            return ({ ...cve, isOpen: current });
        });

    const onCollapseAll = () => {
        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(expandedRows);
    };

    const onCollapse = (e, rowIndex) => {
        const collapseAll = rowIndex === undefined;

        collapseAll
            ? onCollapseAll()
            : methods.openCves(rowIndex);
    };

    return (
        <Fragment>
            {!cves.isLoading ? (
                <Table
                    canSelectAll={false}
                    aria-label="Vulnerability CVE table"
                    cells={header}
                    rows={isEmpty ? noCves() : rows}
                    onSelect={!isEmpty ? handleOnSelect : undefined}
                    canCollapseAll
                    onCollapse={isEmpty ? undefined : onCollapse}
                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?
                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}
                    sortBy={!isEmpty ?
                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], params.sort) : undefined}
                    onSort={!isEmpty ?
                        (event, key, direction) =>
                            handleSortColumn(
                                key,
                                direction,
                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],
                                params.sort,
                                methods.apply
                            ) : undefined
                    }
                    ouiaId="cves-table"
                    isStickyHeader
                    variant={TableVariant.compact}
                    isExpandable
                >
                    <TableHeader />
                    <TableBody />
                </Table>
            ) : (
                <SkeletonTable
                    columns={header}
                    rowSize={parseInt(params.page_size) || DEFAULT_PAGE_SIZE}
                    variant={TableVariant.compact}
                    sortBy={createSortBy([{ key: 'checkbox' }, ...header], params.sort)}
                    isSelectable
                />)
            }
            <PaginationWrapper meta={cves.meta} apply={methods.apply} />
        </Fragment>
    );

};

CVEsTableWithContext.propTypes = {
    context: propTypes.any,
    header: propTypes.array,
    canEditStatusOrBusinessRisk: propTypes.bool
};

const CVEsTable = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default CVEsTable;
