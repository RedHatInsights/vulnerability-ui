import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import Remediation from '../Remediation/Remediation';
import messages from '../../../Messages';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import { dataShape } from '../../../Helpers/MiscHelper';
import { useBulkSelect } from '../../../Helpers/Hooks';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import {
    fetchAffectedSystemsByCVE
} from '../../../Store/Actions/Actions';
import {
    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION
} from '../../../Helpers/constants';
import remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';

export const SystemsExposedTableToolbar = ({
    rawData,
    cveName,
    cveStatusDetails,
    selectedRows,
    selectedRowsCount,
    filterRuleValues,
    expandAll,
    hasSecurityRule,
    isAllExpanded,
    parameters,
    methods,
    canEditPairStatus,
    canExport,
    children
}) => {
    const intl = useIntl();
    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;
    const { isLoaded, meta } = rawData;

    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);

    const kebabOptions = ['',
        ...canEditPairStatus ? [{
            label: intl.formatMessage(messages.editStatus),
            onClick: () => showStatusModal([cveStatusDetails], selectedRows),
            props: { isDisabled: !selectedRowsCount }
        }] : [],
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => setColumnModalOpen(true)
        }
    ];

    const searchFilter = useSearchFilter(
        'filter',
        messages.systemsSearchName,
        messages.searchFilterByName,
        parameters.filter,
        apply
    );

    const advisoryFilter = useSearchFilter(
        'advisory',
        messages.advisory,
        messages.searchFilterByAdvisory,
        parameters.advisory,
        apply
    );

    const osVersionFilter = useOsVersionFilter(
        parameters.rhel_version,
        apply
    );

    const bulkSelectProps = useBulkSelect({
        rawData,
        selectedRows,
        selectedRowsCount,
        handleSelect,
        // TODO: change it back to fetchAffectedSystemsIdsByCve when the endpoint return also a remediation field
        fetchResource: ops => fetchAffectedSystemsByCVE({ id: cveName, ...parameters, ...ops })
    });

    if (isAllExpanded) {
        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {
            expandAll(rawData, false);
        }
    }

    return <Fragment>
        <PrimaryToolbar
            className="vuln-systems-primary-toolbar"
            exportConfig={canExport && {
                isDisabled: meta.totalItems === 0,
                ouiaId: 'export',
                ...exportConfig({ downloadReport })
            }}
            dedicatedAction={(isLoaded &&
                <Remediation
                    manyRules
                    isDisabled={selectedRows.length === 0}
                    systems={remediableSystems}
                    cves={{ id: cveName, rules: filterRuleValues }}
                />
            )}
            actionsConfig={{
                actions: kebabOptions,
                dropdownProps: { ouiaId: 'toolbar-actions' }
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters({ ...parameters }, filterRuleValues),
                onDelete: (_, chips) => removeFilters(chips, apply),
                deleteTitle: intl.formatMessage(messages.resetFilters)
            }}
            bulkSelect={bulkSelectProps}
            filterConfig={{
                items: [
                    searchFilter,
                    securityRuleFilter(
                        apply,
                        parameters,
                        filterRuleValues,
                        {
                            isDynamic: true,
                            dropdownItems: RULE_ABSENCE_OPTIONS
                        }
                    ),
                    statusFilter(apply, parameters),
                    advisoryFilter,
                    osVersionFilter,
                    remediationFilter(apply, parameters)
                ]
            }}
            expandAll={hasSecurityRule ? {
                isAllExpanded,
                onClick: () => expandAll(rawData, isAllExpanded)
            } : undefined}
        />
        {children}
    </Fragment>;
};

SystemsExposedTableToolbar.propTypes = {
    rawData: dataShape,
    parameters: propTypes.object,
    cveName: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.object,
    expandAll: propTypes.func,
    hasSecurityRule: propTypes.bool,
    isAllExpanded: propTypes.bool,
    selectedRows: propTypes.array,
    selectedRowsCount: propTypes.number,
    children: propTypes.node,
    methods: propTypes.shape({
        apply: propTypes.func,
        handleSelect: propTypes.func,
        showStatusModal: propTypes.func,
        downloadReport: propTypes.func,
        setColumnModalOpen: propTypes.func
    }),
    canEditPairStatus: propTypes.bool,
    canExport: propTypes.bool
};
