import React, { Fragment } from 'react';
import PropTypes from 'prop-types';

import {
    Section,
    Column,
    Chart,
    Table,
    Panel,
    PanelItem,
    InsightsLabel
} from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text } from '@react-pdf/renderer';
import { truncate } from 'lodash';

import styles from '../Common/styles';
import messages from '../../../../Messages';

const SecondPage = ({ data, intl }) => {
    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;
    const cveLabels = (hasRule) => (
        hasRule && <InsightsLabel icon={false} label={intl.formatMessage(messages.securityRuleLabel)} width={63} />
    );

    const {
        recentCvesData,
        CVSSChart,
        CVSSData,
        CVSSHeader,
        topCves
    } = data;

    const [legendHeader, numberOfCvesHeader] = CVSSHeader;

    return (
        <Fragment key="first-section">
            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>
            <Section
                titleProps={{ style: styles.sectionTitle }}
                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}
            >
                <Column>
                    <Chart
                        chartType="pie"
                        subTitle="Cves"
                        title="100"
                        data={CVSSChart}
                        colorSchema="orange"
                        legendHeader={legendHeader}
                    />
                </Column>
                <Column>
                    <Table
                        withHeader
                        rows={[[numberOfCvesHeader], ...CVSSData]}
                    />
                </Column>
            </Section>
            <Section
                titleProps={{ style: styles.sectionTitle }}
                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}
            >
                <Panel style={{ flex: 1 }}>
                    {
                        recentCvesData.map(([label, value])=> (
                            <Fragment key={label}>
                                <PanelItem style={{ flex: 1 }} title={label}>
                                    {value}
                                </PanelItem>
                            </Fragment>
                        ))
                    }
                </Panel>
            </Section>
            <Section
                titleProps={{ style: styles.sectionTitle }}
                title={intl.formatMessage(messages.executiveReportTop3)}
                withColumn={false}
            >
                {
                    topCves.map(cve => (
                        <Panel
                            key={cve.synopsis}
                            title={cve.synopsis}
                            labels={cveLabels(cve.security_rule)}
                            description={cveDesc(cve.description)}
                        >
                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>
                                {Number.parseFloat(cve.cvss3_score).toFixed(1)}
                            </PanelItem>
                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>
                                {cve.systems_affected.toString()}
                            </PanelItem>
                        </Panel>
                    ))

                }
            </Section>
        </Fragment>
    );
};

SecondPage.propTypes = {
    data: PropTypes.exact({
        recentCvesData: PropTypes.array,
        CVSSChart: PropTypes.array,
        CVSSData: PropTypes.array,
        CVSSHeader: PropTypes.array,
        topCves: PropTypes.array
    }),
    intl: PropTypes.any
};

export default SecondPage;
