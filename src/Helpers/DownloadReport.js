import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';

class DownloadReport  {
    constructor() {
        this.defaultParams = {
            page: 1,
            page_size: Number.MAX_SAFE_INTEGER,
            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'
        };

        this.params = {
            cve: ''
        };

        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];
        this.formats = ['csv', 'json'];
    }

    filename = (page) => {
        switch (page) {
            case 'systems-exposed':
                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;
            case 'system-list':
                return `vulnerability_systems--${this.defaultParams.date}`;
            default:
                return `vulnerability_cves--${this.defaultParams.date}`;

        }
    }

    checkTypes = (fetchData, page, format) => {
        if (typeof fetchData !== 'function') {
            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;
        }

        if (!this.pages.includes(page)) {
            throw `Page ${page} does not exist`;
        }

        if (!this.formats.includes(format)) {
            throw `Format ${format} is not supported`;
        }
    }

    /**
     * Execute and download the report
     *
     * @param {Function} fetchData - Function to be called in order to fetch data.
     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.
     * @param {String} format - Supported formats to download are CSV and JSON.
     * @param {String} page - Name of the page based on which the filename will be determined.
     * @returns {void}
     */
    exec = async (fetchData, params, format, page) => {
        this.checkTypes(fetchData, page, format);
        this.params.cve = Array.isArray(params) ? params[0] : '';

        try {
            let { payload } = Array.isArray(params)
                ? await fetchData(this.params.cve, {
                    ...params[1],
                    ...this.defaultParams,
                    data_format: format
                }) :
                await fetchData({
                    ...params,
                    ...this.defaultParams,
                    data_format: format
                });

            let { data: response } = await payload;
            let data = format === 'json' ? JSON.stringify(response) : response;
            // downaloads the files
            downloadFile(data, this.filename(page), format);
        } catch (error) {
            throw `${error}`;
        }

    }

}

export default new DownloadReport();
