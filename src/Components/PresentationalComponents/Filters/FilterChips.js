import React from 'react';
import { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';
import propTypes from 'prop-types';

const FilterChips = (props) => {
    const { filterValues, filterCategories, apply } = props;
    const localFilters = { ...filterValues };

    delete localFilters.show_all;

    const prunedFilters = Object.entries(localFilters);

    const filters = filterCategories.map(category => {
        return prunedFilters.find(filter => filter[0] === category.urlParam && typeof filter[1] !== 'undefined');
    });

    const allowedFilters = filters.filter(item => typeof item !== 'undefined');

    const removeFilter = (key, value) => {
        const values = value.split(',');
        const newFilter = {
            [key]: filterValues[key]
            .split(',')
            .filter(item => !values.includes(item))
            .join(',')
        };

        if (newFilter[key].length !== 0) {
            apply({ ...newFilter, page: 1 });
        } else {
            const filter = { ...filterValues, [key]: undefined };
            apply({ ...filter, page: 1 });
        }
    };

    const removeAllFilters = () => {

        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});

        apply({ ...resetParams, page: 1 });
    };

    return allowedFilters.length > 0 &&
        <React.Fragment>
            <ChipGroup withToolbar>
                {allowedFilters.map(filter => {
                    const [key, value] = filter;
                    const category = filterCategories.find(category => category.urlParam === key);

                    return (
                        <ChipGroupToolbarItem key={key} categoryName={category.title}>
                            { value.split(',').map(chip => {
                                const mapChip = category.values.find(item => item.value.indexOf(chip) !== -1);
                                const { value, label } = { ...mapChip };

                                return (
                                    <Chip key={value} onClick={() => removeFilter(category.urlParam, chip)}>
                                        { label }
                                    </Chip>
                                );
                            }) }
                        </ChipGroupToolbarItem>
                    );
                }) }
            </ChipGroup>
            <Button variant="link" onClick={removeAllFilters}>
                Clear filters
            </Button>
        </React.Fragment>;
};

FilterChips.propTypes = {
    filters: propTypes.object,
    filterCategories: propTypes.array,
    apply: propTypes.func
};

export default FilterChips;
