import { DropdownItem } from '@patternfly/react-core';
import React from 'react';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

export const kebabItemDownloadJSON = (downloadReport, { ...props }) => (
    <DropdownItem key="json" component="button" onClick={() => downloadReport('json')} {...props}>
        <FormattedMessage {...messages.kebabExportAsJson} />
    </DropdownItem>
);

export const kebabItemDownloadCSV = (downloadReport, { ...props }) => (
    <DropdownItem key="csv" component="button" onClick={() => downloadReport('csv')} {...props}>
        <FormattedMessage {...messages.kebabExportAsCsv} />
    </DropdownItem>
);

export const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (
    <DropdownItem key="pdf" component="button" onClick={() => downloadReport(true)} {...props}>
        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}
    </DropdownItem>
);

export const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (
    <DropdownItem key="editBusinessRisk" component="button" onClick={() => showBusinessRiskModal(cves)} {...props}>
        <FormattedMessage {...messages.kebabEditBusinessRisk} />
    </DropdownItem>
);

export const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (
    <DropdownItem key="editStatus" component="button" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>
        <FormattedMessage {...messages.kebabEditStatus} />
    </DropdownItem>
);

export const kebabItemToggleCvesDescription = (toggleCveDescription, isExpanded, { ...props }) => (
    <DropdownItem key="toggleCveDescription" component="button" onClick={() => toggleCveDescription()} {...props}>
        {isExpanded ? <FormattedMessage {...messages.kebabCollapseCves} /> : <FormattedMessage {...messages.kebabExpandCves} /> }
    </DropdownItem>
);

export const kebabItemExcludeSystemAnalysis = (doOptOut, isOptOut,  { ...props }) => (
    <DropdownItem key="do_opt_out_analysis" component="button" onClick={() => doOptOut()} {...props}>
        {isOptOut ?
            <FormattedMessage {...messages.kebabResumeAnalysis} /> :
            <FormattedMessage {...messages.kebabExcludeVulnerabilityAnalysis} />}
    </DropdownItem>
);

export const kebabItemExcludeSystem = (doOptOut, isOptOut,  { ...props }) => (
    <DropdownItem key="do_opt_out" component="button" onClick={() => doOptOut()} {...props}>
        {isOptOut ?
            <FormattedMessage {...messages.kebabResumeAnalysis} /> :
            <FormattedMessage {...messages.kebabExcludeAnalysis} />}
    </DropdownItem>
);

export const kebabItemToggleExcludeSystemDisplay = (handleOptOut, isOptedOut,  { ...props }) => (
    <DropdownItem key="toggle_opt_out" component="button" onClick={() => handleOptOut()} {...props}>
        {isOptedOut ?
            <FormattedMessage {...messages.kebabHideExcludedSystems} />  :
            <FormattedMessage {...messages.kebabShowExcludedSystems} />}
    </DropdownItem>
);
