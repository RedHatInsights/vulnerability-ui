import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';
import { SortByDirection } from '@patternfly/react-table';
import { useHistory, useLocation  } from 'react-router-dom';
import findIndex from 'lodash/findIndex';
import propTypes from 'prop-types';
import React from 'react';
import { impactColorList, impactList } from './constants';
import qs from 'query-string';

export const dataShape = propTypes.shape({
    data: propTypes.oneOfType([propTypes.object, propTypes.array]),
    meta: propTypes.object,
    isLoading: propTypes.bool
});

export function constructParameters(apiProps, allowedParams) {
    if (apiProps) {
        Object.keys(apiProps).forEach(
            key => (
                apiProps[key] === undefined
                || apiProps[key] === ''
            )
            && delete apiProps[key]
        );

        const params = allowedParams.map(item => apiProps[item]);

        return params;
    }

    return [];
}

// TODO DRY:similar to constructParameters
export function constructURLParameters(urlParams, allowedParams) {
    if (urlParams) {
        const params = { ...urlParams };
        Object.keys(urlParams).forEach(
            key => (
                params[key] === undefined
                || params[key] === ''
                || !allowedParams.includes(key)
                || params[key] === false
            )
            && delete params[key]

        );
        return params;
    }
}

export function getImpactDetails(impact) {
    if (Object.keys(impactList).includes(impact)) {
        return {
            title: impactList[impact].title,
            color: impactList[impact].color,
            text: impactList[impact].text,
            titleContent: (
                <SecurityIcon size="lg" />
            )
        };
    } else {
        return {
            title: 'Unknown',
            color: impactColorList.unknown,
            text: '',
            titleContent: (
                <UnknownIcon size="lg" />
            )
        };
    }
}

export const createSortBy = (header, value) => {
    if (value) {
        let direction = value.indexOf('-') === 0 ? SortByDirection.desc : SortByDirection.asc;
        value = value.replace(/^(-|\+)/, '');
        const index = findIndex(header, item => item.key === value);
        let sort = {
            index,
            direction
        };
        return sort;
    }

    return {};
};

export const handleSortColumn = (key, direction, header, currentSort, apply) => {
    let columnName = header[key].key;
    const useDefault = currentSort && currentSort.substr(1) !== columnName;
    if (direction === SortByDirection.desc || useDefault) {
        columnName = '-' + columnName;
    }

    apply({ sort: columnName });
};

export const updateStateSet = (stateSet, names, value) => {
    [].concat(names).forEach(name => {
        value ? stateSet.add(name) : stateSet.delete(name);
    });
    return stateSet;
};

export const useCreateUrlParams = (allowedParams) => {
    const location = useLocation();
    const history = useHistory();
    const urlParams = qs.parse(location.search);

    const createUrlParams = (parameters) => {
        history.push(`?${qs.stringify(constructURLParameters(parameters, allowedParams))}`);
    };

    return [createUrlParams, urlParams];
};
