import CheckboxCustomFilter from './CheckboxCustomFilter';

const selectProps = null
const options = [
    { value: "op1", label: "option 1" },
    { value: "op2", label: "option 2" },
    { value: "op3", label: "option 3" }
]
const filterName = "My filter"
const filterId = "my_filter"

describe('CheckboxCustomFilter component', () => {
    it('Should update filter data when checking checkbox.', () => {
        let filterData = { my_filter: [] }
        const setFilterData = newData => filterData = newData

        const filter = mount(
            <CheckboxCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        filter.find("button").first().simulate("click"); // open select with checkboxes
        filter.find("input[type='checkbox']").first().simulate('change', { target: { checked: true } }); // check the first checkbox

        expect(filterData).toStrictEqual({ my_filter: ["op1"] });
    });

    it('Should update filter data when unchecking checkbox.', () => {
        let filterData = { my_filter: ["op1"] }
        const setFilterData = newData => filterData = newData

        const filter = mount(
            <CheckboxCustomFilter filterData={filterData} setFilterData={setFilterData} selectProps={selectProps} options={options} filterName={filterName} filterId={filterId} />
        );

        filter.find("button").first().simulate("click"); // open select with checkboxes

        filter.find("input[type='checkbox']").first().prop('onChange')({ target: { checked: false } }); //; uncheck the first checkbox

        expect(filterData).toStrictEqual({ my_filter: [] });
    });
});
