import * as helper from './ReportsHelper';

// trick to fix formatWithBold function called by buildFilters work
jest.mock('./ReportsHelper', () => ({ ...jest.requireActual('./ReportsHelper'), intlFormatWithBold: (msg) => msg }));

describe('ReportsHelper component', () => {
    it('Should build correct data with empty filters.', () => {
        expect(helper.buildFilters({
            business_risk_id: [],
            cvss_filter: { from: 0, to: 10 },
            impact: [],
            publish_date: "all",
            rule_presence: [],
            known_exploit: [],
            status_id: [],
            rhel_version: [],
            advisory_available: []
        })).toStrictEqual({ });
    });

    it('Should build correct data with all filters applied.', () => {
        expect(helper.buildFilters({
            business_risk_id: ["2", "3"],
            cvss_filter: { from: 2, to: 8 },
            impact: ["7", "5", "4", "2"],
            publish_date: "lastYear",
            rule_presence: ["true"],
            known_exploit: ["true"],
            status_id: ["0", "1", "2"],
            rhel_version: ["8.0", "8.1"]
        })).toStrictEqual({
            business_risk_id: { filter: 'Business risk', values: 'Medium, High' },
            cvss_filter: { filter: 'CVSS base score', values: '2.0 - 8.0' },
            impact: { filter: 'Severity', values: 'Critical, Important, Moderate, Low' },
            known_exploit: { filter: "Known exploit", values: "Has a known exploit" },
            publish_date: {
                filter: 'Publish date',
                values: {
                    id: 'customReportTimespanWithinLastYear',
                    description: 'Part of publish date filter string in PDF report, publish day within last year',
                    defaultMessage: 'within <b>last year</b>'
                }
            },
            rule_presence: { filter: 'Security rule', values: 'Has security rule' },
            status_id: { filter: 'Status', values: 'Not reviewed, In review, On-hold' },
            rhel_version: { filter: 'Applies to OS', values: 'RHEL 8.0, RHEL 8.1' }
        });
    });

    it('Should build correct URL params with empty filters.', () => {
        expect(helper.constructFilterParameters({
            business_risk_id: [],
            cvss_filter: { from: 0, to: 10 },
            impact: [],
            publish_date: "all",
            rule_presence: [],
            known_exploit: [],
            status_id: [],
            rhel_version: [],
            advisory_available: false
        })).toStrictEqual({
            business_risk_id: "",
            cvss_from: 0,
            cvss_to: 10,
            impact: "",
            public_from: undefined,
            public_to: undefined,
            publish_date: "all",
            rule_presence: "",
            known_exploit: "",
            status_id: "",
            rhel_version: "",
            tags: undefined,
            advisory_available: "false"
        });
    });

    it('Should build correct URL params with all filters applied.', () => {
        const oneYearAgo = new Date();
        oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1)

        expect(helper.constructFilterParameters({
            business_risk_id: ["2", "3"],
            cvss_filter: { from: 2, to: 8 },
            impact: ["7", "5", "4", "2"],
            publish_date: "lastYear",
            rule_presence: ["true"],
            known_exploit: ["true"],
            status_id: ["0", "1", "2"],
            rhel_version: ["8.0", "8.1"],
            advisory_available: true
        })).toStrictEqual({
            status_id: '0,1,2',
            business_risk_id: '2,3',
            impact: '7,5,4,2',
            cvss_from: 2,
            cvss_to: 8,
            publish_date: 'lastYear',
            public_from: oneYearAgo.toISOString().slice(0, 10),
            public_to: undefined,
            rule_presence: 'true',
            known_exploit: 'true',
            rhel_version: "8.0,8.1",
            tags: undefined,
            advisory_available: "true"
        });
    });
});
