/* global require, module, __dirname */

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const config = require('./webpack.common.js');
const { resolve } = require('path');
const pkg = require('../package.json');

const appConfig = {
    mode: process.env.NODE_ENV === 'production' ? 'production' : 'development',
    devtool: false,
    optimization: {
        minimize: process.env.NODE_ENV === 'production',
        splitChunks: {
            chunks: 'all',
            maxInitialRequests: Infinity,
            minSize: 0,
            cacheGroups: {
                reactVendor: {
                    test: /[\\/]node_modules[\\/](react|react-dom)[\\/]/,
                    name: 'reactvendor'
                },
                pfVendor: {
                    test: /[\\/]node_modules[\\/](@patternfly)[\\/]/,
                    name: 'pfVendor'
                },
                rhcsVendor: {
                    test: /[\\/]node_modules[\\/](@redhat-cloud-services)[\\/]/,
                    name: 'rhcsVendor'
                },
                vendor: {
                    test: /[\\/]node_modules[\\/](!react-dom)(!react)(!@patternfly)(!@redhat-cloud-services)[\\/]/,
                    name: 'vendor'
                }
            }
        }
    },
    entry: {
        App: config.paths.entry
    },
    output: {
        filename: 'js/[name].js',
        path: config.paths.public,
        publicPath: config.paths.publicPath,
        chunkFilename: 'js/[name].js'
    },
    resolve: {
        alias: {
            customReact: 'react',
            PFReactCore: '@patternfly/react-core',
            PFReactTable: '@patternfly/react-table'
        }
    },
    module: {
        rules: [
            {
                test: /src\/.*\.js$/,
                exclude: /(node_modules|bower_components)/i,
                use: [{ loader: 'source-map-loader' }, { loader: 'babel-loader' }]
            },
            {
                test: /\.s?[ac]ss$/,
                use: [
                    process.env.NODE_ENV === 'production' ? 'style-loader' : MiniCssExtractPlugin.loader,
                    {
                        loader: 'css-loader'
                    },
                    {
                        loader: 'sass-loader',
                        options: {
                            includePaths: [
                                ...Object.values(pkg.sassIncludes).map(includePath => resolve(__dirname, `../${includePath}`))
                            ]
                        }
                    }
                ]
            },
            {
                test: /\.(woff(2)?|ttf|jpg|png|eot|gif)(\?v=\d+\.\d+\.\d+)?$/,
                use: [
                    {
                        loader: 'file-loader',
                        options: {
                            name: '[name].[ext]',
                            outputPath: 'fonts/'
                        }
                    }
                ]
            },
            {
                test: /\.(svg)$/i,
                use: [
                    {
                        loader: 'url-loader',
                        options: {
                            limit: 8192
                        }
                    }
                ]
            }
        ]
    }
};

module.exports = [appConfig];
