// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CVEPageDetailsSeverity component should render correctly 1`] = `
<injectIntl(CVEPageDetailsSeverity)
  cveAttributes={
    Object {
      "business_risk": "Low",
      "business_risk_id": 1,
      "business_risk_justification": "m",
      "cvss2_metrics": null,
      "cvss2_score": null,
      "cvss3_metrics": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "cvss3_score": "7.800",
      "description": "A flaw was found in sudo. A heap-based buffer overflow was found in the way sudo parses command line arguments. This flaw is exploitable by any local user who can execute the sudo command (by default, any local user can execute sudo) without authentication. Successful exploitation of this flaw could lead to privilege escalation. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
      "impact": "Important",
      "public_date": "26 Jan 2021",
      "status": "Resolved",
      "status_id": 4,
      "status_justification": null,
      "synopsis": "CVE-2021-3156",
      "systems_status_detail": Object {
        "0": 114,
        "4": 4,
      },
      "systems_status_divergent": 206,
    }
  }
>
  <CVEPageDetailsSeverity
    cveAttributes={
      Object {
        "business_risk": "Low",
        "business_risk_id": 1,
        "business_risk_justification": "m",
        "cvss2_metrics": null,
        "cvss2_score": null,
        "cvss3_metrics": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
        "cvss3_score": "7.800",
        "description": "A flaw was found in sudo. A heap-based buffer overflow was found in the way sudo parses command line arguments. This flaw is exploitable by any local user who can execute the sudo command (by default, any local user can execute sudo) without authentication. Successful exploitation of this flaw could lead to privilege escalation. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
        "impact": "Important",
        "public_date": "26 Jan 2021",
        "status": "Resolved",
        "status_id": 4,
        "status_justification": null,
        "synopsis": "CVE-2021-3156",
        "systems_status_detail": Object {
          "0": 114,
          "4": 4,
        },
        "systems_status_divergent": 206,
      }
    }
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <Stack
      hasGutter={true}
    >
      <div
        className="pf-l-stack pf-m-gutter"
      >
        <StackItem>
          <div
            className="pf-l-stack__item"
          >
            <Split
              hasGutter={true}
            >
              <div
                className="pf-l-split pf-m-gutter"
              >
                <SplitItem>
                  <div
                    className="pf-l-split__item"
                  >
                    <SnippetWithHeaderAndPopover
                      content={
                        <Stack
                          className="pf-u-p-xs"
                        >
                          <StackItem>
                            <Label
                              className="pf-u-mb-xs"
                            >
                              Justification note
                            </Label>
                          </StackItem>
                          <StackItem>
                            m
                          </StackItem>
                        </Stack>
                      }
                      title="Business risk"
                      value="Low"
                    >
                      <Popover
                        aria-label="Business risk popover"
                        bodyContent={
                          <Stack
                            className="pf-u-p-xs"
                          >
                            <StackItem>
                              <Label
                                className="pf-u-mb-xs"
                              >
                                Justification note
                              </Label>
                            </StackItem>
                            <StackItem>
                              m
                            </StackItem>
                          </Stack>
                        }
                        headerContent=""
                        id="popover"
                        position="right"
                      >
                        <Popper
                          appendTo={[Function]}
                          distance={25}
                          enableFlip={true}
                          flipBehavior={
                            Array [
                              "top",
                              "right",
                              "bottom",
                              "left",
                              "top",
                              "right",
                              "bottom",
                            ]
                          }
                          isVisible={false}
                          onDocumentClick={[Function]}
                          onDocumentKeyDown={[Function]}
                          onTriggerClick={[Function]}
                          onTriggerEnter={[Function]}
                          placement="right"
                          popper={
                            <FocusTrap
                              active={false}
                              aria-describedby="popover-popover-body"
                              aria-label="Business risk popover"
                              aria-modal="true"
                              className="pf-c-popover"
                              focusTrapOptions={
                                Object {
                                  "clickOutsideDeactivates": true,
                                  "fallbackFocus": [Function],
                                  "returnFocusOnDeactivate": true,
                                }
                              }
                              onMouseDown={[Function]}
                              paused={false}
                              preventScrollOnDeactivate={true}
                              role="dialog"
                              style={
                                Object {
                                  "maxWidth": null,
                                  "minWidth": null,
                                  "opacity": 0,
                                  "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                }
                              }
                            >
                              <PopoverArrow />
                              <PopoverContent>
                                <PopoverCloseButton
                                  aria-label="Close"
                                  onClose={[Function]}
                                />
                                
                                <PopoverBody
                                  id="popover-popover-body"
                                >
                                  <Stack
                                    className="pf-u-p-xs"
                                  >
                                    <StackItem>
                                      <Label
                                        className="pf-u-mb-xs"
                                      >
                                        Justification note
                                      </Label>
                                    </StackItem>
                                    <StackItem>
                                      m
                                    </StackItem>
                                  </Stack>
                                </PopoverBody>
                              </PopoverContent>
                            </FocusTrap>
                          }
                          popperMatchesTriggerWidth={false}
                          positionModifiers={
                            Object {
                              "bottom": "pf-m-bottom",
                              "left": "pf-m-left",
                              "right": "pf-m-right",
                              "top": "pf-m-top",
                            }
                          }
                          trigger={
                            <Stack
                              style={
                                Object {
                                  "cursor": "pointer",
                                  "display": "inline-block",
                                }
                              }
                            >
                              <StackItem>
                                <Label
                                  isLarge={true}
                                >
                                  Business risk
                                </Label>
                              </StackItem>
                              <StackItem>
                                <a>
                                  Low
                                </a>
                              </StackItem>
                            </Stack>
                          }
                          zIndex={9999}
                        >
                          <FindRefWrapper
                            onFoundRef={[Function]}
                          >
                            <Stack
                              style={
                                Object {
                                  "cursor": "pointer",
                                  "display": "inline-block",
                                }
                              }
                            >
                              <div
                                className="pf-l-stack"
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <StackItem>
                                  <div
                                    className="pf-l-stack__item"
                                  >
                                    <Label
                                      isLarge={true}
                                    >
                                      <span
                                        className="vuln-label undefined"
                                        style={
                                          Object {
                                            "display": "block",
                                            "fontSize": 16,
                                          }
                                        }
                                      >
                                        Business risk
                                      </span>
                                    </Label>
                                  </div>
                                </StackItem>
                                <StackItem>
                                  <div
                                    className="pf-l-stack__item"
                                  >
                                    <a>
                                      Low
                                    </a>
                                  </div>
                                </StackItem>
                              </div>
                            </Stack>
                          </FindRefWrapper>
                        </Popper>
                      </Popover>
                    </SnippetWithHeaderAndPopover>
                  </div>
                </SplitItem>
                <SplitItem
                  className="pf-u-ml-lg"
                >
                  <div
                    className="pf-l-split__item pf-u-ml-lg"
                  >
                    <SnippetWithHeaderAndPopover
                      content={
                        <Stack
                          className="pf-u-p-xs"
                        >
                          <StackItem>
                            <Label
                              className="pf-u-mb-xs"
                            >
                              CVE status
                            </Label>
                            Resolved
                            <Label
                              className="pf-u-mb-xs pf-u-mt-sm"
                            >
                              Justification note
                            </Label>
                            --
                          </StackItem>
                          <StackItem>
                            <TextContent>
                              <hr
                                className="pf-u-mt-sm pf-u-mb-sm"
                              />
                            </TextContent>
                            <Label
                              isLarge={true}
                            >
                              Systems with this CVE
                            </Label>
                            <Table
                              aria-label="Status details"
                              borders={true}
                              canSelectAll={true}
                              canSortFavorites={true}
                              cells={
                                Array [
                                  "Status",
                                  "Num. systems",
                                ]
                              }
                              className="status-breakdown-table"
                              contentId="expanded-content"
                              dropdownDirection="down"
                              dropdownPosition="right"
                              expandId="expandable-toggle"
                              gridBreakPoint={null}
                              isStickyHeader={false}
                              ouiaSafe={true}
                              role="grid"
                              rowLabeledBy="simple-node"
                              rows={
                                Array [
                                  Array [
                                    "Not reviewed",
                                    "114",
                                  ],
                                  Array [
                                    "Resolved",
                                    "4",
                                  ],
                                ]
                              }
                              selectVariant="checkbox"
                              variant="compact"
                            >
                              <TableHeader />
                              <Unknown />
                            </Table>
                          </StackItem>
                        </Stack>
                      }
                      title="Status"
                      value={
                        <span>
                          <ExclamationTriangleIcon
                            color="var(--pf-global--primary-color--100)"
                            noVerticalAlign={false}
                            size="sm"
                          />
                           
                          Resolved
                        </span>
                      }
                    >
                      <Popover
                        aria-label="Business risk popover"
                        bodyContent={
                          <Stack
                            className="pf-u-p-xs"
                          >
                            <StackItem>
                              <Label
                                className="pf-u-mb-xs"
                              >
                                CVE status
                              </Label>
                              Resolved
                              <Label
                                className="pf-u-mb-xs pf-u-mt-sm"
                              >
                                Justification note
                              </Label>
                              --
                            </StackItem>
                            <StackItem>
                              <TextContent>
                                <hr
                                  className="pf-u-mt-sm pf-u-mb-sm"
                                />
                              </TextContent>
                              <Label
                                isLarge={true}
                              >
                                Systems with this CVE
                              </Label>
                              <Table
                                aria-label="Status details"
                                borders={true}
                                canSelectAll={true}
                                canSortFavorites={true}
                                cells={
                                  Array [
                                    "Status",
                                    "Num. systems",
                                  ]
                                }
                                className="status-breakdown-table"
                                contentId="expanded-content"
                                dropdownDirection="down"
                                dropdownPosition="right"
                                expandId="expandable-toggle"
                                gridBreakPoint={null}
                                isStickyHeader={false}
                                ouiaSafe={true}
                                role="grid"
                                rowLabeledBy="simple-node"
                                rows={
                                  Array [
                                    Array [
                                      "Not reviewed",
                                      "114",
                                    ],
                                    Array [
                                      "Resolved",
                                      "4",
                                    ],
                                  ]
                                }
                                selectVariant="checkbox"
                                variant="compact"
                              >
                                <TableHeader />
                                <Unknown />
                              </Table>
                            </StackItem>
                          </Stack>
                        }
                        headerContent=""
                        id="popover"
                        position="right"
                      >
                        <Popper
                          appendTo={[Function]}
                          distance={25}
                          enableFlip={true}
                          flipBehavior={
                            Array [
                              "top",
                              "right",
                              "bottom",
                              "left",
                              "top",
                              "right",
                              "bottom",
                            ]
                          }
                          isVisible={false}
                          onDocumentClick={[Function]}
                          onDocumentKeyDown={[Function]}
                          onTriggerClick={[Function]}
                          onTriggerEnter={[Function]}
                          placement="right"
                          popper={
                            <FocusTrap
                              active={false}
                              aria-describedby="popover-popover-body"
                              aria-label="Business risk popover"
                              aria-modal="true"
                              className="pf-c-popover"
                              focusTrapOptions={
                                Object {
                                  "clickOutsideDeactivates": true,
                                  "fallbackFocus": [Function],
                                  "returnFocusOnDeactivate": true,
                                }
                              }
                              onMouseDown={[Function]}
                              paused={false}
                              preventScrollOnDeactivate={true}
                              role="dialog"
                              style={
                                Object {
                                  "maxWidth": null,
                                  "minWidth": null,
                                  "opacity": 0,
                                  "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                                }
                              }
                            >
                              <PopoverArrow />
                              <PopoverContent>
                                <PopoverCloseButton
                                  aria-label="Close"
                                  onClose={[Function]}
                                />
                                
                                <PopoverBody
                                  id="popover-popover-body"
                                >
                                  <Stack
                                    className="pf-u-p-xs"
                                  >
                                    <StackItem>
                                      <Label
                                        className="pf-u-mb-xs"
                                      >
                                        CVE status
                                      </Label>
                                      Resolved
                                      <Label
                                        className="pf-u-mb-xs pf-u-mt-sm"
                                      >
                                        Justification note
                                      </Label>
                                      --
                                    </StackItem>
                                    <StackItem>
                                      <TextContent>
                                        <hr
                                          className="pf-u-mt-sm pf-u-mb-sm"
                                        />
                                      </TextContent>
                                      <Label
                                        isLarge={true}
                                      >
                                        Systems with this CVE
                                      </Label>
                                      <Table
                                        aria-label="Status details"
                                        borders={true}
                                        canSelectAll={true}
                                        canSortFavorites={true}
                                        cells={
                                          Array [
                                            "Status",
                                            "Num. systems",
                                          ]
                                        }
                                        className="status-breakdown-table"
                                        contentId="expanded-content"
                                        dropdownDirection="down"
                                        dropdownPosition="right"
                                        expandId="expandable-toggle"
                                        gridBreakPoint={null}
                                        isStickyHeader={false}
                                        ouiaSafe={true}
                                        role="grid"
                                        rowLabeledBy="simple-node"
                                        rows={
                                          Array [
                                            Array [
                                              "Not reviewed",
                                              "114",
                                            ],
                                            Array [
                                              "Resolved",
                                              "4",
                                            ],
                                          ]
                                        }
                                        selectVariant="checkbox"
                                        variant="compact"
                                      >
                                        <TableHeader />
                                        <Unknown />
                                      </Table>
                                    </StackItem>
                                  </Stack>
                                </PopoverBody>
                              </PopoverContent>
                            </FocusTrap>
                          }
                          popperMatchesTriggerWidth={false}
                          positionModifiers={
                            Object {
                              "bottom": "pf-m-bottom",
                              "left": "pf-m-left",
                              "right": "pf-m-right",
                              "top": "pf-m-top",
                            }
                          }
                          trigger={
                            <Stack
                              style={
                                Object {
                                  "cursor": "pointer",
                                  "display": "inline-block",
                                }
                              }
                            >
                              <StackItem>
                                <Label
                                  isLarge={true}
                                >
                                  Status
                                </Label>
                              </StackItem>
                              <StackItem>
                                <a>
                                  <span>
                                    <ExclamationTriangleIcon
                                      color="var(--pf-global--primary-color--100)"
                                      noVerticalAlign={false}
                                      size="sm"
                                    />
                                     
                                    Resolved
                                  </span>
                                </a>
                              </StackItem>
                            </Stack>
                          }
                          zIndex={9999}
                        >
                          <FindRefWrapper
                            onFoundRef={[Function]}
                          >
                            <Stack
                              style={
                                Object {
                                  "cursor": "pointer",
                                  "display": "inline-block",
                                }
                              }
                            >
                              <div
                                className="pf-l-stack"
                                style={
                                  Object {
                                    "cursor": "pointer",
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <StackItem>
                                  <div
                                    className="pf-l-stack__item"
                                  >
                                    <Label
                                      isLarge={true}
                                    >
                                      <span
                                        className="vuln-label undefined"
                                        style={
                                          Object {
                                            "display": "block",
                                            "fontSize": 16,
                                          }
                                        }
                                      >
                                        Status
                                      </span>
                                    </Label>
                                  </div>
                                </StackItem>
                                <StackItem>
                                  <div
                                    className="pf-l-stack__item"
                                  >
                                    <a>
                                      <span>
                                        <ExclamationTriangleIcon
                                          color="var(--pf-global--primary-color--100)"
                                          noVerticalAlign={false}
                                          size="sm"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-labelledby={null}
                                            fill="var(--pf-global--primary-color--100)"
                                            height="1em"
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.125em",
                                              }
                                            }
                                            viewBox="0 0 576 512"
                                            width="1em"
                                          >
                                            <path
                                              d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                                            />
                                          </svg>
                                        </ExclamationTriangleIcon>
                                         
                                        Resolved
                                      </span>
                                    </a>
                                  </div>
                                </StackItem>
                              </div>
                            </Stack>
                          </FindRefWrapper>
                        </Popper>
                      </Popover>
                    </SnippetWithHeaderAndPopover>
                  </div>
                </SplitItem>
              </div>
            </Split>
          </div>
        </StackItem>
        <StackItem>
          <div
            className="pf-l-stack__item"
          >
            <Label
              className="pf-u-mb-xs"
              isLarge={true}
            >
              <span
                className="vuln-label pf-u-mb-xs"
                style={
                  Object {
                    "display": "block",
                    "fontSize": 16,
                  }
                }
              >
                Severity
              </span>
            </Label>
            <Shield
              hasLabel={true}
              hasTooltip={true}
              impact="Important"
              size="sm"
            >
              <span>
                <Tooltip
                  boundary="viewport"
                  content={
                    <div>
                      This rating is given to flaws that can easily compromise the     confidentiality, integrity, or availability of resources. These are the     types of vulnerabilities that allow local users to gain privileges, allow     unauthenticated remote users to view resources that should otherwise be     protected by authentication, allow authenticated remote users to execute     arbitrary code, or allow remote users to cause a denial of service.
                    </div>
                  }
                  position="bottom"
                >
                  <Popper
                    appendTo={[Function]}
                    distance={15}
                    enableFlip={true}
                    flipBehavior={
                      Array [
                        "top",
                        "right",
                        "bottom",
                        "left",
                        "top",
                        "right",
                        "bottom",
                      ]
                    }
                    isVisible={false}
                    onBlur={[Function]}
                    onDocumentClick={false}
                    onDocumentKeyDown={[Function]}
                    onFocus={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    onTriggerEnter={[Function]}
                    placement="bottom"
                    popper={
                      <div
                        className="pf-c-tooltip"
                        id="pf-tooltip-2"
                        role="tooltip"
                        style={
                          Object {
                            "maxWidth": null,
                            "opacity": 0,
                            "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                          }
                        }
                      >
                        <TooltipArrow />
                        <TooltipContent
                          isLeftAligned={false}
                        >
                          <div>
                            This rating is given to flaws that can easily compromise the     confidentiality, integrity, or availability of resources. These are the     types of vulnerabilities that allow local users to gain privileges, allow     unauthenticated remote users to view resources that should otherwise be     protected by authentication, allow authenticated remote users to execute     arbitrary code, or allow remote users to cause a denial of service.
                          </div>
                        </TooltipContent>
                      </div>
                    }
                    popperMatchesTriggerWidth={false}
                    positionModifiers={
                      Object {
                        "bottom": "pf-m-bottom",
                        "left": "pf-m-left",
                        "right": "pf-m-right",
                        "top": "pf-m-top",
                      }
                    }
                    trigger={
                      <span
                        aria-describedby="pf-tooltip-2"
                      >
                        <SecurityIcon
                          aria-hidden="false"
                          aria-label="Important"
                          color="#ec7a08"
                          noVerticalAlign={false}
                          size="sm"
                        />
                         
                        Important
                      </span>
                    }
                    zIndex={9999}
                  >
                    <FindRefWrapper
                      onFoundRef={[Function]}
                    >
                      <span
                        aria-describedby="pf-tooltip-2"
                      >
                        <SecurityIcon
                          aria-hidden="false"
                          aria-label="Important"
                          color="#ec7a08"
                          noVerticalAlign={false}
                          size="sm"
                        >
                          <svg
                            aria-hidden="false"
                            aria-label="Important"
                            aria-labelledby={null}
                            fill="#ec7a08"
                            height="1em"
                            role="img"
                            style={
                              Object {
                                "verticalAlign": "-0.125em",
                              }
                            }
                            viewBox="0 0 896 1024"
                            width="1em"
                          >
                            <path
                              d="M861.5,0 L34.5,0 C15.4,0 0,14.3 0,32 L0,452.1 C0,768 387.7,1024 448.5,1024 C509.3,1024 896,768 896,452.2 L896,32 C896,14.3 880.6,0 861.5,0 Z M490.7,768 L405.3,768 C393.5,767.8 384.2,757.5 384,744.7 L384,663.3 C384.2,650.5 393.6,640.3 405.3,640 L490.7,640 C502.5,640.2 511.8,650.5 512,663.3 L512,744.7 L512.1,744.7 C511.8,757.5 502.4,767.8 490.7,768 Z M543.9,162.7 L517.2,514.4 C515.8,530.9 502,544 485.3,544 L410.6,544 C394,544 380.1,531.2 378.7,514.7 L352.1,163 C350.5,144.3 365.3,128.3 384,128.3 L512,128 C530.7,128 545.4,144 543.9,162.7 Z"
                            />
                          </svg>
                        </SecurityIcon>
                         
                        Important
                      </span>
                    </FindRefWrapper>
                  </Popper>
                </Tooltip>
              </span>
            </Shield>
          </div>
        </StackItem>
        <StackItem>
          <div
            className="pf-l-stack__item"
          >
            <injectIntl(CvssVector)
              cvss2_metrics={null}
              cvss3_metrics="CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
              score="7.8"
            >
              <CvssVector
                cvss2_metrics={null}
                cvss3_metrics="CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
                intl={
                  Object {
                    "defaultFormats": Object {},
                    "defaultLocale": "en",
                    "formatDate": [Function],
                    "formatDateToParts": [Function],
                    "formatDisplayName": [Function],
                    "formatList": [Function],
                    "formatMessage": [Function],
                    "formatNumber": [Function],
                    "formatNumberToParts": [Function],
                    "formatPlural": [Function],
                    "formatRelativeTime": [Function],
                    "formatTime": [Function],
                    "formatTimeToParts": [Function],
                    "formats": Object {},
                    "formatters": Object {
                      "getDateTimeFormat": [Function],
                      "getDisplayNames": [Function],
                      "getListFormat": [Function],
                      "getMessageFormat": [Function],
                      "getNumberFormat": [Function],
                      "getPluralRules": [Function],
                      "getRelativeTimeFormat": [Function],
                    },
                    "locale": "en",
                    "messages": Object {
                      "default.cancel": "Cancel",
                      "default.delete": "Delete",
                      "default.remove": "Remove",
                      "default.save": "Save",
                    },
                    "onError": [Function],
                    "textComponent": Symbol(react.fragment),
                    "timeZone": undefined,
                    "wrapRichTextChunksInFragment": undefined,
                  }
                }
                score="7.8"
              >
                <TextContent>
                  <div
                    className="pf-c-content"
                  >
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                    <WithLoader
                      loading={true}
                    >
                      <Skeleton
                        isDark={false}
                        size="lg"
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__lg"
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                  </div>
                </TextContent>
              </CvssVector>
            </injectIntl(CvssVector)>
          </div>
        </StackItem>
      </div>
    </Stack>
  </CVEPageDetailsSeverity>
</injectIntl(CVEPageDetailsSeverity)>
`;
