import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';
import { cveTableRowActions } from '../../../Helpers/CVEHelper';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { CVETableContext } from './CVEs';
import messages from '../../../Messages';

const CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {
    const noCves = () => {
        return ([{
            heightAuto: true,
            cells: [
                {
                    props: { colSpan: header?.length },
                    title: <EmptyStateNoCVEs secondParagraph={messages.emptyStateThereShouldBeCVEs} />
                }
            ]
        }]);
    };

    const handleOnSelect = (event, isSelected, rowId) => {
        const { cves, methods } = context;
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    const { cves, methods, selectedCves, expandedRows } = context;
    const isEmpty = cves.data.length === 0;

    const rows = cves.data && cves.data
        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)
        .map((cve, index) => {
            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;
            return ({ ...cve, isOpen: current });
        });

    return (
        !cves.isLoading ? (
            <Fragment>
                <Table
                    canCollapseAll={false}
                    canSelectAll={false}
                    aria-label="Vulnerability CVE table"
                    cells={header}
                    rows={isEmpty ? noCves() : rows}
                    onSelect={!isEmpty ? handleOnSelect : undefined}
                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}
                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?
                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}
                    sortBy={!isEmpty ?
                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}
                    onSort={!isEmpty ?
                        (event, key, direction) =>
                            handleSortColumn(
                                key,
                                direction,
                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],
                                cves.meta.sort,
                                methods.apply
                            ) : undefined
                    }
                    ouiaId="cves-table"
                    isStickyHeader
                    variant={TableVariant.compact}
                >
                    <TableHeader />
                    <TableBody />
                </Table>
                <PaginationWrapper meta={cves.meta} apply={methods.apply} />
            </Fragment>
        ) : (
            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />
        )
    );

};

CVEsTableWithContext.propTypes = {
    context: propTypes.any,
    header: propTypes.array,
    canEditStatusOrBusinessRisk: propTypes.bool
};

const CVEsTable = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default CVEsTable;
