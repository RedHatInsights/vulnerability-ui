import { DropdownPosition, Page } from '@patternfly/react-core';
import { InvalidObject, Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import {
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    handleCveDetailsError,
    setHeader,
    changeExposedSystemsParameters
} from '../../../Store/Actions/Actions';
import { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';
import { PATHS } from '../../../Helpers/constants';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import CveStatusModal from '../Modals/CveStatusModal';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

export const CVEPageContext = React.createContext({ isLoading: true });

class CVEPage extends React.Component {
    static propTypes = {
        match: propTypes.object,
        cveDetails: propTypes.object,
        fetchCveDetails: propTypes.func,
        setHeader: propTypes.func,
        handleCveDetailsError: propTypes.func,
        fetchAffectedSystems: propTypes.func,
        changeExposedSystemsParameters: propTypes.func
    };

    constructor(props) {
        super(props);
        this.state = { cveName: this.props.match.params.cve, BusinessRiskModal: () => null, StatusModal: () => null };
    }

    componentDidMount() {
        const { fetchCveDetails, handleCveDetailsError, setHeader } = this.props;

        setHeader({
            breadcrumbs: [
                { title: PATHS.vulnerabilities.title, to: PATHS.vulnerabilities.to },
                { title: PATHS.vulnerabilitiesCves.title, to: PATHS.vulnerabilitiesCves.to },
                { title: this.state.cveName, isActive: true }
            ]
        });

        fetchCveDetails(this.state.cveName).catch(() => {
            handleCveDetailsError();
        });
    }

    showBusinessRiskModal = cves => {
        this.setState({
            BusinessRiskModal: () => (
                <BusinessRiskModal open cves={cves} updateRef={() => this.props.fetchCveDetails(this.state.cveName)} />
            )
        });
    };

    showStatusModal = cves => {
        this.setState({
            StatusModal: () => (
                <CveStatusModal
                    cves={cves}
                    updateRef={() => {
                        this.props.fetchCveDetails(this.state.cveName);
                        this.props.fetchAffectedSystems(this.state.cveName);
                    }}
                />
            )
        });
    };

    render() {
        const { showStatusModal } = this;
        const { cveDetails, fetchAffectedSystems, changeExposedSystemsParameters } = this.props;
        const { error, data } = cveDetails;
        const { cveName, BusinessRiskModal, StatusModal } = this.state;
        const cveStatusDetails = {
            id: cveName,
            status_id: cveDetails.data.status_id,
            justification: cveDetails.data.status_justification
        };
        const kebabItems = [
            kebabItemEditBusinessRisk(this.showBusinessRiskModal, [
                {
                    business_risk_id: cveDetails.data.business_risk_id,
                    id: cveName,
                    justification: cveDetails.data.business_risk_justification
                }
            ]),
            kebabItemEditStatus(this.showStatusModal, [cveStatusDetails])
        ];
        const { rules } = data;
        const filterRuleValues = rules && rules.map(
            ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })
        );
        if (!error) {
            return (
                <Page>
                    <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>
                        <VulnerabilityHeader
                            title={
                                <span style={{ display: 'flex', justifyContent: 'space-between' }}>
                                    {cveName}
                                    <BaseKebab dropdownItems={kebabItems} position={DropdownPosition.right}></BaseKebab>
                                </span>
                            }
                            showTabs={false}
                        >
                            <CVEPageDetails changeExposedSystemsParameters={changeExposedSystemsParameters} data={cveDetails} />
                            <StatusModal />
                            <BusinessRiskModal />
                        </VulnerabilityHeader>
                        <Main>
                            <SystemsExposedTable
                                cve={cveName}
                                filterRuleValues={filterRuleValues}
                                cveStatusDetails={cveStatusDetails}
                                fetchData={fetchAffectedSystems}
                                methods={{ showStatusModal }}
                            />
                        </Main>
                    </CVEPageContext.Provider>
                </Page>
            );
        } else {
            return (
                <React.Fragment>
                    <VulnerabilityHeader title={cveName} showTabs={false} />
                    <InvalidObject />
                </React.Fragment>
            );
        }
    }
}

function mapStateToProps(state) {
    return {
        cveDetails: sCveDetailsPage(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchCveDetails: cveName => dispatch(fetchCveDetails(cveName)),
        changeExposedSystemsParameters: params => dispatch(changeExposedSystemsParameters(params)),
        setHeader: header => dispatch(setHeader(header)),
        handleCveDetailsError: () => dispatch(handleCveDetailsError()),
        fetchAffectedSystems: (cve, options) => dispatch(fetchAffectedSystemsByCVE(cve, options))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEPage)
);
