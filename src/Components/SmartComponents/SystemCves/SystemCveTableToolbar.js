/* eslint-disable camelcase */

import propTypes from 'prop-types';
import React from 'react';
import Remediation from '../Remediation/Remediation';
import { CVETableContext } from './SystemCves';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';
import { handleChangePage, handleSetPageSize, kebabActions, exportConfig } from '../../../Helpers/TableToolbarHelper';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import publishDateFilter from '../../PresentationalComponents/Filters/PublishDateFilter';
import cvssBaseScoreFilter from '../../PresentationalComponents/Filters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/ImpactFilter';
import searchFilter from '../../PresentationalComponents/Filters/Searchfilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/BusinessRiskFilter';
import statusFilter from '../../PresentationalComponents/Filters/StatusFilter';

const SystemCveToolbarWithContext = (props) => {

    const handleCveDescription = () => {
        const { context } = props;
        const { cves, methods, params } = context;
        const { expandCveDescription } = params;
        const isOpen = !expandCveDescription;
        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(isOpen, openedCves, !expandCveDescription);
    };

    const { showRemediationButton, entity, context } = props;
    const { cves, params, methods } = context;
    const { selectedCves, filter } = params;
    const selectedCvesCount =
        props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;
    const selectOptions = selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => methods.fetchResource({ ...params, ...ops }),
        multiRow: true
    });
    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    itemCount: cves.meta.total_items || 1,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions: kebabActions(context, !selectedCvesCount, handleCveDescription, 'systems'),
                    dropdownProps: { className: 'custom-class' }
                }}
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    checked: Boolean(selectedCvesCount),
                    onSelect: () => selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter('Find a CVE...', methods.apply, filter),
                        cvssBaseScoreFilter(methods.apply, params),
                        impactFilter(methods.apply, params),
                        businessRiskFilter(methods.apply, params),
                        publishDateFilter(methods.apply, params),
                        statusFilter(methods.apply, params)
                    ]
                }}
                exportConfig = {exportConfig(methods)}
            >
                {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}
            </PrimaryToolbar>
        </React.Fragment>
    );

};

SystemCveToolbarWithContext.propTypes = {
    showRemediationButton: propTypes.bool,
    entity: propTypes.object,
    context: propTypes.object
};

SystemCveToolbarWithContext.defaultProps = {
    showRemediationButton: false,
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default SystemCveToolbar;
