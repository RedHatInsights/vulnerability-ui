import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';
import { ServerAltIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React from 'react';
import { STATUS_OPTIONS } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';
import Label from './Label';

const SnippetWithPopover = props => {
    const { type, row } = props;
    const {
        business_risk_text: businessRiskJustification,
        cve_status_id: cveStatusId,
        status_text: statusJustification,
        status_id: systemStatusId
    } = row.attributes;
    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;

    const BusinessRiskPopoverContent = (
        <StackItem>
            <Label>
                <FormattedMessage {...messages.justificationNote} />
            </Label>
            {businessRiskJustification || '--'}
        </StackItem>
    );

    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());

    const StatusPopoverContent = (
        <StackItem>
            <Label>
                <FormattedMessage {...messages.cveSystemPairStatus} />
            </Label>

            {systemStatusOption?.label || '--'}

            <Label className="pf-u-mt-sm">
                <FormattedMessage {...messages.justificationNote} />
            </Label>
            {statusJustification || '--'}
        </StackItem>
    );

    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());

    const popoverContent = (
        <Stack>
            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}
            <StackItem>
                <TextContent>
                    <hr className={'splitter pf-u-mb-md pf-u-mt-md'} />
                </TextContent>
                <Label className="pf-u-mt-sm">
                    <FormattedMessage {...messages.cveStatus} />
                </Label>
            </StackItem>
            <StackItem>
                {statusOption?.label || '--'}
            </StackItem>
        </Stack>
    );

    const buttonStyle = {
        wordBreak: 'normal',
        color: hasDefaultStatus ? 'black' : '',
        whiteSpace: 'unset',
        maxWidth: '131px',
        textAlign: 'left',
        padding: '0px'
    };

    return (
        <Popover bodyContent={popoverContent}
            id="popover"
            aria-label={'Business risk popover'}
            position="left"
        >

            <Button variant="link"
                isDisabled={hasDefaultStatus}
                style={buttonStyle}>
                {cveStatusId !== systemStatusId ? (
                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>
                        <ServerAltIcon className="pf-u-m-l"/>
                    </Tooltip>
                ) : ('')}
                {' '}{systemStatusOption?.label || '--'}
            </Button>
        </Popover>
    );
};

SnippetWithPopover.propTypes = {
    type: propTypes.number,
    row: propTypes.object
};
export default SnippetWithPopover;
