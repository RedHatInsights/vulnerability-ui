import React, { useEffect, useState, Fragment } from 'react';
import { useIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import SystemsTableToolbar from './SystemsTableToolbar';
import { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import Header from '../../PresentationalComponents/Header/Header';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeSystemsParams,
    clearSystemStore,
    clearInventoryStore,
    selectRows
} from '../../../Store/Actions/Actions';
import { useUrlParams } from '../../../Helpers/MiscHelper';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { TableVariant } from '@patternfly/react-table';
import { useGetEntities, useOptOutSystems } from '../../../Helpers/Hooks';
import useDeepCompareEffect from 'use-deep-compare-effect';
import * as APIHelper from '../../../Helpers/APIHelper';
import { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import ColumnManagementModal from '../Modals/ColumnManagementModal';

const SystemsPage = () => {
    const inventoryRef = React.createRef();
    const dispatch = useDispatch();
    const intl = useIntl();
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);

    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);
    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});
    const selectedRowsCount = Object.keys(selectedRows).length || 0;
    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);

    const parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);
    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);

    const [columns, setColumns] = useState(SYSTEMS_HEADER);
    const [isColumnModalOpen, setColumnModalOpen] = useState(false);

    const mergeColumns = inventoryColumns => {
        return columns
            .filter(column => column.isShown)
            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));
    };

    useEffect(() => {
        return () => {
            dispatch(clearSystemStore());
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    const apply = (params) => dispatch(changeSystemsParams(params));

    useEffect(() => apply(urlParameters), []);

    useDeepCompareEffect(() => setUrlParams({ ...parameters }), [parameters]);

    const handleSelect = (payload) => dispatch(selectRows(payload));

    const onRefreshInventory = () => (
        dispatch(clearInventoryStore()),
        inventoryRef.current.onRefreshData(({ page: 1 }))
    );

    const doOptOut = useOptOutSystems(onRefreshInventory);
    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, []);
    const getEntities = useGetEntities(APIHelper.getSystems, setUrlParams);

    const [columnCounter, setColumnCount] = useState(0);
    useEffect(() => setColumnCount(columnCounter + 1), [columns]);

    return (
        <Fragment>
            <ColumnManagementModal
                appliedColumns={columns}
                applyColumns={setColumns}
                isModalOpen={isColumnModalOpen}
                setModalOpen={setColumnModalOpen}
            />
            <Header title={intl.formatMessage(messages.vulnerabilitySystemsHeader)} showBreadcrumb={false} />
            <Main>
                {hasError
                    ? <ErrorHandler code={errorCode} />
                    : (
                        <InventoryTable
                            disableDefaultColumns
                            onLoad={({ mergeWithEntities }) => {
                                ReducerRegistry.register({
                                    ...mergeWithEntities(
                                        inventoryEntitiesReducer(SYSTEMS_HEADER),
                                        {
                                            page: Number(parameters.page || 1),
                                            perPage: Number(parameters.page_size || 20),
                                            ...(parameters.sort && {
                                                sortBy: {
                                                    key: parameters.sort.replace(/^-/, ''),
                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'
                                                }
                                            })
                                        }
                                    )
                                });
                            }}
                            tableProps={{
                                isStickyHeader: true,
                                canSelectAll: false,
                                actionResolver: systems?.length > 0
                                    && ((rowData) => systemTableRowActions(rowData, doOptOut)),
                                variant: TableVariant.compact
                            }}
                            showTagModal
                            isFullView
                            ref={inventoryRef}
                            autoRefresh
                            customFilters={{
                                vulnerabilityParams: {
                                    ...parameters
                                }
                            }}
                            hasCheckbox={systems?.length !== 0}
                            columnsCounter={columnCounter}
                            columns={defaultColumns => mergeColumns(defaultColumns)}
                            getEntities={getEntities}
                            hideFilters={{ all: true }}
                            noSystemsTable={<EmptyStateNoSystems />}
                        >
                            <SystemsTableToolbar
                                parameters={parameters}
                                systems={{ data: systems, meta: { total_items: totalItems } }}
                                selectedRows={selectedRows}
                                selectedRowsCount={selectedRowsCount}
                                selectedRowsRawData={selectedRowsRawData}
                                methods={{
                                    doOptOut,
                                    apply,
                                    handleSelect,
                                    setColumnModalOpen
                                }}
                                actions
                            />
                        </InventoryTable>
                    )}
            </Main>
        </Fragment>
    );
};

export default SystemsPage;
