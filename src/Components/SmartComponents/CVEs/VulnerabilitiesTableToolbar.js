/* eslint-disable camelcase */

import React from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import Remediation from '../Remediation/Remediation';
import { CVETableContext } from './VulnerabilitiesCves';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';
import { handleChangePage, handleSetPageSize, kebabAction,
    exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';

const  VulnerabilitiesToolbarWithContext = (props) => {

    const handleCveDescription = () => {
        const { context } = props;
        const { cves, methods, params } = context;
        const { expandCveDescription } = params;
        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCve(openedCves);
    };

    const { showRemediationButton, entity, context } = props;
    const { cves, params, methods } = context;
    const { selectedCves, expandCveDescription, filter } = params;
    const selectedCvesCount = selectedCves && selectedCves.length;

    const selectOptions  = selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),
        multiRow: true
    });

    const actions = [
        showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} /> || '',
        kebabAction(
            props.intl.formatMessage(messages.editBusinessRisk),
            () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),
            !selectedCvesCount,
        ),
        kebabAction(
            props.intl.formatMessage(messages.editStatus),
            () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),
            !selectedCvesCount,
        ),
        kebabAction(
            expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)
                : props.intl.formatMessage(messages.kebabExpandCves),
            handleCveDescription,
            false
        )

    ];
    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    itemCount: cves.meta.total_items || 1,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions,
                    dropdownProps: { className: 'custom-class' }
                } }
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    checked: Boolean(selectedCvesCount),
                    onSelect: ()=> selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter(props.intl.formatMessage(messages.searchLabel), filter, methods.apply),
                        notAffectingCvesFilter(methods.apply, params),
                        securityRuleFilter(methods.apply, params),
                        impactFilter(methods.apply, params),
                        cvssBaseScoreFilter(methods.apply, params),                        
                        businessRiskFilter(methods.apply, params),                        
                        statusFilter(methods.apply, params),
                        publishDateFilter(methods.apply, params)
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(params),
                    onDelete: (e, i) => removeFilters(i, methods.apply)
                }}
                exportConfig = {exportConfig(methods)}
            />

        </React.Fragment>
    );
};

VulnerabilitiesToolbarWithContext.propTypes = {
    showRemediationButton: propTypes.bool,
    entity: propTypes.object,
    context: propTypes.object,
    intl: propTypes.object
};

VulnerabilitiesToolbarWithContext.defaultProps = {
    showRemediationButton: false,
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

const VulnerabilitiesToolbar = props => (
    <CVETableContext.Consumer>
        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);
export default injectIntl(VulnerabilitiesToolbar);
