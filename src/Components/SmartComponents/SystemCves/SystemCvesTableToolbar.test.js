import SystemCveTableToolbar from './SystemCveTableToolbar';
import { CVETableContext } from './SystemCves';
import { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';
import configureStore from 'redux-mock-store';
import { initialState } from '../../../Store/Reducers/SystemCvesStore';
import {
    handleChangePage,
    handleSetPageSize,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';
import { SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';
import TestWrapper from '../../../Utilities/TestWrapper';
import { systemCvesTableData } from './systemCves.fixtures';
import { fireEvent, render, screen } from '@testing-library/react';

jest.mock('../../../Helpers/TableToolbarHelper', () => ({
    ...jest.requireActual('../../../Helpers/TableToolbarHelper'),
    handleChangePage: jest.fn(),
    handleSetPageSize: jest.fn(),
    removeFilters: jest.fn()
}));

const mockContext = {
    cves: createCveListBySystem('CVE-2019-6454', {
        payload: {
            isLoading: false,
            meta: {
                test: 'test',
                page: 1,
                page_size: 2,
                pages: 2,
                total_items: 4
            },
            data: systemCvesTableData
        }
    }, SYSTEM_DETAILS_HEADER),
    parameters: { filter: 'testFilter' },
    selectedCves: [{ id: 'CVE-2019-6454', attributes: {} }],
    systemCVEs: { payload: { data: [{ id: 'CVE-2019-6454' }]} },
    expandedRows: ['CVE-2019-6454'],
    prevLoadedRows: [],
    canEditPairStatus: true,
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn(),
        fetchResource: jest.fn().mockReturnValue({
            payload: Promise.resolve({
                data: [{ id: 'testID' }]
            })
        }),
        bulkFetchResource: jest.fn().mockReturnValue({
            payload: Promise.resolve({
                data: [{ id: 'testID' }]
            })
        })
    }
};

const customMiddleWare = store => next => action => {
    next(action);
}

const mockStore = configureStore([customMiddleWare]);
const store = mockStore(initialState);

const props = {
    entity: 'CVE-2019-6454',
    canExport: true,
    canSelect: true,
    canManageColumns: true,
    customAction: <React.Fragment />
}

describe('SystemCvesTableToolbar', () => {
    const mountWithStore = (testContext = {}) =>
        render(
            <TestWrapper store={ store }>
                <CVETableContext.Provider value={{ ...mockContext, ...testContext, canRemediate: true, canEditStatus: true }}>
                    <SystemCveTableToolbar {...props}/>
                </CVETableContext.Provider>
            </TestWrapper>
        );

    describe('actionsConfig:', () => {
        it('Should showStatusModal be called with item ID and status_id = 0', () => {
            const testContext = { ...mockContext };
            mountWithStore(testContext);
            fireEvent.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: 'Edit status' }));
            expect(mockContext.methods.showStatusModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', attributes: {} }], true);
        });
    });

    describe('pagination:', () => {
        it('Should call handlePageChange on page change', () => {
            const testContext = { ...mockContext };
            mountWithStore(testContext);
            fireEvent.click(screen.getByRole('button', {
                name: /go to next page/i
            }));
            expect(handleChangePage).toHaveBeenCalledWith(expect.anything(), 2, expect.any(Function));
        });

        it('Should call handleSetPageSize on page size change', () => {
            const testContext = { ...mockContext, selectedCves: [{ id: 'testSelectedItem', attributes: {} }] };
            mountWithStore(testContext);
            fireEvent.click(screen.getByRole('button', {
                name: /1 \- 2 of 4/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: '10 per page' }));
            expect(handleSetPageSize).toHaveBeenCalledWith(expect.anything(), 10, expect.any(Function));
        });
    });

    describe('bulkSelect:', () => {
        it('Should handleOnCheckboxChange unselect all items', async () => {
            const testContext = { ...mockContext };
            mountWithStore(testContext);
            fireEvent.click(screen.getByRole('checkbox', {
                name: /select all/i
            }));
            expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, []);
        });
    });

    describe('activeFiltersConfig:', () => {
        it('Should call removeFilters with four parameters', () => {
            const testContext = { ...mockContext };
            mountWithStore(testContext);
            fireEvent.click(screen.getByRole('button', {
                name: /reset filters/i
            }));
            expect(removeFilters).toHaveBeenCalledWith(
                [{"category": "Search term", "chips": [{"name": "testFilter"}], "key": "filter"}],
                expect.any(Function),
                true,
                {}
            );
        });
    });
});
