import CVEsTableToolbar from './CVEsTableToolbar';
import { CVETableContext } from './CVEs';
import TestWrapper from '../../../Utilities/TestWrapper';
import { render, screen } from '@testing-library/react';
import {
    handleChangePage,
    handleSetPageSize,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';
import { useHybridSystemFilterFlag } from '../../../Helpers/Hooks';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/TableToolbarHelper', () => ({
    ...(jest.requireActual('../../../Helpers/TableToolbarHelper')),
    handleChangePage: jest.fn(),
    handleSetPageSize: jest.fn(),
    removeFilters: jest.fn()
}));

jest.mock('../../../Store/Actions/Actions', () => ({
    ...jest.requireActual('../../../Store/Actions/Actions'),
    fetchCvesIds: () => ({
        type: 'FETCH_CVE_LIST_IDS',
        payload: new Promise(() => {})
    }) }
));

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useHybridSystemFilterFlag: jest.fn(() => false)
}));

const mockContext = {
    cves: {
        isLoading: false,
        meta: {
            test: 'test'
        },
        data: [
            {
                type: 'cve',
                id: 'CVE-2019-6454',
                exposed_systems_count: 1,
                business_risk_id: 0,
                business_risk_justification: null,
                status_id: 2,
                status_justification: "testhello",
                attributes: {
                    business_risk: "Not Defined",
                    business_risk_id: 0,
                    business_risk_text: null,
                    cve_status_id: 2,
                    cve_status_text: "testhello",
                    cvss2_score: null,
                    cvss3_score: "6.500",
                    description: "A new domain bypass",
                    impact: "Moderate",
                    public_date: "2020-06-09T17:00:00+00:00",
                    reporter: 1,
                    rule: null,
                    status: "On-Hold",
                    status_id: 2,
                    status_text: "testhello",
                    synopsis: "CVE-2020-0543",
                    affected_systems: 1,
                    rule: 'testRule'
                }
            }
        ]

    },
    params: {},
    selectedCves: [
        {
            attributes: {
                business_risk: 'Not Defined',
                business_risk_id: 0,
                business_risk_text: null,
                cvss2_score: null,
                cvss3_score: '8.600',
                description: 'There\'s a flaw in libxml2. An attacker who is able to submit a crafted file to be processed by an application linked with libxml2 could trigger a use-after-free. The greatest impact from this flaw is to confidentiality, integrity, and availability.',
                impact: 'Moderate',
                known_exploit: false,
                public_date: '2021-04-22T00:00:00+00:00',
                rules: [],
                status: 'Resolved',
                status_id: 2,
                status_text: null,
                synopsis: 'CVE-2019-6454',
                systems_affected: 497,
                systems_status_divergent: 497,
                status_justification: 'testhello',
                exposed_systems_count: 1,
                business_risk_justification: null
            },
            id: 'CVE-2019-6454',
            type: 'cve'
        }
    ],
    expandedRows: [],
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showBusinessRiskModal: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn()
    }
};

const props = {
    canEditStatusOrBusinessRisk: true,
    canExport: true
}

describe('CVEsTableToolbar', () => {
    it('Should render snapshot in a state without errors', () => {
        const { asFragment } = render(
            <TestWrapper>
                <CVETableContext.Provider value={mockContext}>
                    <CVEsTableToolbar {...props} />
                </CVETableContext.Provider>
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it.skip('Should CVEsTableToolbarWithContext inherit default props', () => {
        let tempContext = { ...mockContext, methods: {} };
        const tempWrapper = render(
            <CVETableContext.Provider value={tempContext}>
                <CVEsTableToolbar {...props} />
            </CVETableContext.Provider>
        );
        const { totalNumber, apply, downloadReport } = tempWrapper.find('CVEsTableToolbarWithContext').props();
        expect(totalNumber).toEqual(0);
        expect(apply()).toEqual(undefined);
        expect(downloadReport()).toEqual(undefined);
        tempWrapper.unmount();
        tempContext = {};
    });

    describe('actionsConfig:', () => {
        it('Should showStatusModal be called with item ID and status_id = 0', () => {
            const testContext = { ...mockContext };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Actions' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Edit status' }));
            expect(mockContext.methods.showStatusModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "status_id": 2, "justification": null, "exposed_systems_count": 497 }], true);
        });

        it('Should showBusinessRiskModal be called with item ID and business_risk_id = 0', () => {
            const testContext = { ...mockContext };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Actions' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Edit business risk' }));
            expect(mockContext.methods.showBusinessRiskModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "business_risk_id": 0, "justification": null }], true);
        });
    });

    describe('pagination:', () => {
        it('Should call handlePageChange on page change', () => {
            mockContext.cves.meta.total_items = 45;
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Go to next page' }));
            expect(handleChangePage).toHaveBeenCalledWith(expect.anything(), 2, expect.any(Function));
        });

        it('Should call handleSetPageSize on page size change', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Items per page' }));
            userEvent.click(screen.getByRole('menuitem', { name: '10 per page' }));
            expect(handleSetPageSize).toHaveBeenCalledWith(expect.anything(), 10, expect.any(Function));
        });
    });

    describe('bulkSelect:', () => {
        it('Should handleOnCheckboxChange unselect all selected items', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );
            userEvent.click(screen.getByRole('checkbox', { name: 'Select all' }));
            expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, []);
        });

        it('Should handleOnCheckboxChange select all items', () => {
            const testContext = { ...mockContext, selectedCves: [] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );
            userEvent.click(screen.getByRole('checkbox', { name: 'Select all' }));
            expect(mockContext.methods.selectCves).toHaveBeenCalled();
        });
    });

    describe('activeFiltersConfig:', () => {
        it('Should call Reset filters', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Reset filters' }));
            expect(removeFilters).toHaveBeenCalledWith([], expect.any(Function), true, { "affecting": "true" });
        });

        it('Should hide edge related filters when edge flag is off', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Conditional filter' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Systems' }));
            userEvent.click(screen.getByRole('button', { name: 'Options menu' }));

            expect(screen.getByText(/1 or more/i)).toBeVisible();
            expect(screen.queryByText(/1 or more conventional \(rpm\-dnf\)/i)).toBeFalsy();
            expect(screen.queryByText(/1 or more immutable \(ostree\)/i)).toBeFalsy();
        });

        it('Should show edge related filters when edge flag is on', () => {
            useHybridSystemFilterFlag.mockReturnValue(true);
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            render(
                <TestWrapper>
                    <CVETableContext.Provider value={testContext}>
                        <CVEsTableToolbar {...props} />
                    </CVETableContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Conditional filter' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Systems' }));
            userEvent.click(screen.getByRole('button', { name: 'Options menu' }));
            
            expect(screen.getByText(/1 or more conventional \(rpm\-dnf\)/i)).toBeVisible();
            expect(screen.getByText(/1 or more immutable \(ostree\)/i)).toBeVisible();
        });
    });

});
