// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnippetWithHeaderAndTooltip Should render with title and label and Tooltip 1`] = `
<SnippetWithHeaderAndPopover
  title="testTitle"
  tooltipText="Some random text"
  value="testDescription"
>
  <Popover
    appendTo={[Function]}
    aria-label="Business risk popover"
    boundary="window"
    className=""
    closeBtnAriaLabel="Close"
    distance={25}
    enableFlip={true}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    footerContent={null}
    headerContent=""
    hideOnOutsideClick={true}
    isVisible={null}
    maxWidth="calc(2rem + 18.75rem)"
    onHidden={[Function]}
    onHide={[Function]}
    onMount={[Function]}
    onShow={[Function]}
    onShown={[Function]}
    position="right"
    shouldClose={[Function]}
    tippyProps={Object {}}
    zIndex={9999}
  >
    <PopoverBase
      appendTo={[Function]}
      arrow={true}
      boundary="window"
      content={<React.Fragment />}
      distance={25}
      flip={true}
      flipBehavior={
        Array [
          "top",
          "right",
          "bottom",
          "left",
          "top",
          "right",
          "bottom",
        ]
      }
      hideOnClick={true}
      interactive={true}
      interactiveBorder={0}
      isVisible={null}
      lazy={true}
      maxWidth="calc(2rem + 18.75rem)"
      onCreate={[Function]}
      onHidden={[Function]}
      onHide={[Function]}
      onMount={[Function]}
      onShow={[Function]}
      onShown={[Function]}
      placement="right"
      popperOptions={
        Object {
          "modifiers": Object {
            "hide": Object {
              "enabled": true,
            },
            "preventOverflow": Object {
              "enabled": true,
            },
          },
        }
      }
      theme="pf-popover"
      trigger="click"
      zIndex={9999}
    >
      <Stack
        style={
          Object {
            "cursor": "pointer",
            "display": "inline-block",
          }
        }
      >
        <div
          className="pf-l-stack"
          style={
            Object {
              "cursor": "pointer",
              "display": "inline-block",
            }
          }
        >
          <StackItem>
            <div
              className="pf-l-stack__item"
            >
              <Label>
                <span
                  className="vuln-label"
                >
                  testTitle
                </span>
              </Label>
            </div>
          </StackItem>
          <StackItem>
            <div
              className="pf-l-stack__item"
            >
              testDescription
            </div>
          </StackItem>
        </div>
      </Stack>
      <Portal
        containerInfo={<div />}
      />
    </PopoverBase>
  </Popover>
</SnippetWithHeaderAndPopover>
`;

exports[`SnippetWithHeaderAndTooltip Should render with title and label only 1`] = `
<SnippetWithHeaderAndPopover
  title="testTitle"
  value="testDescription"
>
  <Popover
    appendTo={[Function]}
    aria-label="Business risk popover"
    boundary="window"
    className=""
    closeBtnAriaLabel="Close"
    distance={25}
    enableFlip={true}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    footerContent={null}
    headerContent=""
    hideOnOutsideClick={true}
    isVisible={null}
    maxWidth="calc(2rem + 18.75rem)"
    onHidden={[Function]}
    onHide={[Function]}
    onMount={[Function]}
    onShow={[Function]}
    onShown={[Function]}
    position="right"
    shouldClose={[Function]}
    tippyProps={Object {}}
    zIndex={9999}
  >
    <PopoverBase
      appendTo={[Function]}
      arrow={true}
      boundary="window"
      content={<React.Fragment />}
      distance={25}
      flip={true}
      flipBehavior={
        Array [
          "top",
          "right",
          "bottom",
          "left",
          "top",
          "right",
          "bottom",
        ]
      }
      hideOnClick={true}
      interactive={true}
      interactiveBorder={0}
      isVisible={null}
      lazy={true}
      maxWidth="calc(2rem + 18.75rem)"
      onCreate={[Function]}
      onHidden={[Function]}
      onHide={[Function]}
      onMount={[Function]}
      onShow={[Function]}
      onShown={[Function]}
      placement="right"
      popperOptions={
        Object {
          "modifiers": Object {
            "hide": Object {
              "enabled": true,
            },
            "preventOverflow": Object {
              "enabled": true,
            },
          },
        }
      }
      theme="pf-popover"
      trigger="click"
      zIndex={9999}
    >
      <Stack
        style={
          Object {
            "cursor": "pointer",
            "display": "inline-block",
          }
        }
      >
        <div
          className="pf-l-stack"
          style={
            Object {
              "cursor": "pointer",
              "display": "inline-block",
            }
          }
        >
          <StackItem>
            <div
              className="pf-l-stack__item"
            >
              <Label>
                <span
                  className="vuln-label"
                >
                  testTitle
                </span>
              </Label>
            </div>
          </StackItem>
          <StackItem>
            <div
              className="pf-l-stack__item"
            >
              testDescription
            </div>
          </StackItem>
        </div>
      </Stack>
      <Portal
        containerInfo={<div />}
      />
    </PopoverBase>
  </Popover>
</SnippetWithHeaderAndPopover>
`;

exports[`SnippetWithHeaderAndTooltip Should render without params 1`] = `
<SnippetWithHeaderAndPopover>
  <Popover
    appendTo={[Function]}
    aria-label="Business risk popover"
    boundary="window"
    className=""
    closeBtnAriaLabel="Close"
    distance={25}
    enableFlip={true}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    footerContent={null}
    headerContent=""
    hideOnOutsideClick={true}
    isVisible={null}
    maxWidth="calc(2rem + 18.75rem)"
    onHidden={[Function]}
    onHide={[Function]}
    onMount={[Function]}
    onShow={[Function]}
    onShown={[Function]}
    position="right"
    shouldClose={[Function]}
    tippyProps={Object {}}
    zIndex={9999}
  >
    <PopoverBase
      appendTo={[Function]}
      arrow={true}
      boundary="window"
      content={<React.Fragment />}
      distance={25}
      flip={true}
      flipBehavior={
        Array [
          "top",
          "right",
          "bottom",
          "left",
          "top",
          "right",
          "bottom",
        ]
      }
      hideOnClick={true}
      interactive={true}
      interactiveBorder={0}
      isVisible={null}
      lazy={true}
      maxWidth="calc(2rem + 18.75rem)"
      onCreate={[Function]}
      onHidden={[Function]}
      onHide={[Function]}
      onMount={[Function]}
      onShow={[Function]}
      onShown={[Function]}
      placement="right"
      popperOptions={
        Object {
          "modifiers": Object {
            "hide": Object {
              "enabled": true,
            },
            "preventOverflow": Object {
              "enabled": true,
            },
          },
        }
      }
      theme="pf-popover"
      trigger="click"
      zIndex={9999}
    >
      <Stack
        style={
          Object {
            "cursor": "pointer",
            "display": "inline-block",
          }
        }
      >
        <div
          className="pf-l-stack"
          style={
            Object {
              "cursor": "pointer",
              "display": "inline-block",
            }
          }
        >
          <StackItem>
            <div
              className="pf-l-stack__item"
            >
              <Label>
                <span
                  className="vuln-label"
                />
              </Label>
            </div>
          </StackItem>
          <StackItem>
            <div
              className="pf-l-stack__item"
            />
          </StackItem>
        </div>
      </Stack>
      <Portal
        containerInfo={<div />}
      />
    </PopoverBase>
  </Popover>
</SnippetWithHeaderAndPopover>
`;
