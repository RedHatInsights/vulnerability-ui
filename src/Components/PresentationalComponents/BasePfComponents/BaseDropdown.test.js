import BaseDropdown from './BaseDropdown';
import { DropdownItem } from '@patternfly/react-core';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';

const mockStore = configureStore([store => next => action => {}]);
let store = mockStore({ });

const item1_action = jest.fn();

describe('BaseDropdown component', () => {
    it('Should match snapshot', () => {
        const items = [
            <DropdownItem key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <BaseDropdown dropdownItems={items} />
                </Router>
            </Provider>);
            
        expect(toJson(wrapper)).toMatchSnapshot();
    })

    it('Should be disabled when disabled prop is passed', () => {
        const items = [
            <DropdownItem key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <BaseDropdown dropdownItems={items} disabled/>
                </Router>
            </Provider>);

        expect(wrapper.find('button').first().prop('disabled')).toEqual(true); // dropdown toggle is disabled
    })

    it('Should call the onClick handler when clicked', () => {
        const items = [
            <DropdownItem key="item1" component="button" onClick={() => item1_action()}>
                Item 1
            </DropdownItem>
        ]

        const wrapper = mountWithIntl(
            <Provider store={store}>
                <Router>
                    <BaseDropdown dropdownItems={items} />
                </Router>
            </Provider>);

        wrapper.find("button").first().simulate("click"); // open dropdown
        wrapper.find("DropdownItem button").first().simulate("click"); // click first item

        expect(item1_action).toHaveBeenCalled();
    })
});
