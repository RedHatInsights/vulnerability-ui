import knownExploitFilter from './KnownExploitFilter'

const OPTION_NO_EXPLOIT = "false";
const OPTION_HAS_EXPLOIT = "true";

describe('Known Exploit Filter', () => {
    const applyMock = jest.fn();

    it('Should use default currentValue (undefined) if none provided', () => {
        let filterComponent = knownExploitFilter(applyMock)

        expect(filterComponent.filterValues.value).toEqual(undefined)
    });

    it('Should use provided currentValue initially', () => {
        let currentFilter = { known_exploit: 'false' }
        let filterComponent = knownExploitFilter(applyMock, currentFilter)

        expect(filterComponent.filterValues.value).toStrictEqual([OPTION_NO_EXPLOIT])
    });

    it('Should call apply with correct params', () => {
        let filterComponent = knownExploitFilter(applyMock)

        filterComponent.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ known_exploit: undefined, page: 1  })

        filterComponent.filterValues.onChange('event', [OPTION_NO_EXPLOIT])
        expect(applyMock).toBeCalledWith({ known_exploit: 'false', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_HAS_EXPLOIT])
        expect(applyMock).toBeCalledWith({ known_exploit: 'true', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_NO_EXPLOIT, OPTION_HAS_EXPLOIT])
        expect(applyMock).toBeCalledWith({ known_exploit: 'false,true', page: 1 })
    })
})
