/* eslint-disable camelcase */
import React from 'react';
import { filterCategories } from './constants';
import { Button } from '@patternfly/react-core';

export const handleChangePage = (_event, page, apply) => apply({ page });

export const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });

export const handleFilter = methods => filterCategories.map(filter => {
    let filterValues = Object.assign({}, filter.filterValues);
    filterValues.onChange = (event, values) =>methods.apply({ [filter.urlParam]: values });
    filter.filterValues = filterValues;
    return filter;
});

export const exportConfig = (methods) => (
    {
        label: 'Export as JSON'
    },
    {
        label: 'Export as CSV'
    },
    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }
);

export const kebabActions = (context,  isDisabled, handleCveDescription, kebabType) => {

    const { selectedCves, expandCveDescription } = context.params;
    const color = { color: (isDisabled ? '' : 'black') };
    let specificActions = [];

    if (kebabType === 'vulnerabilities') {
        specificActions = [
            <Button variant="link" isInline  key='key1' isDisabled={isDisabled} style={color}
                onClick={
                    () => context.methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' })))
                }
            >
            Edit business risk
            </Button>,
            <Button variant="link" isInline key='hey2' isDisabled={isDisabled}  style={color}
                onClick={
                    () => context.methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' })), [])
                }
            >
            Edit status
            </Button>
        ];
    }
    else if (kebabType === 'systems') {
        specificActions = [
            <Button variant="link" isInline key='hey2' isDisabled={isDisabled}  style={color}
                onClick={
                    () => context.methods.showStatusModal([...selectedCves].map(item => ({
                        id: item,
                        ...context.cves.data.filter(cve => item === cve.id)
                        .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]
                    })), [])
                }
            >
            Edit status
            </Button>
        ];
    }

    return ['',
        ...specificActions,
        {
            label: expandCveDescription ? 'Collapse all CVEs' : 'Expand all CVEs',
            onClick: () => handleCveDescription()
        }
    ];
};
