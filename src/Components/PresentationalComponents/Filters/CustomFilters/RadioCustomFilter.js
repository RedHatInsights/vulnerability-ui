import React, { useState } from 'react';
import propTypes from 'prop-types';
import { Select, SelectOption, Radio } from '@patternfly/react-core';

const RadioCustomFilter = ({ filterData, setFilterData, selectProps, options, filterId, filterName }) => {
    const [isOpen, setOpen] = useState(false);

    const handleOnRadioChange = (filterId, optionName) => {
        const optionValue = options.find(item => item.label === optionName).value;
        setFilterData({ ...filterData, [filterId]: optionValue });
    };

    return (
        <Select
            variant="single"
            aria-label="Select Input"
            onToggle={() => setOpen(!isOpen)}
            isOpen={isOpen}
            placeholderText={`${filterName}: ${options.find(item => item.value === filterData[filterId])?.label}`}
            key={filterId}
            onSelect={(event, optionName) => { handleOnRadioChange(filterId, optionName); }}
            width="auto"
            {... selectProps}
        >
            {options.map(item =>
                <SelectOption
                    width="100%"
                    key={filterId + item.label}
                    value={item.label}
                >
                    <Radio
                        aria-label="Select Input"
                        label={item.label}
                        value={item.label}
                        isChecked={filterData[filterId] === item.value}
                    />
                </SelectOption>
            )}
        </Select>
    );
};

RadioCustomFilter.propTypes = {
    filterName: propTypes.string,
    filterId: propTypes.string,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    selectProps: propTypes.object,
    options: propTypes.array
};

export default RadioCustomFilter;
