import * as ActionTypes from '../ActionTypes';
import { initialState as storeInitialState, SystemsPageStore } from './SystemsPageStore';

let action;
describe('SystemsPageStore:', () => {
    const error = { errorCode: null, hasError: false, message: null }
    const initialState = {
        isLoading: true,
        payload: {},
        metadata: {
            page: 1,
            limit: 20,
            offet: 0,
            total_items: 0
        },
        params: {
            excluded: 'true,false',
            page: 1,
            page_size: 20,
            sort: '-updated'
        },
        timestamp: '2021-04-08T11:24:36.450Z',
        error
    };
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {},
            meta: '2021-04-08T11:24:36.450Z'
        };
    });

    it('Should return initial state', () => {
        expect(SystemsPageStore(initialState, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(SystemsPageStore(initialState, action)).toEqual(initialState);
    });

    it('Should start loading systems list', () => {
        action.type = ActionTypes.FETCH_SYSTEMS + '_PENDING';
        let timestamp = '2021-04-08T11:24:36.350Z';
        action.meta = timestamp;
        expect(SystemsPageStore(initialState, action).isLoading).toEqual(true);
    });

    it('Should change systems params', () => {
        let params = { filter: 'cve-search', excluded: 'false,true', page: 10, page_size: 100, sort: '-updated' };
        action.type = ActionTypes.CHANGE_SYSTEMS_PARAMS;
        action.payload = params;
        expect(SystemsPageStore(initialState, action)).toEqual({
            isLoading: true,
            metadata: initialState.metadata,
            params,
            payload: {},
            error,
            timestamp: '2021-04-08T11:24:36.450Z'
        });
    });

    it('Should pass default page_size param', () => {
        let params = { filter: 'cve-search', excluded: 'true,false', page: 10, sort: '-updated' };
        action.type = ActionTypes.CHANGE_SYSTEMS_PARAMS;
        action.payload = params;
        expect(SystemsPageStore(initialState, action)).toEqual({
            isLoading: true,
            metadata: initialState.metadata,
            params: { ...params, page_size: 20 },
            payload: {},
            error,
            timestamp: '2021-04-08T11:24:36.450Z'
        });
    });

    it('Should clear system store', () => {
        let params = { filter: 'cve-search', excluded: 'false', page: 10, sort: '-updated' };
        action.type = ActionTypes.CLEAR_SYSTEMS_STORE;
        action.payload = params;
        expect(SystemsPageStore(initialState, action)).toEqual({
            isLoading: true,
            payload: {},
            metadata: {
                page: 1,
                limit: 20,
                offet: 0,
                total_items: 0
            },
            params: {
                filter: undefined,
                excluded: 'false',
                page: 1,
                page_size: 20,
                sort: '-updated'
            },
            error,
            timestamp: storeInitialState.timestamp
        });
    });
});
