import { Checkbox, Form, FormGroup, Stack, StackItem } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';

export const CvePairStatusModal = ({ cves, updateRef, inventoryIds }) => {
    const [cveList] = useState(cves);
    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());
    const { JustificationInput, justification, setProps: setJustificationProps } = useJustificationInput(getDefaultLabel());
    const [checkboxState, setCheckboxState] = useState(false);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        const setStatusParams = !checkboxState
            ? {
                status_id: parseInt(statusId),
                cve: cveIds,
                status_text: justification,
                inventory_id: inventoryIds
            }
            : { cve: cveIds, inventory_id: inventoryIds };
        return setSystemCveStatus(setStatusParams).then(updateRef);
    };

    function getDefaultStatus() {
        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';
    }

    function getDefaultLabel() {
        return (cveList && cveList.length === 1 && cveList[0].justification) || '';
    }

    function handleCheckboxChange(checked) {
        const props = { isDisabled: checked };
        setCheckboxState(checked);
        setSelectProps(props);
        setJustificationProps(props);
    }

    const successNotification = {
        variant: 'success',
        title: `Status updated for ${cveList.length} CVEs`
    };

    return (
        <BaseModal
            items={cveList}
            onSave={handleSave}
            onSuccessNotification={successNotification}
            title="Set status for this CVE and host pair"
        >
            <Stack gutter={'md'}>
                <StackItem>
                    <Form key="key">
                        <FormGroup fieldId={'overall'}>
                            <Checkbox
                                label="Use overall CVE status"
                                id="alt-form-checkbox-1"
                                name="alt-form-checkbox-1"
                                isChecked={checkboxState}
                                onChange={handleCheckboxChange}
                            />
                        </FormGroup>
                        {StatusSelect}
                        {JustificationInput}
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CvePairStatusModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func,
    inventoryIds: propTypes.array
};

export default CvePairStatusModal;
