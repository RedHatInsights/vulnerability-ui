import { Popover, TextContent } from '@patternfly/react-core';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';
import propTypes from 'prop-types';
import React from 'react';
import { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';
import WithLoader, { LoaderType } from '../WithLoader/WithLoader';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { V3names, V2names } from './vectorNames';
import Label from '../Snippets/Label';

export const parseVector = (vector, namesMapping) => {
    let res = {};
    vector &&
        vector.split('/').forEach(curr => {
            let [key, val] = curr.split(':');
            const name = namesMapping[key] && namesMapping[key].name;
            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';
            if (name) {
                res[name] = value;
            }
        });
    return res;
};

const CvssVector = props => {
    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;
    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';
    const cvssVector = CVSS3Vector || CVSS2Vector;
    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);
    const parsedVector = parseVector(cvssVector, namesMapping);
    const notAvailable = 'N/A';
    delete parsedVector.cvssVersion;

    return (
        <CVEPageContext.Consumer>
            {context => (
                <TextContent>
                    <Popover
                        id="popover-cvss"
                        position="bottom"
                        maxWidth={'100%'}
                        enableFlip
                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}
                        bodyContent={
                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>
                                {cvssVector ?
                                    (<Table
                                        aria-label={'Metric breakdown'}
                                        variant={TableVariant.compact}
                                        gridBreakPoint=""
                                        cells={
                                            [intl.formatMessage(messages.cvssVectorMetric),
                                                intl.formatMessage(messages.cvssVectorValue)]
                                        }
                                        rows={Object.entries(parsedVector)}
                                    >
                                        <TableHeader />
                                        <TableBody />
                                    </Table>
                                    ) : (notAvailable)}
                            </WithLoader>
                        }
                    >
                        <Label isLarge className="pf-u-mb-xs pointer">
                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}
                            <OutlinedQuestionCircleIcon
                                color={'var(--pf-global--secondary-color--100)'}
                                className="pf-u-ml-xs"
                            />
                        </Label>
                    </Popover>

                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>
                        <span className="pf-u-mr-md">{props.score}</span>
                        <span id="cvss-vector-content">
                            {intl.formatMessage(messages.vector) + ': '}
                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}
                        </span>
                    </WithLoader>
                </TextContent>
            )}
        </CVEPageContext.Consumer>
    );
};

CvssVector.propTypes = {
    cvss2_metrics: propTypes.string,
    cvss3_metrics: propTypes.string,
    score: propTypes.any,
    intl: propTypes.any
};

export default injectIntl(CvssVector);
