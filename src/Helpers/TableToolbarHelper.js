import messages from '../Messages';
import { FILTERS } from './constants';
import { intl } from '../Utilities/IntlProvider';

export const handleChangePage = (_event, page, apply) => apply({ page });

export const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });

export const exportConfig = (methods) => (
    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }
);

export const buildActiveFilters = (currentFilters, filterRuleValues = []) => {
    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;

    const buildChip = (key, parameter) => (
        FILTERS[key].items.reduce((object, item) => {
            if (parameter === item.value) {
                object.name = item.label;
                object.value = item.value;
            }
            else if (key === 'security_rule')
            {
                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);

                ['true', 'false'].includes(parameter)
                    ? object.name = FILTERS.security_rule.items.find(e => e.value === parameter).label
                    : object.name = filteredRule && filteredRule.label || parameter;

                object.value = parameter;
            }

            return object;
        }, {})
    );

    const buildChips = (paramValues, key) => {
        return paramValues.reduce((values, parameter) => {
            values.push(buildChip(key, parameter));
            return values;
        }, []);
    };

    const filterChips = Object.keys(FILTERS).reduce((array, key) => {
        if (key === 'security_rule'
            && (!['', undefined].includes(currentFilters.rule_presence) || !['', undefined].includes(currentFilters.rule_key))) {
            const multiValue = [].concat(
                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],
                currentFilters.rule_key ? currentFilters.rule_key.split(',') : []);
            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });
        }
        else if (key === 'affecting'  && Object.keys(currentFilters).includes('affecting')
            && !['', undefined].includes(currentFilters.affecting)) {
            const multiValue = [].concat(currentFilters.affecting?.split(',').flatMap(
                (value, index) => value?.toLowerCase() === 'true' ? index.toString() : []));
            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });
        }
        else if (key === 'excluded'  && Object.keys(currentFilters).includes('excluded')
        && !['', undefined].includes(currentFilters.excluded)) {
            const multiValue = [].concat(currentFilters.excluded?.split(',').flatMap(
                (value, index) => value?.toLowerCase() === 'true' ? index.toString() : []));
            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });
        }
        else if (key === 'cvss_filter' && (Object.keys(currentFilters).includes('cvss_from')
            || Object.keys(currentFilters).includes('cvss_to'))) {
            const cvssFrom = (+currentFilters.cvss_from).toFixed(1) ?? '0.0';
            const cvssTo = (+currentFilters.cvss_to).toFixed(1) ?? '10.0';
            array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });
        }
        else if (Object.keys(currentFilters).includes(key)
            && !['', undefined].includes(currentFilters[key])) {
            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');
            const filteredValues = (multiValue && multiValue.length > 1)
                && buildChips(multiValue, key)
                || [buildChip(key, currentFilters[key])];

            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });
        }

        return array;
    }, []);

    nameFilter && filterChips.push(
        { key: 'filter',
            category: intl.formatMessage(messages.searchLabel),
            chips: [{ name: nameFilter }]
        }
    );

    advisoryFilter && filterChips.push(
        { key: 'advisory',
            category: intl.formatMessage(messages.advisory),
            chips: [{ name: advisoryFilter }]
        }
    );

    return filterChips;
};

const MULTI_FILTERS = ['affecting', 'excluded'];

export const removeFilters = (chips, apply) => {
    const emptyFilter = chips.reduce((obj, item) => {
        if (item.key === 'security_rule') {
            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));
            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';
            obj.rule_key = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';
        }
        else if (MULTI_FILTERS.includes(item.key)) {
            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));
            const defaultValues = [false, false];
            remainingValues.forEach(item => { defaultValues[item] = true; });
            const value = defaultValues.join(',');
            obj[item.key] = value === 'false,false' ? '' : defaultValues.join(',');
        }
        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {
            obj[item.key] = '';
        }
        else if (item.key === 'cvss_filter') {
            obj.cvss_filter = '';
            obj.cvss_from = '';
            obj.cvss_to = '';
        }
        else {
            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');
        }

        return obj;
    }, {});
    apply({ ...emptyFilter, page: 1 });
};
