import React from 'react';
import some from 'lodash/some';
import PropTypes from 'prop-types';
import { Redirect, Route, Switch, useLocation } from 'react-router-dom';
import asyncComponent from './asyncComponent';
import { PATHS } from '../Helpers/constants';

const CVEPage = asyncComponent(() => import(/* webpackChunkName: "CVEPage" */ '../Components/SmartComponents/CVEPage/CVEPage'));
const Systems = asyncComponent(() => import(/* webpackChunkName: "Systems" */ '../Components/SmartComponents/Systems/Systems'));

const VulnerabilitiesCVEs = asyncComponent(() =>
    import(/* webpackChunkName: "VulnerabilitiesCVEs" */ '../Components/SmartComponents/CVEs/CVEs'));
const InventoryDetail = asyncComponent(() =>
    import(/* webpackChunkName: "InventoryDetail" */ '../Components/SmartComponents/InventoryDetail/InventoryDetail')
);
const Upgrade = asyncComponent(() =>
    import(/* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage')
);

const InsightsRoute = ({ component: Component, rootClass = 'vulnerability', ...rest }) => {
    const root = document.getElementById('root');
    root.removeAttribute('class');

    root.classList.add(`page__${rootClass}`, 'pf-l-page__main');
    root.classList.add(`page__${rootClass}`, 'pf-c-page__main');
    root.setAttribute('role', 'main');

    return <Route {...rest} component={Component} />;
};

InsightsRoute.propTypes = {
    component: PropTypes.func,
    rootClass: PropTypes.string
};

export const Routes = () => {
    let location = useLocation();
    let path = location.pathname;
    return (
        <Switch>
            <Redirect from={PATHS.cvepagePath.to} to={PATHS.inventoryDetail.to} />
            <InsightsRoute exact path={PATHS.cvePage.to} component={CVEPage} />
            <InsightsRoute exact path={PATHS.inventoryDetail.to}  component={InventoryDetail} />
            <InsightsRoute exact path={PATHS.vulnerabilitiesCves.to} component={VulnerabilitiesCVEs} />
            <InsightsRoute exact path={PATHS.systems.to} component={Systems} />
            <InsightsRoute exact path={PATHS.upgrade.to} component={Upgrade} />
            <Route
                render={() => (some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.vulnerabilitiesCves.to} />)}
            />
        </Switch>
    );
};

