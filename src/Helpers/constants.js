/* eslint-disable no-console */
import React, { Fragment } from 'react';
import moment from 'moment';
import BellIcon from '@patternfly/react-icons/dist/js/icons/bell-icon';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';
import ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';

import messages from '../Messages';
import { intl } from '../Utilities/IntlProvider';

export const DEFAULT_PAGE_SIZE = 20;
export const RH_KB_URL = 'https://access.redhat.com/node';
export const CVES_PATH = `${document.baseURI}insights/vulnerability/cves`;

export const impactTextList = {
    critical: intl.formatMessage(messages.impactTextListCritical),
    important: intl.formatMessage(messages.impactTextListImportant),
    moderate: intl.formatMessage(messages.impactTextListModerate),
    low: intl.formatMessage(messages.impactTextListLow)
};

export const impactColorList = {
    unknown: 'severity-unknown',
    default: 'severity-low',
    danger: 'severity-critical',
    warning: 'severity-moderate',
    orange: 'severity-color-important'
};

export const impactList = {
    Critical: {
        title: intl.formatMessage(messages.impactListCritical),
        color: impactColorList.danger,
        text: impactTextList.critical
    },
    High: {
        title: intl.formatMessage(messages.impactListHigh),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Important: {
        title: intl.formatMessage(messages.impactListImportant),
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Medium: {
        title: intl.formatMessage(messages.impactListMedium),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Moderate: {
        title: intl.formatMessage(messages.impactListModerate),
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Low: {
        title: intl.formatMessage(messages.impactListLow),
        color: impactColorList.default,
        text: impactTextList.low
    }
};

// Read-only mode notification text
export const ReadOnlyNotification = {
    title: intl.formatMessage(messages.readOnlyNotificationTitle),
    detail: intl.formatMessage(messages.readOnlyNotificationBody)
};

export const securityRulesOptions = [
    { value: '', label: intl.formatMessage(messages.optionsAll) },
    { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
    { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
];

export const filtersSecurityRules = {
    type: 'radio',
    title: intl.formatMessage(messages.securityRules),
    urlParam: 'security_rule',
    values: [
        { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
        { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
    ]
};

export const filtersCVESecurityRule = {
    type: 'radio',
    title: intl.formatMessage(messages.securityRules),
    urlParam: 'security_rule',
    values: [
        { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
        { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
    ]
};

export const FILTERS = {
    cvss_filter: {
        title: intl.formatMessage(messages.cvssBaseScore),
        items: [
            { value: 'all', label: intl.formatMessage(messages.optionsAll) },
            { value: 'less4', label: '0.0 - 3.9', from: 0, to: 3.999 },
            { value: 'from4to8', label: '4.0 - 7.9', from: 4, to: 7.999 },
            { value: 'from8to10', label: '8.0 - 10.0', from: 8, to: 10 }
        ]
    },
    publish_date: {
        title: intl.formatMessage(messages.publishDate),
        items: [
            { value: 'all', label: intl.formatMessage(messages.optionsAll) },
            { value: 'last7', label: intl.formatMessage(messages.lastxdays, { days: 7 }), from: moment().subtract(7, 'days') },
            { value: 'last30', label: intl.formatMessage(messages.lastxdays, { days: 30 }), from: moment().subtract(30, 'days') },
            { value: 'last90', label: intl.formatMessage(messages.lastxdays, { days: 90 }), from: moment().subtract(90, 'days') },
            { value: 'lastYear', label: intl.formatMessage(messages.lastYear), from: moment().subtract(1, 'years') },
            { value: 'MoreThanYear', label: intl.formatMessage(messages.moreThanYear), to: moment().subtract(1, 'years') }
        ]
    },
    show_all: {
        title: intl.formatMessage(messages.filterAffectingCVEs),
        items: [
            { value: 'true',  label: intl.formatMessage(messages.hideCvesNoEffecting) },
            { value: '1', label: intl.formatMessage(messages.showCvesAffecting) }
        ]
    },
    impact: {
        title: intl.formatMessage(messages.impact),
        items: [
            { label: intl.formatMessage(messages.impactListCritical), value: '7' },
            { label: intl.formatMessage(messages.impactListImportant), value: '5' },
            { label: intl.formatMessage(messages.impactListModerate), value: '4' },
            { label: intl.formatMessage(messages.impactListLow), value: '2' },
            { label: intl.formatMessage(messages.impactListUnknown), value: '1' }
        ]
    },
    status_id: {
        title: intl.formatMessage(messages.status),
        items: [
            { label: intl.formatMessage(messages.notReviewed), value: '0' },
            { label: intl.formatMessage(messages.inReview), value: '1' },
            { label: intl.formatMessage(messages.onHold), value: '2' },
            { label: intl.formatMessage(messages.scheduledPatch), value: '3' },
            { label: intl.formatMessage(messages.resolved), value: '4' },
            { label: intl.formatMessage(messages.noAction), value: '5' },
            { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }
        ]
    },
    business_risk_id: {
        title: intl.formatMessage(messages.businessRisk),
        items: [
            { value: '3', label: intl.formatMessage(messages.high) },
            { value: '2', label: intl.formatMessage(messages.medium) },
            { value: '1', label: intl.formatMessage(messages.low) },
            { value: '0', label: intl.formatMessage(messages.notDefined) }
        ]
    },
    security_rule: {
        title: intl.formatMessage(messages.securityRules),
        items: [
            { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
            { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
        ]
    }
};

//CVSS Base score label to value
export const CVSSOptions = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'less4', label: '0.0 - 3.9', from: 0, to: 3.999 },
    { value: 'from4to8', label: '4.0 - 7.9', from: 4, to: 7.999 },
    { value: 'from8to10', label: '8.0 - 10.0', from: 8, to: 10 }
];

//Public date labels to value
export const PublicDateOptions = [
    { value: 'all', label: intl.formatMessage(messages.optionsAll) },
    { value: 'last7', label: intl.formatMessage(messages.lastxdays, { days: 7 }), from: moment().subtract(7, 'days') },
    { value: 'last30', label: intl.formatMessage(messages.lastxdays, { days: 30 }), from: moment().subtract(30, 'days') },
    { value: 'last90', label: intl.formatMessage(messages.lastxdays, { days: 90 }), from: moment().subtract(90, 'days') },
    { value: 'lastYear', label: intl.formatMessage(messages.lastYear), from: moment().subtract(1, 'years') },
    { value: 'MoreThanYear', label: intl.formatMessage(messages.moreThanYear), to: moment().subtract(1, 'years') }
];

export const AFFECTING_SYSTEMS_OPTIONS = [
    { value: 'true',  label: intl.formatMessage(messages.hideCvesNoEffecting) },
    { value: '1', label: intl.formatMessage(messages.showCvesAffecting) }
];

export const IMPACT_OPTIONS = [
    { label: intl.formatMessage(messages.impactListCritical),
        value: '7', hasIcon: true, iconColor: 'var(--pf-global--danger-color--100)' },
    { label: intl.formatMessage(messages.impactListImportant),
        value: '5', hasIcon: true, iconColor: 'var(--pf-global--palette--orange-300)' },
    { label: intl.formatMessage(messages.impactListModerate),
        value: '4', hasIcon: true, iconColor: 'var(--pf-global--warning-color--100)' },
    { label: intl.formatMessage(messages.impactListLow),
        value: '2', hasIcon: true, iconColor: 'var(--pf-global--Color--200)' },
    { label: intl.formatMessage(messages.impactListUnknown),
        value: '1', hasIcon: false }
];

export const STATUS_OPTIONS = [
    { label: intl.formatMessage(messages.notReviewed), value: '0' },
    { label: intl.formatMessage(messages.inReview), value: '1' },
    { label: intl.formatMessage(messages.onHold), value: '2' },
    { label: intl.formatMessage(messages.scheduledPatch), value: '3' },
    { label: intl.formatMessage(messages.resolved), value: '4' },
    { label: intl.formatMessage(messages.noAction), value: '5' },
    { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }
];

export const businessRiskOptions = [
    {
        value: '3',
        label: intl.formatMessage(messages.high)
    },

    {
        value: '2',
        label: intl.formatMessage(messages.medium)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.low)
    },
    {
        value: '0',
        label: intl.formatMessage(messages.notDefined)
    }
];

// Filter categories
export const filtersShowAll = {
    type: 'checkbox',
    title: '',
    urlParam: 'show_all',
    isChecked: true,
    values: [{ label: intl.formatMessage(messages.hideCvesNoEffecting), value: 'true' }]
};

export const filterCveSearchTerm = {
    type: 'input',
    title: intl.formatMessage(messages.searchLabel),
    urlParam: 'filter',
    values: []
};

export const filterSystemName = {
    type: 'input',
    title: intl.formatMessage(messages.systemsColumnHeaderName),
    urlParam: 'filter',
    values: []
};

export const filtersSeverity = {
    type: 'checkbox',
    title: 'Impact',
    urlParam: 'impact',
    values: [
        { label: intl.formatMessage(messages.impactListCritical), value: '7' },
        { label: intl.formatMessage(messages.impactListImportant), value: '5' },
        { label: intl.formatMessage(messages.impactListModerate), value: '4' },
        { label: intl.formatMessage(messages.impactListLow), value: '2' },
        { label: intl.formatMessage(messages.impactListUnknown), value: '1' }
    ]
};

export const filtersCVSSScore = {
    type: 'radio',
    title: intl.formatMessage(messages.cvssBaseScore),
    urlParam: 'cvss_filter',
    values: CVSSOptions.map(item => ({ label: item.label, value: item.value }))
};

export const filtersPublishDate = {
    type: 'radio',
    title: intl.formatMessage(messages.publishDate),
    urlParam: 'publish_date',
    values: PublicDateOptions.map(item => ({ label: item.label, value: item.value }))
};

export const filtersStatus = {
    type: 'checkbox',
    title: intl.formatMessage(messages.status),
    urlParam: 'status_id',
    values: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))
};

export const filtersBusinessRisk = {
    type: 'checkbox',
    title: intl.formatMessage(messages.businessRisk),
    urlParam: 'business_risk_id',
    values: businessRiskOptions.map(item => ({ label: item.label, value: item.value }))
};

export const CVSSHeader =  [
    intl.formatMessage(messages.cvssScoreRange),
    intl.formatMessage(messages.numberOfCves)
];

export const recentCvesHeader =  [
    intl.formatMessage(messages.timeFrame),
    intl.formatMessage(messages.numberOfCves)
];

export const CVSSMapping = {
    '8to10': '8.0 - 10.0',
    '4to7.9': '4.0 - 7.9',
    '0to3.9': '0.0 - 3.9'
};

export const recentCvesMapping = {
    last7days: intl.formatMessage(messages.lastxdays, { days: 7 }),
    last30days: intl.formatMessage(messages.lastxdays, { days: 30 }),
    last90days: intl.formatMessage(messages.lastxdays, { days: 90 })
};

export const RISK_OF_CHANGE_TOOLTIP = {
    1: intl.formatMessage(messages.riskOfChangeTooltipVeryLow),
    2: intl.formatMessage(messages.riskOfChangeTooltipLow),
    3: intl.formatMessage(messages.riskOfChangeTooltipModerate),
    4: intl.formatMessage(messages.riskOfChangeTooltipHigh)
};

export const RISK_OF_CHANGE_LABEL = {
    1: (
        <Fragment>
            <BellIcon color={'var(--pf-global--info-color--200)'} />
            {intl.formatMessage(messages.impactListVeryLow)}
        </Fragment>
    ),
    2: (
        <Fragment>
            <ExclamationTriangleIcon color={'var(--pf-global--info-color--100)'} />
            {intl.formatMessage(messages.impactListLow)}
        </Fragment>
    ),
    3: (
        <Fragment>
            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />
            {intl.formatMessage(messages.impactListModerate)}
        </Fragment>
    ),
    4: (
        <Fragment>
            <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} />
            {intl.formatMessage(messages.impactListHigh)}
        </Fragment>
    )
};
