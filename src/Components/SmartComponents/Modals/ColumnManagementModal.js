import React, { useState } from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    TextContent,
    Text,
    TextVariants,
    DataListItem,
    DataList,
    DataListItemRow,
    DataListCheck,
    DataListCell,
    DataListItemCells
} from '@patternfly/react-core';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';

const ColumnManagementModal = ({ appliedColumns, applyColumns, isModalOpen, setModalOpen }) => {
    const [currentColumns, setCurrentColumns] = useState(appliedColumns);

    const handleChange = index => {
        let newColumns = [...currentColumns];
        let changedColumn = { ...newColumns[index] };

        changedColumn.isShown = !changedColumn.isShown;
        newColumns[index] = changedColumn;

        setCurrentColumns(newColumns);
    };

    const selectAll = () => {
        let newColumns = [...currentColumns];
        newColumns = newColumns.map(column => ({ ...column, isShown: true }));

        setCurrentColumns(newColumns);
    };

    const handleSave = () => {
        setModalOpen(false);
        applyColumns(currentColumns);
    };

    const handleCancel = () => {
        setModalOpen(false);
        setCurrentColumns(appliedColumns);
    };

    return (
        <Modal
            title={intl.formatMessage(messages.columnManagementModalTitle)}
            onClose={() => setModalOpen(false)}
            isOpen={isModalOpen}
            variant="small"
            description={
                <TextContent>
                    <Text component={TextVariants.p}>{intl.formatMessage(messages.columnManagementModalDescription)}</Text>
                    <Button isInline onClick={selectAll} variant="link">
                        {intl.formatMessage(messages.columnManagementModalSelectAll)}
                    </Button>
                </TextContent>
            }
            actions={[
                <Button key="save" variant="primary" onClick={handleSave}>
                    {intl.formatMessage(messages.save)}
                </Button>,
                <Button key="cancel" variant="secondary" onClick={handleCancel}>
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <DataList aria-label="Table column management" id="table-column-management" isCompact>
                {currentColumns.map((column, index) =>
                    <DataListItem key={column.key}>
                        <DataListItemRow>
                            <DataListCheck
                                checked={column.isShown}
                                id={'checkbox-' + index}
                                onChange={() => handleChange(index)}
                                isDisabled={column.isUnhidable}
                            />
                            <DataListItemCells
                                dataListCells={[
                                    <DataListCell key={'table-column-management-item' + index}>
                                        <label htmlFor={'checkbox-' + index}>
                                            {column.title}
                                        </label>
                                    </DataListCell>
                                ]}
                            />
                        </DataListItemRow>
                    </DataListItem>
                )}
            </DataList>
        </Modal>
    );
};

ColumnManagementModal.propTypes = {
    appliedColumns: propTypes.arrayOf(propTypes.object),
    applyColumns: propTypes.func,
    isModalOpen: propTypes.bool,
    setModalOpen: propTypes.func
};

export default ColumnManagementModal;
