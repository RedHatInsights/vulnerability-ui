import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';
import { ServerAltIcon } from '@patternfly/react-icons';
import { StyledText, StyledConstants } from '@patternfly/react-styled-system';
import propTypes from 'prop-types';
import React from 'react';
import { STATUS_OPTIONS } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

const SnippetWithPopover = props => {
    const { type, row } = props;
    const {
        business_risk_text: businessRiskJustification,
        cve_status_id: cveStatusId,
        status_text: statusJustification,
        status_id: systemStatusId
    } = row.attributes;
    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;

    const BusinessRiskPopoverContent = (
        <StackItem>
            <StyledText
                fontWeight={StyledConstants.fontWeights.bold}
                fontSize={StyledConstants.fontSizes.sm}
                lineHeight={StyledConstants.lineHeights.sm}
            >
                <FormattedMessage {...messages.justificationNote} />
            </StyledText>
            {businessRiskJustification || '--'}
        </StackItem>
    );

    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());

    const StatusPopoverContent = (
        <StackItem>
            <StyledText
                fontWeight={StyledConstants.fontWeights.bold}
                fontSize={StyledConstants.fontSizes.sm}
                lineHeight={StyledConstants.lineHeights.sm}
            >
                <FormattedMessage {...messages.cveSystemPairStatus} />
            </StyledText>

            {systemStatusOption ? systemStatusOption.label : '--'}

            <StyledText
                fontWeight={StyledConstants.fontWeights.bold}
                fontSize={StyledConstants.fontSizes.sm}
                lineHeight={StyledConstants.lineHeights.sm}
                style={{ marginTop: 'var(--pf-global--spacer--sm)' }}
            >
                <FormattedMessage {...messages.justificationNote} />
            </StyledText>
            {statusJustification || '--'}
        </StackItem>
    );

    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());

    const popoverContent = (
        <Stack>
            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}
            <StackItem>
                <TextContent>
                    <hr className={'splitter pf-u-mb-md pf-u-mt-md'} />
                </TextContent>
                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                    style={{ marginTop: 'var(--pf-global--spacer--sm)' }}
                >
                    <FormattedMessage {...messages.cveStatus} />
                </StyledText>
            </StackItem>
            <StackItem>
                {statusOption ? statusOption.label : '--'}
            </StackItem>
        </Stack>
    );

    const buttonStyle = {
        wordBreak: 'normal',
        color: hasDefaultStatus ? 'black' : '',
        whiteSpace: 'unset',
        maxWidth: '131px',
        textAlign: 'left',
        padding: '0px'
    };

    return (
        <Popover bodyContent={popoverContent}
            aria-label={'Business risk popover'} position="left">

            <Button variant="link"
                isDisabled={hasDefaultStatus}
                style={buttonStyle}>
                {cveStatusId !== systemStatusId ? (
                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>
                        <ServerAltIcon className='pf-u-m-l'/>
                    </Tooltip>
                ) : ('')}
                {' '}{STATUS_OPTIONS.find(option => option.value === systemStatusId.toString()).label}
            </Button>
        </Popover>
    );
};

SnippetWithPopover.propTypes = {
    type: propTypes.number,
    row: propTypes.object
};
export default SnippetWithPopover;
