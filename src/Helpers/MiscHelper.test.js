import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';
import { impactList, impactColorList } from './constants';
import routeData from 'react-router';
import { 
    constructParameters, 
    getImpactDetails, 
    handleSortColumn, 
    createSortBy, 
    updateStateSet,
    constructFilterParameters,
    useUrlParams,
    formatDate,
    updateRef,
    mountWithIntl,
    constructURLParameters
} from './MiscHelper';
import { 
    subtractDays, 
    subtractYears 
} from './constants';

const mockLocation = {
    hash: "",
    key: "2p9f6d",
    pathname: "/cves",
    search: "?cvss_filter=less4&page=1&sort=-public_date",
    state: undefined
}

const mockHistory = {
    pushState: jest.fn(),
    replaceState: jest.fn()
}

beforeEach(() => {
    Object.defineProperty(window, 'location', {
        writable: true,
        value: mockLocation
    });
    Object.defineProperty(window, 'history', {
        writable: true,
        value: mockHistory
    });
});

describe('MiscHelper', () => {
    it('constructParameters with apiProps', () => {
        const allowedParams = ['a', 'b', 'c', 'd'];
        const apiProps = { a: '', b: 'b', nope: 'no-way', d: 'd' }; //misses c and has nope extra, and a  is empty string
        const res = constructParameters(apiProps, allowedParams);
        expect(res).toEqual([undefined, 'b', undefined, 'd']);
    });
    it('constructParameters without apiProps', () => {
        const allowedParams = ['a', 'b', 'c', 'd'];
        const res = constructParameters(undefined, allowedParams);
        expect(res).toEqual([]);
    });
    for (let impact of Object.keys(impactList)) {
        it('getImpactDetails with ' + impact + ' impact', () => {
            const expected = {
                title: impactList[impact].title,
                color: impactList[impact].color,
                text: impactList[impact].text,
                titleContent: (
                    <SecurityIcon size="lg" />
                )
            };
            const res = getImpactDetails(impact);
            expect(res).toEqual(expected);
        });
    }
    it('getImpactDetails with no impact', () => {
        const expected = {
            title: 'Unknown',
            color: impactColorList['unknown'],
            text: '',
            titleContent: ( 
                    <UnknownIcon size="lg" />
                )
        };
        const res = getImpactDetails(undefined);
        expect(res).toEqual(expected);
    });

    it('Should sort desc order', () => {
        let key = 0;
        let direction = 'desc';
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]
        const applyMock = jest.fn(filters => { return filters });
        handleSortColumn(key, direction, header, 'public_date', applyMock)
        expect(applyMock).toBeCalledTimes(1)
        expect(applyMock).toHaveReturnedWith({sort: '-impact'})
    })

    it('Should sort asc order', () => {
        let key = 0;
        let direction = 'asc';
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]
        const applyMock = jest.fn(filters => { return filters });
        handleSortColumn(key, direction, header, '-impact', applyMock)
        expect(applyMock).toBeCalledTimes(1)
        expect(applyMock).toHaveReturnedWith({sort: 'impact'})
    })

    it('Should return empty sort object', () => {
        let sort = createSortBy({}, undefined)
        expect(sort).toEqual({})
    })

    it('Should return desc sort object', () => {
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]

        let sort = createSortBy(header, '-impact')
        expect(sort).toEqual({index: 0, direction: 'desc'})
    })


    it('Should return asc sort object', () => {
        let header = [{title: "first", key: "key", transforms: Array(2), columnTransforms: Array(1)},
        {title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]

        let sort = createSortBy(header, 'impact')
        expect(sort).toEqual({index: 1, direction: 'asc'})
    })

    it('Should add value into the set', () => {
        let mySet = new Set();
        let names = ['name1', 'name2'];

        let expectedSet = new Set()
        expectedSet.add('name1')
        expectedSet.add('name2')
        
        let newSet = updateStateSet(mySet, names, true);
        expect(newSet).toEqual(expectedSet)

    })

    it('Should remove value from the set', () => {
        let names = ['name1', 'name2'];
        let mySet = new Set();
        mySet.add('name1')
        mySet.add('name2')

        let expectedSet = new Set()
        
        let newSet = updateStateSet(mySet, names, false);
        expect(newSet).toEqual(expectedSet)

    });

    it('Should constructFilterParameters no cvss_filter and publish_date', () => {
        const filterParams = {}
        const params = constructFilterParameters(filterParams);
        expect(params).toEqual(filterParams);
    });

    it.each`
    publish_filter                               | expected_data
    ${{}}                                        | ${{}}
    ${{ publish_date: 'notValid' }}              | ${{ public_from: undefined, public_to: undefined, publish_date: undefined}}
    ${{ publish_date: 'all' }}                   | ${{ public_from: undefined, public_to: undefined, publish_date: 'all'}}
    ${{ publish_date: 'last7' }}                 | ${{ public_from: formatDate(subtractDays(7)), public_to: undefined, publish_date: 'last7'}}
    ${{ publish_date: 'last30' }}                | ${{ public_from: formatDate(subtractDays(30)), public_to: undefined, publish_date: 'last30'}}
    ${{ publish_date: 'last90' }}                | ${{ public_from: formatDate(subtractDays(90)), public_to: undefined, publish_date: 'last90'}}
    ${{ publish_date: 'lastYear' }}              | ${{ public_from: formatDate(subtractYears(1)), public_to: undefined, publish_date: 'lastYear'}}
    ${{ publish_date: 'MoreThanYear' }}          | ${{ public_from: undefined, public_to: formatDate(subtractYears(1)), publish_date: 'MoreThanYear'}}
 
    `('constructFilterParameters - publish_filter', ({ publish_filter, expected_data }) => {
        const filter = constructFilterParameters(publish_filter);
        expect(filter).toEqual(expected_data);
    });

    it('useUrlParams', () => {
        const mockLocation = new URL('https://localhost:1337/insights/vulnerability/cves?page=1&severity=3');
        window.location = mockLocation;

        const [urlParams, setUrlParams] = useUrlParams(['a', 'b']);
        setUrlParams({ filter: 'testFilter' });
            
        expect(urlParams).toEqual({
            page: '1',
            severity: '3'
        });
        expect(mockHistory.replaceState).toHaveBeenCalled();
    });

    it('Should updateRef update with the same page', () => {
        const testParameters = { page: 10 };
        const testMeta = { page: 10, pages: 10, cvesCount: 10 };
        const testFunc = jest.fn();

        updateRef(testMeta, testFunc);
        
        expect(testFunc).toHaveBeenCalledWith(testParameters);
    });

    it('Should updateRef update with the previus page', () => {
        const testMeta = { page: 10, pages: 10, cvesCount: 1 };
        const testFunc = jest.fn();

        updateRef(testMeta, testFunc);
        
        expect(testFunc).toHaveBeenCalledWith({ page: 9 });
    });

    it('Should mount with Intl', () => {
        const ComponentToMock = () => <div id = 'testComponentId'></div>;
        const wrapper = mountWithIntl(<ComponentToMock />);
        expect(wrapper.find('#testComponentId').exists()).toBeTruthy();
    });

    it('Should format handle invalid date', () => {
        const result = formatDate('2019-05-14T 1:01:58.135Z');
        expect(result).toEqual(expect.anything());
    });

    it('Should format set date to defult now', () => {
        const result = formatDate();
        expect(result).toEqual(expect.anything());
    });

    it.each`
    urlParams                               | expected_data
    ${undefined}                            | ${undefined}
    ${{}}                                   | ${{}}
    ${{ a: 'testValue', b: undefined }}     | ${{ a: 'testValue' }}
    ${{ a: false, b: 'testValue' }}         | ${{ b: 'testValue' }}
    ${{ a: 'testValue', c: 'testValue' }}   | ${{ a: 'testValue' }}
    ${{ a: '', b: 'testValue' }}            | ${{ b: 'testValue' }}

   
    `('constructURLParameters', ({ urlParams, expected_data }) => {
        const result = constructURLParameters(urlParams, ['a', 'b']);
        expect(result).toEqual(expected_data);
    });

});
