import React, { useState, useEffect } from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    Form,
    FormGroup,
    TextInput,
    Checkbox,
    TextArea,
    ToggleGroup,
    ToggleGroupItem
} from '@patternfly/react-core';
import { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import styles from '../Reports/Common/styles';

const ReportConfigModal = ({
    isOpen: isModalOpen,
    handleModalClose,
    filterData,
    setFilterData,
    handleDownloadButton,
    columnsToInclude,
    setColumnsToInclude,
    userNotes,
    setUserNotes,
    reportTitle,
    setReportTitle
}) => {
    const [toggleSwitch, setToggleSwitch] = useState('all');

<<<<<<< HEAD
    const activeFilters = ['rule_presence', 'impact', 'cvss_filter', 'business_risk_id', 'status_id', 'publish_date'];
=======
    const activeFilters = ['publish_date', 'impact', 'cvss_filter', 'status_id', 'business_risk_id'];
>>>>>>> 1aba8bb... Refactor report config modal filters

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        } else {
            setColumnsToInclude(
                columnsToInclude.filter((item) => item !== parameter)
            );
        }
    };

    useEffect(() => {
        if (toggleSwitch === 'all') {
            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));
        }

    }, [toggleSwitch, setColumnsToInclude]);

    return (
        <Modal
            title={intl.formatMessage(messages.configModalTitle)}
            id="custom-report-modal"
            ouiaId={'custom-report-modal'}
            isOpen={isModalOpen}
            onClose={handleModalClose}
            actions={[
                <Button
                    key="export"
                    variant="primary"
                    onClick={handleDownloadButton}
                    isDisabled={
                        filterData.cvss_filter.from < 0 ||
                        filterData.cvss_filter.to > 10 ||
                        filterData.cvss_filter.from > filterData.cvss_filter.to ||
                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH
                    }
                >
                    {intl.formatMessage(messages.configModalExportReport)}
                </Button>,
                <Button
                    key="cancel"
                    variant="secondary"
                    onClick={handleModalClose}
                >
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <Form>
                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId="horizontal-form-name">
                    <TextInput
                        value={reportTitle}
                        onChange={(value) => setReportTitle(value)}
                        type="text"
                        className="report-text-input"
                        id="horizontal-form-name"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}
                >
                    <div className="custom-report-filter-wrapper">
                        {activeFilters &&
                            activeFilters.map((filterId) => {
                                return (
                                    CVE_REPORT_FILTERS[filterId]?.component({
                                        filterData,
                                        setFilterData,
                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm', direction: 'up' },
                                        options: CVE_REPORT_FILTERS[filterId].items,
                                        filterId,
                                        filterName: CVE_REPORT_FILTERS[filterId].title
                                    })
                                );
                            })}
                    </div>
                </FormGroup>

                <FormGroup
                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}
                >
                    <ToggleGroup aria-label="Default with single selectable">
                        <ToggleGroupItem
                            text={intl.formatMessage(messages.customReportDataToggleAll)}
                            isSelected={toggleSwitch === 'all'}
                            onChange={() => setToggleSwitch('all')} />
                        <ToggleGroupItem
                            text={intl.formatMessage(messages.customReportDataToggleCustom)}
                            isSelected={toggleSwitch === 'custom'}
                            onChange={() => setToggleSwitch('custom')}/>
                    </ToggleGroup>

                    {toggleSwitch === 'custom' &&
                        <div style={styles.collumns}>
                            <Checkbox
                                id="cve_id"
                                label="CVE ID"
                                isChecked
                                isDisabled
                                className="pf-u-mb-md"
                            />
                            {
                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>
                                    <Checkbox
                                        id={key}
                                        key={key}
                                        label={value.title}
                                        isChecked={columnsToInclude.includes(key)}
                                        onChange={(newValue) =>
                                            handleCheckboxChange(key, newValue)
                                        }
                                        className='pf-u-mb-md'
                                    />
                                )
                            }
                        </div>
                    }
                </FormGroup>

                <FormGroup
                    label={intl.formatMessage(messages.customReportUserNotesLabel)}
                    fieldId="user-notes-box"
                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}
                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                >
                    <TextArea
                        value={userNotes}
                        onChange={(value) => setUserNotes(value)}
                        type="text"
                        id="user-notes-box"
                        className="report-text-input"
                        resizeOrientation='vertical'
                        style={{ minHeight: '4em' }}
                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
};

ReportConfigModal.propTypes = {
    isOpen: propTypes.bool,
    filterData: propTypes.object,
    setFilterData: propTypes.func,
    handleModalClose: propTypes.func,
    handleDownloadButton: propTypes.func,
    columnsToInclude: propTypes.array,
    setColumnsToInclude: propTypes.func,
    userNotes: propTypes.string,
    setUserNotes: propTypes.func,
    reportTitle: propTypes.string,
    setReportTitle: propTypes.func
};

export default ReportConfigModal;
