import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';
import RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';
import routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';
import propTypes from 'prop-types';
import { AnsibeTowerIcon }  from '@patternfly/react-icons';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

class Remediation extends Component {
    static propTypes = {
        cves: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        systems: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        addNotification: propTypes.func,
        manyRules: propTypes.bool
    };

    shouldComponentUpdate(nextProps) {
        if (nextProps.cves !== this.props.cves) {
            return true;
        }

        if (nextProps.systems !== this.props.systems) {
            return true;
        }

        return false;
    }

    baseIssueTemplate = (id) => (
        {
            id: `vulnerabilities:${id}`,
            description: id
        }
    )

    cveHasRule = (cve) => cve.rules?.length > 0;

    someSystemsHaveRule = (systems) => systems.some(s => s.rule)

    filterRules = (cve, systems) => (
        [].concat(cve.rules).filter(({ value }) => systems.some(({ rule }) => rule ? rule?.rule?.rule_id === value : value))
    )

    remediationProvider = (cves = [], systems = [], manyRules = false) => {
        cves = [].concat(cves);
        systems = [].concat(systems);
        let issues = [];

        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N
        if (manyRules && cves.length === 1) {
            let [cve] = cves;

            // both cve and at least one of the systems have linked rule
            if (this.cveHasRule(cve) && this.someSystemsHaveRule(systems)) {
                let rules = this.filterRules(cve, systems);
                issues = rules.reduce((acc, rule) => {
                    let issue = this.baseIssueTemplate(cve.id);
                    issue.id = `${issue.id}:${rule.value}`;

                    return [...acc, issue];
                }, []);
            } else {
                issues = [this.baseIssueTemplate(cve.id)];
            }

        }

        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1
        if (!manyRules && systems?.length === 1) {
            issues = cves.reduce((acc, cve) => {
                let issue = this.baseIssueTemplate(cve.id);

                if (cve.rules?.rule_id) {
                    issue.id = `${issue.id}:${cve.rules.rule_id}`;
                }

                return [...acc, issue];
            }, []);
        }

        return cves.length && systems.length
            ? {
                issues,
                systems: systems.map(system => system.id || system)
            }
            : false;
    };

    render() {
        const { cves, systems, manyRules, addNotification: dispatchNotification } = this.props;
        return (
            <div>
                <RemediationButton
                    dataProvider={() => this.remediationProvider(cves, systems, manyRules)}
                    isDisabled={!cves.length && !systems.length}
                    onRemediationCreated={result => dispatchNotification(result.getNotification())}
                >
                    <AnsibeTowerIcon size="sm" color={'var(--pf-global--BackgroundColor--100)'} />
                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}
                </RemediationButton>
            </div>
        );
    }
}

export default connect(
    null,
    dispatch => ({
        addNotification: notification => dispatch(addNotification(notification))
    })
)(routerParams(Remediation));
