import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import React, { useEffect, useState, useMemo } from 'react';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';
import { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import DownloadReport from '../../../Helpers/DownloadReport';
import {
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    expandRow,
    changeExposedSystemsParameters,
    clearInventoryStore,
    selectRows
} from '../../../Store/Actions/Actions';
import {
    SYSTEMS_EXPOSED_HEADER,
    SYSTEMS_EXPOSED_ALLOWED_PARAMS,
    SYSTEMS_EXPOSED_SORTING_HEADER
} from '../../../Helpers/constants';
import { TableVariant } from '@patternfly/react-table';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import useDeepCompareEffect from 'use-deep-compare-effect';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';

const SystemsExposedTable = ({ intl, cve, cveStatusDetails, filterRuleValues, hasSecurityRule }) => {
    const inventory = React.createRef();
    const dispatch = useDispatch();
    const [isFirstMount, setFirstMount] = useState(true);
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);

    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});
    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount);
    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);

    const affectedSystems = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE
    );

    const isLoading = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading
    );

    const parameters = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,
        shallowEqual
    );

    const metadata = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta
    );
    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems }, cve), [affectedSystems, cve]);

    const { error } = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE
    );

    const apply = (config) => dispatch(
        changeExposedSystemsParameters(config)
    );

    const inventoryRefresh = ({ page, per_page: pageSize }) => {

        if (inventory.current && (metadata.page !== page || metadata.limit !== pageSize)) {
            apply({ page, page_size: pageSize });
        }

        if (metadata && metadata.total_items <= pageSize && inventory.current) {
            inventory.current.onRefreshData({ page, page_size: pageSize });
        }
    };

    const handleSelect = (payload) => dispatch(selectRows(payload));

    useEffect(() => {
        apply(urlParameters);
        setFirstMount(false);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useDeepCompareEffect(() => {
        if (!isFirstMount) {
            setUrlParams({ ...parameters });
            dispatch(fetchAffectedSystemsByCVE(cve, { ...parameters }));
        }
    }, [parameters, isFirstMount]);

    useEffect(() => {
        return () => {
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    const downloadReport = format => {
        let params = [cve, { ...parameters }];
        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed', notification => dispatch(
            addNotification(notification)), () => dispatch(clearNotifications()));
    };

    const showStatusModal = (cves, inventories) => {
        setStatusModal(
            () => () =>
                <CvePairStatusModal
                    cveList={cves}
                    updateRef={() => {
                        items.meta.page === 1
                            ? dispatch(fetchAffectedSystemsByCVE(cve, { ...parameters }))
                            : apply({ page: 1 });

                        dispatch(fetchCveDetails(cve));
                    }}
                    inventoryList={inventories}
                    type={'systemsExposed'}
                />
        );
    };

    const sortingHeader = items?.meta?.patch_access
        ? SYSTEMS_EXPOSED_SORTING_HEADER
        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');

    const sortBy = () =>
        createSortBy(
            sortingHeader,
            metadata.sort
        );

    const onSort = (_event, index, direction) =>
        handleSortColumn(
            index,
            direction,
            sortingHeader,
            urlParameters.sort,
            apply
        );

    return (
        <Stack hasGutter>
            <StackItem>
                <TextContent>
                    <Text component={TextVariants.h2}>
                        {intl.formatMessage(messages.affectsSystems)}
                    </Text>
                </TextContent>
            </StackItem>
            <StackItem>
                {error?.hasError
                    ? <ErrorHandler code={error?.errorCode} />
                    : <InventoryTable
                        disableDefaultColumns
                        onLoad={({ mergeWithEntities, mergeWithDetail }) => {
                            ReducerRegistry.register({
                                ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),
                                ...mergeWithDetail()
                            });
                        }}
                        tableProps={{
                            isStickyHeader: true,
                            canSelectAll: false,
                            onSort: (items.data.length > 0) && onSort,
                            sortBy: (items.data.length > 0) && sortBy(),
                            actionResolver: () =>
                                items.data.length && systemExposedTableRowActions(showStatusModal, cveStatusDetails),
                            variant: TableVariant.compact
                        }}
                        showTags
                        key={'inventory'}
                        expandable={hasSecurityRule}
                        ref={inventory}
                        items={items.data}
                        page={metadata && metadata.page || 1}
                        perPage={metadata && metadata.page_size || 20}
                        total={metadata && metadata.total_items || 0}
                        isLoaded={!isLoading}
                        onRefresh={inventoryRefresh}
                        hasCheckbox={items && items.length !== 0}
                        showActions={items && items.length !== 0}
                        onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}
                        noSystemsTable={<EmptyStateNoSystems />}
                    >
                        <SystemsExposedTableToolbar
                            items={items}
                            parameters={parameters}
                            cve={cve}
                            selectedRows={selectedRows}
                            selectedRowsCount={selectedRowsCount}
                            selectedRowsRawData={selectedRowsRawData}
                            cveStatusDetails={cveStatusDetails}
                            isLoading={isLoading}
                            filterRuleValues={filterRuleValues}
                            methods={{
                                downloadReport,
                                apply,
                                handleSelect,
                                showStatusModal
                            }}
                        >
                            {StatusModal && <StatusModal />}
                        </SystemsExposedTableToolbar>

                    </InventoryTable>}
            </StackItem>
        </Stack>
    );
};

SystemsExposedTable.propTypes = {
    intl: propTypes.object,
    cve: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.array,
    hasSecurityRule: propTypes.bool
};

export default injectIntl(
    withRouter(
        SystemsExposedTable
    )
);
