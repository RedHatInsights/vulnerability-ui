import React, { Fragment, useState, useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector } from 'react-redux';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems } from '../../../Store/Actions/Actions';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';
import DownloadReport from '../../../Helpers/DownloadReport';
import DownloadSystemsReport from '../Reports/DownloadSystemsReport';
import { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';
import excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';
import { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';
import { useBulkSelect } from '../../../Helpers/Hooks';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useLoadModule } from '@scalprum/react-core';

const SystemsTableToolbar = ({
    selectedRows,
    selectedRowsCount,
    intl,
    canExport,
    canSetExcludedIncluded,
    canReadExcluded,
    parameters,
    rawData,
    methods
}) => {
    const [exportPDF, setExportPDF] = useState(false);
    const { apply, handleSelect, doOptOut, setColumnModalOpen } = methods;
    const dispatch = useDispatch();
    /* operatingSystems are obtained from the Inventory store */
    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];
    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({
        appName: 'inventory',
        scope: 'inventory',
        module: './OsFilterHelpers'
    });

    const downloadReport = format => {
        let params = { ...parameters };
        DownloadReport.exec(
            fetchSystems,
            params,
            format,
            'system-list',
            notification => dispatch(
                addNotification(notification)
            ),
            () => dispatch(clearNotifications())
        );
    };

    const kebabProps = useMemo(() => {
        return {
            selectedExcluded: selectedRows.some(({ opt_out: optOut }) => optOut === true),
            selectedIncluded: selectedRows.some(({ opt_out: optOut }) => optOut === false)
        };
    }, [selectedRows]);

    const kebabOptions = [
        '',
        ...canSetExcludedIncluded ? [{
            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRows?.[0].display_name, true),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }
        },
        {
            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),
            onClick: () => doOptOut(selectedRows, selectedRows?.[0].display_name, false, selectedRows),
            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }
        }] : [],
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => setColumnModalOpen(true)
        }
    ];

    const bulkSelectProps = useBulkSelect({
        rawData,
        selectedRows,
        selectedRowsCount,
        handleSelect,
        // TODO: change it back to fetchSystemsIds when the endpoint returns also a display_name
        fetchResource: ops => fetchSystems({ ...parameters, ...ops })
    });

    const filterConfigItems = [
        useSearchFilter(
            'filter',
            messages.systemsSearchName,
            messages.searchFilterByName,
            parameters.filter,
            apply
        ),
        ...(canReadExcluded ? [excludedFilter(apply, parameters)] : []),
        ...(buildOSFilterConfig
            ? [
                buildOSFilterConfig(
                    {
                        label: intl.formatMessage(messages.osFilterLabel),
                        type: 'checkbox',
                        id: 'rhel_version',
                        value: toGroupSelectionValue(
                            parameters.rhel_version
                                ? parameters.rhel_version.split(',')
                                : []
                        ),
                        onChange: (event, value) => {
                            /* `versions` must be of type string, e.g., "8.9,9.0" */
                            const versions = Object.values(value)
                                .flatMap((versions) => Object.keys(versions))
                                .toString();
                            apply({ rhel_version: versions, page: 1 });
                        }
                    },
                    operatingSystems
                )
            ]
            : [])
    ];

    return <Fragment>
        <PrimaryToolbar
            className="vuln-systems-primary-toolbar"
            bulkSelect={bulkSelectProps}
            actionsConfig={{
                actions: kebabOptions,
                dropdownProps: { ouiaId: 'toolbar-actions' }
            }}
            filterConfig={{
                items: filterConfigItems
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters(parameters),
                onDelete: (_, chips, reset) => removeFilters(chips, apply, reset, SYSTEMS_DEFAULT_FILTERS),
                deleteTitle: intl.formatMessage(messages.resetFilters),
                showDeleteButton: !isFilterInDefaultState(
                    parameters,
                    canReadExcluded ? SYSTEMS_DEFAULT_FILTERS : {},
                    SYSTEMS_FILTER_PARAMS)
            }}
            exportConfig={canExport ? {
                isDisabled: rawData.meta.totalItems === 0,
                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],
                ouiaId: 'export',
                ...exportConfig({ downloadReport })
            } : null}
        />

        {exportPDF &&
            <DownloadSystemsReport
                showButton={false}
                params={parameters}
                filters={buildActiveFilters(parameters)}
                onSuccess={() => setExportPDF(false)}
            />
        }

    </Fragment>;

};

SystemsTableToolbar.propTypes = {
    rawData: dataShape,
    canExport: propTypes.bool,
    canSetExcludedIncluded: propTypes.bool,
    canReadExcluded: propTypes.bool,
    parameters: propTypes.object,
    selectedRows: propTypes.array,
    selectedRowsCount: propTypes.number,
    methods: propTypes.shape({
        doOptOut: propTypes.func,
        apply: propTypes.func,
        handleSelect: propTypes.func,
        setColumnModalOpen: propTypes.func
    }),
    intl: propTypes.any
};

export default injectIntl(SystemsTableToolbar);
