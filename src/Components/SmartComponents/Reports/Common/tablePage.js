/* eslint-disable camelcase */

import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { View, Text, StyleSheet, Link } from '@react-pdf/renderer';
import { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';
import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';
import global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';
import global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import { CVES_PATH } from '../../../../Helpers/constants';
import messages from '../../../../Messages';

const styles = StyleSheet.create({
    link: { color: global_link_Color.value },
    bodyCell: {
        width: '72px',
        textAlign: 'left',
        fontSize: 8,
        paddingBottom: 2,
        paddingTop: 2
    },
    headerCell: {
        width: '72px',
        textAlign: 'left',
        color: global_Color_200.value,
        fontWeight: global_FontWeight_bold.value,
        fontSize: 8
    },
    iconAlign: {
        position: 'absolute',
        left: '65px'
    }
});

const tablePage = ({ data, page, intl, header }) => {
    // eslint-disable-next-line react/prop-types
    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;
    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];

    let headerContent = [];

    // if the header is undefined we use default header (all params)
    if (header) {
        headerContent.push({ value: intl.formatMessage(messages.cveId) });
        hitColumns = [];

        if (header.includes('publish_date')) {
            headerContent.push({ value: intl.formatMessage(messages.publishDate) });
        }

        if (header.includes('cvss_filter')) {
            headerContent.push({ value: intl.formatMessage(messages.cvssBaseScore) });
            hitColumns.push('cvss_score');
        }

        if (header.includes('impact')) {
            headerContent.push({ value: intl.formatMessage(messages.impact) });
            hitColumns.push('impact');
        }

        if (header.includes('show_all')) {
            headerContent.push({ value: intl.formatMessage(messages.systemsExposed) });
            hitColumns.push('systems_affected');
        }

        if (header.includes('business_risk_id')) {
            headerContent.push({ value: intl.formatMessage(messages.businessRisk) });
            hitColumns.push('business_risk');
        }

        if (header.includes('status_id')) {
            headerContent.push({ value: intl.formatMessage(messages.status) });
            hitColumns.push('status');
        }
    }
    else {
        headerContent = [
            { value: intl.formatMessage(messages.cveId) },
            { value: intl.formatMessage(messages.publishDate) },
            { value: intl.formatMessage(messages.cvssBaseScore) },
            { value: intl.formatMessage(messages.impact) },
            { value: intl.formatMessage(messages.systemsExposed) },
            { value: intl.formatMessage(messages.businessRisk) },
            { value: intl.formatMessage(messages.status) }
        ];
    }

    const rows = [
        ...data.map(({ attributes: cve }) => {
            const publishDateCell = (
                (!header || header.includes('publish_date')) &&
                    <Text key={cve.public_date} style={styles.bodyCell}>
                        { processDate(cve.public_date) }
                    </Text>
            );

            return [
                <View key={cve.synopsis} style={styles.cveIDCell}>
                    <Text style={styles.bodyCell}>
                        <Link
                            style={styles.link}
                            src={`${CVES_PATH}/${cve.synopsis}`}
                        >
                            {cve.synopsis}
                        </Link>
                    </Text>
                    { cve.rules.length > 0 && <CSAwIcon style={{ ...styles.bodyCell, ...styles.iconAlign }}/> }
                </View>,
                publishDateCell,
                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: styles.bodyCell }))
            ];
        })
    ];

    return <Fragment key={page}>
        <Table
            withHeader
            rows={[headerContent.map(item => columnBuilder({ ...item, style: styles.headerCell })), ...rows]}
        />
        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }
    </Fragment>;
};

tablePage.propTypes = {
    data: PropTypes.object,
    intl: PropTypes.any,
    page: PropTypes.number,
    header: PropTypes.array
};

export default tablePage;
