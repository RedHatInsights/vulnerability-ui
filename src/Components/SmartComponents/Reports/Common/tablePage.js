
import React, { Fragment } from 'react';
import { Text, StyleSheet, Link } from '@react-pdf/renderer';
import { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';
import PropTypes from 'prop-types';
// eslint-disable-next-line camelcase
import global_FontWeight_bold from '@patternfly/react-tokens/dist/js/global_FontWeight_bold';
// eslint-disable-next-line camelcase
import global_link_Color from '@patternfly/react-tokens/dist/js/global_link_Color';
// eslint-disable-next-line camelcase
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import { CVES_PATH } from '../../../../Helpers/constants';
import messages from '../../../../Messages';
// import { CSAwIcon } from '../../../PresentationalComponents/CSAwIcon/CSAwIcon';

const styles = StyleSheet.create({
    link: { color: global_link_Color.value },
    headerCell: { width: '72px', textAlign: 'left', color: '#6A6E73',
        fontWeight: global_FontWeight_bold.value, fontSize: 8 },
    bodyCell: { width: '72px', textAlign: 'left' }
});

const tablePage = ({ data, page, intl, header }) => {
    // eslint-disable-next-line react/prop-types
    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;
    let hitColumns = ['impact', 'cvss3_score', 'systems_affected', 'business_risk', 'status'];

    let headerContent = [];

    // if the header is undefined we use default header (all params)
    if (header) {
        headerContent.push({ value: intl.formatMessage(messages.cveId) });
        hitColumns = [];

        if (header.includes('publish_date')) {
            headerContent.push({ value: intl.formatMessage(messages.publishDate) });
        }

        if (header.includes('impact')) {
            headerContent.push({ value: intl.formatMessage(messages.impact) });
            hitColumns.push('impact');
        }

        if (header.includes('cvss_filter')) {
            headerContent.push({ value: intl.formatMessage(messages.cvssBaseScore) });
            hitColumns.push('cvss3_score');
        }

        if (header.includes('show_all')) {
            headerContent.push({ value: intl.formatMessage(messages.systemsExposed) });
            hitColumns.push('systems_affected');
        }

        if (header.includes('business_risk_id')) {
            headerContent.push({ value: intl.formatMessage(messages.businessRisk) });
            hitColumns.push('business_risk');
        }

        if (header.includes('status_id')) {
            headerContent.push({ value: intl.formatMessage(messages.status) });
            hitColumns.push('status');
        }
    }
    else {
        headerContent = [
            { value: intl.formatMessage(messages.cveId) },
            { value: intl.formatMessage(messages.publishDate) },
            { value: intl.formatMessage(messages.impact) },
            { value: intl.formatMessage(messages.cvssBaseScore) },
            { value: intl.formatMessage(messages.systemsExposed) },
            { value: intl.formatMessage(messages.businessRisk) },
            { value: intl.formatMessage(messages.status) }
        ];
    }

    const rows = [
        ...data.map(({ attributes: cve }) => {
            const publishDateCell = (!header || header.includes('publish_date'))
                ? <Text key={cve.public_date} style={styles.bodyCell}>{`${processDate(cve.public_date)}`}</Text>
                : undefined;
            return [
                <Text key={cve.synopsis} style={styles.bodyCell}>
                    <Link
                        style={styles.link}
                        src={`${CVES_PATH}/${cve.synopsis}`}
                    >
                        {cve.synopsis}
                        {/*SVG unsupported by react-pdf --> cve.rules.length > 0 && <CSAwIcon/>*/}
                    </Link>
                </Text>,
                publishDateCell,

                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: styles.bodyCell }))
            ];
        })
    ];

    return <Fragment key={page}>
        <Table
            withHeader
            rows={[headerContent.map(item => columnBuilder({ ...item, style: styles.headerCell })), ...rows]}
        />
    </Fragment>;
};

tablePage.propTypes = {
    data: PropTypes.object,
    intl: PropTypes.any,
    page: PropTypes.number,
    header: PropTypes.array
};

export default tablePage;
