import { fetchHybridSystemsCounts } from "./cveDetailHelpers";
import { getAffectedSystemsByCVE } from "../../../Helpers/APIHelper";

jest.mock('../../../Helpers/APIHelper', () => ({
    ...jest.requireActual('../../../Helpers/APIHelper'),
    getAffectedSystemsByCVE: jest.fn(() => Promise.resolve({ meta: { total_items: 10 } }))
}));

afterEach(() => {
    jest.clearAllMocks()
});

const mockSetState = jest.fn();
describe('cveDetailHelpers', () => {
    it('Should not fetch edge counts if edge parity disabled', async () =>{
        await fetchHybridSystemsCounts('testCve', false, mockSetState);
        expect(mockSetState).toHaveBeenCalledWith({
            areCountsLoading: false,
            conventionalCount: 10,
            edgeCount: 0,
        });

        expect(getAffectedSystemsByCVE).toHaveBeenCalledTimes(1);
        expect(getAffectedSystemsByCVE).toHaveBeenCalledWith({
            host_type: "rpmdnf",
            id: "testCve",
            limit: 1,
        });
    });

    it('Should fetch counts and set result into state', async () =>{
        await fetchHybridSystemsCounts('testCve', true, mockSetState);
        expect(mockSetState).toHaveBeenCalledWith({
            areCountsLoading: false,
            conventionalCount: 10,
            edgeCount: 10,
        });

        expect(getAffectedSystemsByCVE).toHaveBeenCalledTimes(2);
        expect(getAffectedSystemsByCVE).toHaveBeenCalledWith({
            host_type: "rpmdnf",
            id: "testCve",
            limit: 1,
        });
        expect(getAffectedSystemsByCVE).toHaveBeenCalledWith({
            host_type: "edge",
            id: "testCve",
            limit: 1,
        });
    });


});

