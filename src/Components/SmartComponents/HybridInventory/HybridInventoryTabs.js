import React, { Suspense, Fragment, lazy } from 'react';
import propTypes from 'prop-types';
import AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { useParams } from 'react-router-dom';
import useFeatureFlag from '../../../Utilities/useFeatureFlag';
import { useContext } from 'react';
import { AccountStatContext } from '../../../Utilities/VulnerabilityRoutes';
import { Bullseye, Spinner } from '@patternfly/react-core';
import { CVEPageContext } from '../CVEDetailsPage/CVEDetailsPage';

const ImmutableDevices = lazy(() =>
    import(
        /* webpackChunkName: "ImmutableDevices" */ './ImmutableDevicesTab/ImmutableDevices'
    )
);

const SystemsExposedTable = lazy(() =>
    import(
        /* webpackChunkName: "SystemsExposedTable" */ '../SystemsExposedTable/SystemsExposedTable'
    )
);

const HybridInventory = ({
    isImmutableTabOpen,
    ...tabProps
}) => {
    const { cve } = useParams();
    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');
    const { hasEdgeDevices } = useContext(AccountStatContext);
    const { conventionalCount, edgeCount, areCountsLoading } = useContext(CVEPageContext);

    return areCountsLoading ?
        <Bullseye>
            <Spinner size="lg" />
        </Bullseye>
        : (
            <AsynComponent
                key="hybridInventory"
                appName="inventory"
                module="./HybridInventoryTabs"
                ConventionalSystemsTab={<Suspense fallback={Fragment}>
                    <SystemsExposedTable {...tabProps} />
                </Suspense>}
                ImmutableDevicesTab={<Suspense fallback={Fragment}>
                    <ImmutableDevices {...tabProps} />
                </Suspense>}
                tabPathname={`/insights/vulnerability/cves/${cve}`}
                isImmutableTabOpen={isImmutableTabOpen}
                fallback={<div />}
                columns
                isEdgeParityEnabled={isEdgeParityEnabled}
                hasConventionalSystems={conventionalCount > 0 || edgeCount <= 0}
                accountHasEdgeImages={hasEdgeDevices}
            />
        );
};

HybridInventory.propTypes = {
    isImmutableTabOpen: propTypes.bool
};

export default HybridInventory;
