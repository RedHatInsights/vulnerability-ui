import React, { useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './SystemCves';
import Remediation from '../Remediation/Remediation';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';
import { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';

const SystemCveToolbarWithContext = ({
    entity,
    intl,
    context,
    canExport,
    customAction,
    canSelect,
    canManageColumns,
    filters
}) => {
    const onExpandAllClick = () => {
        const { cves, methods, isAllExpanded } = context;
        const isOpen = !isAllExpanded;
        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(isOpen, expandedRows, !isAllExpanded);
    };

    const { cves, systemCVEs, parameters, methods, selectedCves, isAllExpanded, canEditPairStatus } = context;
    const { filter, advisory } = parameters;
    const selectedCvesCount = selectedCves?.length ?? 0;
    const remediableCves = selectedCves.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);

    const selectOptions = useMemo(() => selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        rawItems: systemCVEs,
        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),
        multiRow: true
    }), [selectedCves, cves, systemCVEs, parameters, methods]);

    const actions = ['',
        ...canEditPairStatus ?
            [{
                label: intl.formatMessage(messages.editStatus),
                onClick: () => methods.showStatusModal(selectedCves, true),
                props: { isDisabled: !selectedCvesCount }
            }] : [],
        ...canManageColumns ?
            [{
                label: intl.formatMessage(messages.columnManagementModalTitle),
                onClick: () => methods.setColumnModalOpen(true)
            }] : []
    ];

    const allFilters = [
        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),
        securityRuleFilter(methods.apply, parameters),
        knownExploitFilter(methods.apply, parameters),
        impactFilter(methods.apply, parameters),
        useCvssBaseScoreFilter(methods.apply, parameters),
        businessRiskFilter(methods.apply, parameters),
        publishDateFilter(methods.apply, parameters),
        statusFilter(methods.apply, parameters),
        useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),
        remediationFilter(methods.apply, parameters)
    ];

    return (
        <PrimaryToolbar
            pagination={{
                isDisabled: cves.meta.total_items === 0,
                itemCount: cves.meta.total_items || 0,
                page: cves.meta.page || 1,
                perPage: cves.meta.page_size || 1,
                ouiaId: 'pagination-top',
                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
            }}
            dedicatedAction={customAction ? (typeof customAction === 'function' ? customAction(cves) : customAction) : (entity &&
                <Remediation
                    isDisabled={selectedCves.length === 0}
                    systems={entity}
                    cves={remediableCves}
                />)}
            actionsConfig={{
                actions,
                dropdownProps: { ouiaId: 'toolbar-actions' }
            }}
            bulkSelect={canSelect && {
                count: selectedCvesCount,
                items: selectOptions.items,
                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                checked: Boolean(selectedCvesCount),
                ouiaId: 'bulk-select',
                onSelect: () => selectOptions.handleOnCheckboxChange()
            }}
            filterConfig={{
                items: filters ? allFilters.filter(filter => filters.includes(filter.key)) : allFilters
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters(parameters),
                onDelete: (_, chips) => removeFilters(chips, methods.apply),
                deleteTitle: intl.formatMessage(messages.resetFilters)
            }}
            exportConfig={canExport && {
                isDisabled: cves.meta.total_items === 0,
                ouiaId: 'export',
                ...exportConfig(methods)
            }}
            expandAll={{
                isAllExpanded,
                onClick: onExpandAllClick,
                isDisabled: cves.meta.total_items === 0
            }}
        />
    );
};

SystemCveToolbarWithContext.defaultProps = {
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

SystemCveToolbarWithContext.propTypes = {
    entity: propTypes.string,
    context: propTypes.object,
    intl: propTypes.any,
    canExport: propTypes.bool,
    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),
    canSelect: propTypes.bool,
    canManageColumns: propTypes.bool,
    filters: propTypes.arrayOf(propTypes.string)
};

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default injectIntl(SystemCveToolbar);
