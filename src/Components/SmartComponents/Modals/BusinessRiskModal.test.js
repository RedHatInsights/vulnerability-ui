import React from 'react';
import { Provider } from 'react-redux';
import * as deps from '../../../Helpers/APIHelper';
import { BusinessRiskModal } from './BusinessRiskModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { intl } from '../../../Utilities/IntlProvider';
import { fireEvent, render, screen } from '@testing-library/react';
import TestWrapper from '../../../Utilities/TestWrapper';
import '@testing-library/jest-dom';
import userEvent from '@testing-library/user-event';

const MockStore = ({ children }) => <Provider store={ReducerRegistry.getStore()}>{children}</Provider>;

describe('BusinessRiskModal', () => {
    const setBusinessRiskMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
    deps.setBusinessRisk = setBusinessRiskMock;

    it('Should render with one CVE', () => {
        const cves = [{ id: 'SOME CVE', business_risk_id: '3' }];
        render(
            <MockStore>
                <TestWrapper>
                    <BusinessRiskModal open cves={cves} intl={intl}/>
                </TestWrapper>
            </MockStore>
        );

        expect(screen.getByRole('radio', { name: 'Medium' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'High' })).toHaveAttribute('checked');
    });
    it('Should render with list of CVE', () => {
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        render(
            <MockStore>
                <TestWrapper>
                    <BusinessRiskModal open cves={cves} intl={intl}/>
                </TestWrapper>
            </MockStore>
        );

        expect(screen.getByRole('radio', { name: 'Critical' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'High' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Medium' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Low' })).not.toHaveAttribute('checked');
        expect(screen.getByRole('radio', { name: 'Not defined' })).toHaveAttribute('checked');
    });
    it('Should save a list of CVEs', () => {
        const cves = [
            { id: 'SOME CVE1', business_risk_id: '3' },
            { id: 'SOME CVE2', business_risk_id: '2' },
            { id: 'SOME CVE3', business_risk_id: '1' },
            { id: 'SOME CVE4', business_risk_id: '0' }
        ];
        render(
            <MockStore>
                <TestWrapper>
                    <BusinessRiskModal open cves={cves} updateRef={jest.fn()} intl={intl}/>
                </TestWrapper>
            </MockStore>
        );

        userEvent.click(screen.getByRole('radio', { name: 'Critical' }));
        fireEvent.change(screen.getByRole('textbox', { name: /justification/i }), { target: { value: 'Test' } });
        userEvent.click(screen.getByRole('button', { name: 'Save' }));
        expect(setBusinessRiskMock).toBeCalledWith({
            business_risk_id: 4,
            business_risk_text: 'Test',
            cve: ['SOME CVE1', 'SOME CVE2', 'SOME CVE3', 'SOME CVE4']
        });
    });
});
