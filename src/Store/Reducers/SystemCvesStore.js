import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';
import { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';

export const initialState = {
    parameters: {
        page: 1,
        page_size: 20,
        show_advisories: true
    },
    cveList: {
        isLoading: true,
        payload: [],
        meta: new Date(),
        error: false
    },
    openedCves: [],
    selectedCves: [],
    expandCveDescription: false
};

function pendingVulnerabilities(state, { meta }) {
    return {
        ...state,
        timestamp: meta,
        cveList: {
            ...state.cveList,
            isLoading: true
        }
    };
}

function rejectedVulnerabilities(state, { meta, payload }) {
    return {
        ...state,
        timestamp: meta,
        cveList: {
            payload: { errors: payload },
            isLoading: false
        }
    };
}

function fulfilledVulnerabilities(state, action) {
    const { payload, meta } = action;
    if (meta >= state.timestamp) {
        return {
            ...state,
            timestamp: meta,
            cveList: {
                payload,
                isLoading: false
            }
        };
    }

    return state;
}

function selectEntity(state, action) {
    let newState = state;
    let selectedCves = newState.selectedCves.slice();
    if (Array.isArray(action.payload)) {
        selectedCves = action.payload;
    } else {
        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||
            selectedCves.push(action.payload);
    }

    return { ...newState, selectedCves };
}

function expandCve(state, action) {
    let newState = state;
    const { isOpen, cves, expandCveDescription } = action.payload;
    let openedCves = newState.openedCves.slice();

    if (cves.length > 0) {
        cves.map(cve =>{
            const index = openedCves.findIndex(element => element.id === cve);
            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}
            else {openedCves.push({ id: cve, isOpen });}
        });
    }
    else {
        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));
    }

    return { ...newState, openedCves, expandCveDescription };
}

function changeParameters(state, action) {
    let newState = state;
    newState.parameters = { ...state.parameters, ...action.payload };
    return newState;
}

function clearSystemCvesStore(state) {
    let newState = state;
    newState.selectedCves = [];
    newState.openedCves = [];
    newState.parameters = {
        page: 1,
        page_size: 20,
        show_advisories: true
    };
    return newState;
}

export const SystemCvesStore = applyReducerHash(
    {
        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,
        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,
        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,
        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,
        ['SELECT_SYSTEM_CVE']: selectEntity,
        ['EXPAND_SYSTEM_CVE']: expandCve,
        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore

    },
    initialState
);
