import * as APIHelper from '../../Helpers/APIHelper';
import * as HeaderHelper from '../../Helpers/HeaderHelper';
import ReducerRegistry from '../../Utilities/ReducerRegistry';
import * as ActionTypes from '../ActionTypes';
import { BreadcrumbStore } from '../Reducers/BreadcrumbStore';
import { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';
import { SystemCvesStore } from '../Reducers/SystemCvesStore';
import { SystemsPageStore } from '../Reducers/SystemsPageStore';
import { CVEsStore } from '../Reducers/CVEsStore';
import { AppStore } from '../Reducers/AppStore';

ReducerRegistry.register({ CVEDetailsPageStore });
ReducerRegistry.register({ CVEsStore });
ReducerRegistry.register({ SystemsPageStore });
ReducerRegistry.register({ BreadcrumbStore });
ReducerRegistry.register({ SystemCvesStore });
ReducerRegistry.register({ AppStore });

export const setHeader = props => ({
    type: ActionTypes.SET_HEADER,
    payload: new Promise(resolve => {
        resolve(HeaderHelper.setHeader(props));
    }).then(result => result)
});

export const fetchAffectedSystemsByCVE = (cve, apiProps) => ({
    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,
    payload: new Promise(resolve => {
        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));
    }).then(result => result)
});

export const fetchSystems = options => ({
    type: ActionTypes.FETCH_SYSTEMS,
    payload: new Promise(resolve => {
        resolve(APIHelper.getSystems(options));
    }).then(result => result)
});

export const fetchCveDetails = synopsis => ({
    type: ActionTypes.FETCH_CVE_DETAILS,
    payload: new Promise(resolve => {
        resolve(APIHelper.getCveDetails(synopsis));
    }).then(result => result)
});

export const fetchSystemDetails = system => ({
    type: ActionTypes.FETCH_SYSTEM_DETAILS,
    meta: { noError: true },
    payload: new Promise(resolve => {
        resolve(APIHelper.getSystemDetails(system));
    }).then(result => result)
});

export const fetchCveListByAccount = apiProps => ({
    type: ActionTypes.FETCH_CVE_LIST,
    meta: new Date(),
    payload: APIHelper.getCveListByAccount(apiProps)
});

export const optOutSystemAction = (system, status) => ({
    type: ActionTypes.SYSTEM_OPT_OUT,
    payload: new Promise(resolve => {
        resolve(APIHelper.optOutSystem(system, status));
    }).then(result => result)
});

export const fetchCveListBySystem = apiProps => ({
    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,
    meta: new Date(),
    payload: APIHelper.getCveListBySystem(apiProps)
});

export const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({
    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,
    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)
});

export const optOutSystemsAction = (system, status) => ({
    type: ActionTypes.SYSTEM_OPT_OUT,
    payload: new Promise(resolve => {
        resolve(APIHelper.optOutSystems(system, status));
    }).then(result => result)
});

export const changeCveListParameters = apiProps => ({
    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,
    payload: new Promise(resolve => {
        resolve(apiProps);
    }).then(result => result)
});

export const changeExposedSystemsParameters = (params) => ({
    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,
    payload: params
});

export const changeSystemCVEsParameters = (params) => ({
    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,
    payload: params
});

export const selectCve = apiProps => ({
    type: ActionTypes.SELECT_CVE,
    payload: apiProps
});

export const expandCve = apiProps => ({
    type: ActionTypes.EXPAND_CVE,
    payload: apiProps
});

export const selectSystemCve = apiProps => ({
    type: ActionTypes.SELECT_SYSTEM_CVE,
    payload: apiProps
});

export const expandSystemCve = apiProps => ({
    type: ActionTypes.EXPAND_SYSTEM_CVE,
    payload: apiProps
});

export const expandRow = (id, isOpen) => ({
    type: ActionTypes.EXPAND_ROW,
    payload: { id, isOpen }
});

export const selectEntities = (value, ids) => ({
    type: ActionTypes.SELECT_ENTITIES,
    payload: ids
});

export const selectMultipleEntities = (selectedHosts) => ({
    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,
    payload: selectedHosts
});

export const changeSystemsParams = (params) => ({
    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,
    payload: params
});

export const clearSystemStore = () => ({
    type: ActionTypes.CLEAR_SYSTEMS_STORE,
    payload: []
});

export const clearSystemCvesStore = () => ({
    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,
    payload: []
});

export const clearCveStore = () => ({
    type: ActionTypes.CLEAR_CVE_STORE,
    payload: []
});

export const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({
    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,
    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)
});

export const fetchSystemsIds = (apiProps) => ({
    type: ActionTypes.FETCH_SYSTEMS_IDS,
    payload: APIHelper.getSystemsIds(apiProps)
});

export const fetchCvesIds = (apiProps) => ({
    type: ActionTypes.FETCH_CVE_LIST_IDS,
    payload: APIHelper.getCveIdsList(apiProps)
});

export const fetchSystemDetailsIds = (apiProps) => ({
    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,
    payload: APIHelper.getCveIdsBySystem(apiProps)
});

export const clearInventoryStore = () => ({
    type: ActionTypes.CLEAR_INVENTORY_STORE,
    payload: []
});

export const clearCVEsStore = () => ({
    type: ActionTypes.CLEAR_CVES_STORE,
    payload: []
});

export const setGlobalFilter = (filters) => ({
    type: ActionTypes.SET_GLOBAL_FILTER,
    payload: filters
});

export const togglePopup = (page, state) => ({
    type: ActionTypes.TOGGLE_POPUP,
    payload: { page, state }
});
