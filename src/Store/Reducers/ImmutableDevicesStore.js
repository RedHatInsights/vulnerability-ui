import Immutable from 'seamless-immutable';
import * as ActionTypes from '../ActionTypes';
import { applyGlobalFilter } from './reducersHelper';
import { DEFAULT_PAGE_SIZE } from '../../Helpers/constants';

export const initialState = Immutable({
    parameters: {
        page: 1,
        page_size: DEFAULT_PAGE_SIZE,
        sort: '-updated',
        //makes sure only edge devices are shown
        host_type: 'edge'
    },
    devices: {
        isLoading: true,
        payload: {},
        error: {
            hasError: false
        }
    }
});

export const ImmutableDevicesStore = (state = initialState, action) => {
    let newState;

    switch (action.type) {
        case ActionTypes.FETCH_CVE_DEVICES + '_REJECTED':
            newState = state.setIn(['cveDetails', 'error'], { hasError: true, errorCode: action.payload.status });
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;
        case ActionTypes.FETCH_CVE_DEVICES + '_PENDING':
            newState = state.setIn(['cveDetails', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVE_DEVICES + '_FULFILLED':
            newState = state.setIn(['cveDetails', 'payload'], action.payload);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;

        case ActionTypes.CHANGE_EXPOSED_DEVICES_PARAMETERS: {
            const { reset, ...params } = action.payload;

            newState = state.setIn(['parameters'], {
                ...!reset ? state.parameters : {},
                ...params,
                page_size: action.payload.page_size || state.parameters.page_size
            });
            return newState;
        }

        case ActionTypes.SET_GLOBAL_FILTER:
            newState = state.setIn(['parameters'], {
                ...applyGlobalFilter(state.parameters, action.payload)
            });
            return newState;
        case ActionTypes.CLEAR_DEVICES_STORE:
            return initialState;
        default:
            return state;
    }
};

