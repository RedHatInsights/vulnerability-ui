import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';
import  AnsibeTowerIcon  from '@patternfly/react-icons/dist/js/icons/ansibeTower-icon';
import routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';
import globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

class Remediation extends Component {
    static propTypes = {
        cves: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        systems: propTypes.oneOfType([
            propTypes.array,
            propTypes.string
        ]),
        addNotification: propTypes.func
    };

    shouldComponentUpdate(nextProps) {
        if (nextProps.cves !== this.props.cves) {
            return true;
        }

        if (nextProps.systems !== this.props.systems) {
            return true;
        }

        return false;
    }

    remediationProvider = (cves = [], systems = []) => {
        cves = [].concat(cves);
        systems = [].concat(systems);
        return cves.length && systems.length
            ? {
                issues: cves.map(cve => ({
                    id: `vulnerabilities:${cve}`,
                    description: cve
                })),
                systems
            }
            : false;
    };

    render() {
        const { cves, systems, addNotification: dispatchNotification } = this.props;
        return (
            <div>
                <RemediationButton
                    dataProvider={() => this.remediationProvider(cves, systems)}
                    isDisabled={this.remediationProvider(cves, systems) === false}
                    onRemediationCreated={result => dispatchNotification(result.getNotification())}
                >
                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />
                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}
                </RemediationButton>
            </div>
        );
    }
}

export default connect(
    null,
    dispatch => ({
        addNotification: notification => dispatch(addNotification(notification))
    })
)(routerParams(Remediation));
