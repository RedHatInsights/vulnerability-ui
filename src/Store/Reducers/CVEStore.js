import Immutable from 'seamless-immutable';
import * as ActionTypes from '../../Store/ActionTypes';

// Initial State
export const initialState = Immutable({
    affectedSystemsByCVE: {
        isLoading: true,
        payload: [],
        openedRows: []
    },
    cveDetails: {
        isLoading: true,
        payload: {},
        error: false
    }
});

// Reducer
export const CVEReducer = (state = initialState, action) => {
    let newState;
    let openedRows;
    switch (action.type) {
        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:
            newState = state.setIn(['cveDetails', 'error'], action.payload.error);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;
        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':
            newState = state.setIn(['cveDetails', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':
            newState = state.setIn(['cveDetails', 'payload'], action.payload);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':
            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':
            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);
            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);
            return newState;
        case ActionTypes.EXPAND_ROW:
            openedRows = [...state.affectedSystemsByCVE.openedRows];

            if (openedRows.includes(action.payload.id)) {
                openedRows.splice(openedRows.indexOf(action.payload.id), 1);
            } else {
                openedRows = [action.payload.id, ...openedRows];
            }

            newState = state.setIn(['affectedSystemsByCVE', 'openedRows'], openedRows);
            return newState;
        default:
            return state;
    }
};
