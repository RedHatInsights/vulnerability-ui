import React from 'react';
import { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';
import propTypes from 'prop-types';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';

const FilterChips = (props) => {
    const { filterValues, filterCategories, apply } = props;
    const localFilters = { ...filterValues };
    const localFilterCategories = [...filterCategories];

    delete localFilters.show_all;

    const removeFilter = (key, value) => {
        const values = value.split(',');
        const newFilter = {
            [key]: filterValues[key]
            .split(',')
            .filter(item => !values.includes(item))
            .join(',')
        };

        if (newFilter[key].length !== 0) {
            apply({ ...newFilter, page: 1 });
        } else {
            const filter = { ...filterValues, [key]: undefined };
            apply({ ...filter, page: 1 });
        }
    };

    const removeAllFilters = (allowedFilters) => {

        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});

        apply({ ...resetParams, page: 1 });
    };

    const filterIsNotEmpty = (filter) => {
        return filter && (!filter.includes(undefined) && !filter.includes(''));
    };

    const getFilters = () => {
        const filters = localFilterCategories.map(
            ({ urlParam }) => Object.entries(localFilters).find(([key]) => key === urlParam)
        );

        return filters.filter(filter => filterIsNotEmpty(filter));
    };

    const allowedFilters = getFilters();

    return allowedFilters.length > 0 &&
        <React.Fragment>
            <ChipGroup withToolbar>
                {allowedFilters.map(([key, value]) => {
                    const { title, urlParam, values } = localFilterCategories.find(({ urlParam }) => urlParam === key);
                    return (
                        <ChipGroupToolbarItem key={key} categoryName={title}>
                            { value && value.toString().split(',').map(chip => {
                                const mapChip = values.find(({ value }) => value.indexOf(chip) !== -1);
                                let { value, label } = mapChip ? { ...mapChip } : { value: key, label: chip };
                                return (
                                    <Chip key={value} onClick={() => removeFilter(urlParam, chip)}>
                                        { label }
                                    </Chip>
                                );
                            }) }
                        </ChipGroupToolbarItem>
                    );
                }) }
            </ChipGroup>
            <Button variant="link" onClick={() => removeAllFilters(allowedFilters)}>
                <FormattedMessage {...messages.filterChipsClear} />
            </Button>
        </React.Fragment>;
};

FilterChips.propTypes = {
    filterValues: propTypes.object,
    filterCategories: propTypes.array,
    apply: propTypes.func
};

export default FilterChips;
