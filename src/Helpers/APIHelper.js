let BASE_ROUTE = '/api/vulnerability/v1';
import { GitApi } from '@redhat-cloud-services/vulnerabilities-client';
import instance from '../Utilities/interceptors';
import { constructParameters } from './MiscHelper';

let api = new GitApi(undefined, BASE_ROUTE, instance);

export function getCveDetails(synopsis) {
    const result = api.getCveDetails(synopsis);
    return result;
}

export function getSystemDetails(system) {
    const result = api.getSystemDetails(system);
    return result;
}

export function getAffectedSystemsByCVE(synopsis, apiProps) {
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'status_id',
        'data_format',
        'uuid',
        'rule_key',
        'rule_presence',
        'tags',
        'sap_system',
        'security_rule'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);
    return result;
}

export function getSystems(apiProps) {
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'data_format',
        'stale',
        'uuid',
        'tags',
        'sap_system',
        'opt_out'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getSystemsList(...parameterArray);
    return result;
}

export function getCveListByAccount(apiProps) {
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'cvss_from',
        'cvss_to',
        'public_from',
        'public_to',
        'impact',
        'data_format',
        'business_risk_id',
        'status_id',
        'security_rule',
        'rule_presence',
        'show_all'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getCveList(...parameterArray);
    return result;
}

export function optOutSystem(system, status) {
    let result = api.setSystemOptOut(system, status);
    return result;
}

export function getCveListBySystem(apiProps) {
    const { system } = apiProps;
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'cvss_from',
        'cvss_to',
        'public_from',
        'public_to',
        'impact',
        'status_id',
        'data_format',
        'business_risk_id',
        'security_rule',
        'rule_presence'
    ];
    if (apiProps && system) {
        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);
        const params = parameterNames.map(item => apiProps[item]);
        return api.getCveListBySystem(system, ...params).catch(err => {
            if (err && err.status === '404') {
                return { errors: err };
            }

            throw err;
        });
    }
}

export function setSystemCveStatus(params) {
    let result = api.setStatus(params);
    return result;
}

export function optOutSystems(systems, optOut) {
    const data = { opt_out: optOut, inventory_id: new Array(...systems) };
    let result = api.setSystemsOptOut(data);
    return result;
}

export function setBusinessRisk(params) {
    let result = api.setCveBusinessRisk(params);
    return result;
}

export function setCveStatus(params) {
    let result = api.setCveStatus(params);
    return result;
}

export function getExecutiveReport() {
    let result = api.getExecutiveReport();
    return result;
}

export function getAffectedSystemsIdsByCve(synopsis, apiProps) {
    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'status_id',
        'data_format',
        'rule_key',
        'rule_presence',
        'security_rule'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);
    return result;
}

export function getSystemsIds(apiProps) {
    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getSystemsIds(...parameterArray);
    return result;
}

export function getCveIdsList(apiProps) {
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'cvss_from',
        'cvss_to',
        'public_from',
        'public_to',
        'impact',
        'data_format',
        'business_risk_id',
        'status_id',
        'security_rule',
        'rule_presence',
        'show_all'
    ];
    let parameterArray = constructParameters(apiProps, parameterNames);
    let result = api.getCveIdsList(...parameterArray);
    return result;
}

export function getCveIdsBySystem(apiProps) {
    const { system } = apiProps;
    let parameterNames = [
        'filter',
        'limit',
        'offset',
        'page',
        'page_size',
        'sort',
        'cvss_from',
        'cvss_to',
        'public_from',
        'public_to',
        'impact',
        'status_id',
        'data_format',
        'business_risk_id',
        'security_rule',
        'rule_presence'
    ];
    if (apiProps && system) {
        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);
        const params = parameterNames.map(item => apiProps[item]);
        return api.getCveIdsBySystem(system, ...params);
    }
}
