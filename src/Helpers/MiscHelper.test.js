import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';
import { impactList, impactColorList } from './constants';
import { constructParameters, getImpactDetails, handleSortColumn, createSortBy, updateStateSet } from './MiscHelper';

describe('MiscHelper', () => {
    it('constructParameters with apiProps', () => {
        const allowedParams = ['a', 'b', 'c', 'd'];
        const apiProps = { a: '', b: 'b', nope: 'no-way', d: 'd' }; //misses c and has nope extra, and a  is empty string
        const res = constructParameters(apiProps, allowedParams);
        expect(res).toEqual([undefined, 'b', undefined, 'd']);
    });
    it('constructParameters without apiProps', () => {
        const allowedParams = ['a', 'b', 'c', 'd'];
        const res = constructParameters(undefined, allowedParams);
        expect(res).toEqual([]);
    });
    for (let impact of Object.keys(impactList)) {
        it('getImpactDetails with ' + impact + ' impact', () => {
            const expected = {
                title: impactList[impact].title,
                color: impactList[impact].color,
                text: impactList[impact].text,
                titleContent: (
                    <SecurityIcon size="lg" />
                )
            };
            const res = getImpactDetails(impact);
            expect(res).toEqual(expected);
        });
    }
    it('getImpactDetails with no impact', () => {
        const expected = {
            title: 'Unknown',
            color: impactColorList['unknown'],
            text: '',
            titleContent: ( 
                    <UnknownIcon size="lg" />
                )
        };
        const res = getImpactDetails(undefined);
        expect(res).toEqual(expected);
    });

    it('Should sort desc order', () => {
        let key = 0;
        let direction = 'desc';
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]
        const applyMock = jest.fn(filters => { return filters });
        handleSortColumn(key, direction, header, 'public_date', applyMock)
        expect(applyMock).toBeCalledTimes(1)
        expect(applyMock).toHaveReturnedWith({sort: '-impact'})
    })

    it('Should sort asc order', () => {
        let key = 0;
        let direction = 'asc';
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]
        const applyMock = jest.fn(filters => { return filters });
        handleSortColumn(key, direction, header, '-impact', applyMock)
        expect(applyMock).toBeCalledTimes(1)
        expect(applyMock).toHaveReturnedWith({sort: 'impact'})
    })

    it('Should return empty sort object', () => {
        let sort = createSortBy({}, undefined)
        expect(sort).toEqual({})
    })

    it('Should return desc sort object', () => {
        let header = [{title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]

        let sort = createSortBy(header, '-impact')
        expect(sort).toEqual({index: 0, direction: 'desc'})
    })


    it('Should return asc sort object', () => {
        let header = [{title: "first", key: "key", transforms: Array(2), columnTransforms: Array(1)},
        {title: "Impact", key: "impact", transforms: Array(2), columnTransforms: Array(1)}]

        let sort = createSortBy(header, 'impact')
        expect(sort).toEqual({index: 1, direction: 'asc'})
    })

    it('Should add value into the set', () => {
        let mySet = new Set();
        let names = ['name1', 'name2'];

        let expectedSet = new Set()
        expectedSet.add('name1')
        expectedSet.add('name2')
        
        let newSet = updateStateSet(mySet, names, true);
        expect(newSet).toEqual(expectedSet)

    })

    it('Should remove value from the set', () => {
        let names = ['name1', 'name2'];
        let mySet = new Set();
        mySet.add('name1')
        mySet.add('name2')

        let expectedSet = new Set()
        
        let newSet = updateStateSet(mySet, names, false);
        expect(newSet).toEqual(expectedSet)

    })
});
