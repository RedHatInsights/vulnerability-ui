import affectingFilter from './AffectingFilter'

const OPTION_ONE_OR_MORE = "0";
const OPTION_NONE = "1";

describe('affectingFilter', () => {
    const applyMock = jest.fn();

    it('Should use default currentValue (undefined) if none provided', () => {
        let filterComponent = affectingFilter(applyMock)

        expect(filterComponent.filterValues.value).toEqual(undefined)
    });

    it('Should use provided currentValue initially', () => {
        let currentFilter = { affecting: 'false,true' }
        let filterComponent = affectingFilter(applyMock, currentFilter)

        expect(filterComponent.filterValues.value).toStrictEqual([OPTION_NONE])
    });

    it('Should call apply with correct params', () => {
        let filterComponent = affectingFilter(applyMock)

        filterComponent.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ affecting: '', page: 1  })

        filterComponent.filterValues.onChange('event', [OPTION_ONE_OR_MORE])
        expect(applyMock).toBeCalledWith({ affecting: 'true,false', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_NONE])
        expect(applyMock).toBeCalledWith({ affecting: 'false,true', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_ONE_OR_MORE, OPTION_NONE])
        expect(applyMock).toBeCalledWith({ affecting: 'true,true', page: 1 })
    })
})
