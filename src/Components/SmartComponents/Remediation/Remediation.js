import React from 'react';
import propTypes from 'prop-types';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useDispatch } from 'react-redux';
import messages from '../../../Messages';
import { FormattedMessage } from 'react-intl';
import { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';
import { Spinner } from '@patternfly/react-core';
import { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';

const Remediation = ({ cves, systems, manyRules, isDisabled }) => {
    const dispatch = useDispatch();

    const baseIssueTemplate = (cve, system) => ({
        id: `vulnerabilities:${cve}`,
        description: cve,
        systems: [system]
    });

    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {
        let cves = [].concat(cvesProvider);
        let systems = [].concat(systemsProvider);
        let issues = [];

        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N
        if (manyRules && cves.length === 1) {
            let [cve] = cves;
            issues = systems.reduce((prev, { id: systemID, rule }) => {
                let issue = baseIssueTemplate(cve.id, systemID);

                if (rule) {
                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;
                }

                return [...prev, issue];
            }, []);

            issues = mergeObjectPropertyBy(issues, 'systems');
        }

        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1
        if (!manyRules && systems?.length === 1) {
            const [systemID] = systems;

            issues = cves.reduce((acc, { id: cveID, rule }) => {
                let issue = baseIssueTemplate(cveID, systemID);

                if (rule?.rule_id) {
                    issue.id = `${issue.id}:${rule.rule_id}`;
                }

                return [...acc, issue];
            }, []);
        }

        return cves.length && systems.length ? { issues } : false;
    };

    return (
        <AsyncComponent
            appName="remediations"
            module="./RemediationButton"
            fallback={<Spinner size={spinnerSize.lg} />}
            isDisabled={isDisabled}
            dataProvider={() => remediationProvider(cves, systems, manyRules)}
            onRemediationCreated={result => dispatch(addNotification(result.getNotification()))}
        >
            <FormattedMessage {...messages.remediateLabel} />
        </AsyncComponent>
    );
};

Remediation.propTypes = {
    cves: propTypes.oneOfType([
        propTypes.array,
        propTypes.string
    ]),
    systems: propTypes.oneOfType([
        propTypes.array,
        propTypes.string
    ]),
    manyRules: propTypes.bool,
    isDisabled: propTypes.bool
};

export default Remediation;
