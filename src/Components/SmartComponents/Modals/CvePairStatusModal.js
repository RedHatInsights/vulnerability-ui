import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';
import { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React, { useState, useEffect } from 'react';
import { setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {
    const [cveList] = useState(cves);
    const [inventoryList] = useState(inventories);
    const {
        JustificationInput,
        justification,
        setJustification,
        setProps: setJustificationProps
    } = useJustificationInput(getDefaultLabel());
    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());
    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());
    const inventoryIds = inventoryList.map(item => item.id);

    useEffect(() => {
        if (checkboxState) {
            setSelectProps({ isDisabled: true });
            setJustificationProps({ disabled: true });
        }
    }, [checkboxState, setSelectProps, setJustificationProps]);

    useEffect(() => {
        setStatusId(getCvestatus());
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [checkboxState, setStatusId]);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        const setStatusParams = !checkboxState
            ? {
                status_id: parseInt(statusId),
                cve: cveIds,
                status_text: justification,
                inventory_id: inventoryIds
            }
            : { cve: cveIds, inventory_id: inventoryIds };
        return setSystemCveStatus(setStatusParams).then(updateRef);
    };

    function getDefaultStatus() {
        // system has different status
        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {
            return getSystemsStatus();
        }

        if (cveList && cveList.length > 0) {
            return getCvestatus();
        }

    }

    function getDefaultLabel() {
        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {
            return getSystemsJustification();
        }

        if (cveList && cveList.length === 1) {
            return getCveJustification();
        }
    }

    function getDefaultCheckboxState() {
        // system has the same status as cve
        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {
            let [inventory] = inventoryList;
            return cveList.some(cve => (cve.status_id === inventory.status_id));
        }

        if (cveList && cveList.length === 1) {
            return true;
        }

        return false;
    }

    function getSystemsStatus() {
        return (inventoryList && inventoryList[0].status_id.toString()) || '0';
    }

    function getSystemsJustification() {
        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';
    }

    function getCvestatus() {
        switch (type) {
            case 'systemsExposed' : {
                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';
            }

            case 'systemDetail': {
                if (cveList) {
                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}
                    else if (hasDifferentStatus) {return '0';}
                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}
                    else {return '0';}
                } else {return '0';}
            }

            default: {
                return '0';
            }
        }

    }

    function getCveJustification() {
        return (cveList && cveList.length === 1 && cveList[0].justification) || '';
    }

    function handleCheckboxChange(checked) {
        setCheckboxState(checked);
        setSelectProps({ isDisabled: checked });
        setStatusId(getCvestatus());
        setJustification(getCveJustification());
        setJustificationProps({ disabled: checked });
    }

    const successNotification = {
        variant: 'success',
        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)
    };

    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });

    return (
        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>
            <Stack gutter={'md'}>
                {hasDifferentStatus &&
                    <StackItem>
                        <Alert
                            variant="warning"
                            isInline
                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}
                        />
                    </StackItem>
                }
                <StackItem>
                    {intl.formatMessage(
                        messages.cvePairStatusModalSelected,
                        {
                            cveCount: cveList.length || 0,
                            cveId: cveList[0].id, // only used when length is 1
                            systemCount: inventoryList.length || 0,
                            systemName: inventoryIds[0], // only used when length is 1
                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold
                        }
                    )}
                </StackItem>
                <StackItem>
                    <Form key="key">
                        <FormGroup fieldId={'overall'}>
                            <Split>
                                <SplitItem>
                                    <Checkbox
                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}
                                        id="alt-form-checkbox-1"
                                        name="alt-form-checkbox-1"
                                        isChecked={checkboxState}
                                        onChange={handleCheckboxChange}
                                    />
                                </SplitItem>
                                <SplitItem>
                                    <Tooltip
                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}
                                    >
                                        <OutlinedQuestionCircleIcon
                                            className="pf-u-ml-xs"
                                            color="var(--pf-global--Color--200)"
                                            style={{ verticalAlign: '0' }}
                                        />
                                    </Tooltip>
                                </SplitItem>
                            </Split>
                        </FormGroup>
                        {StatusSelect}
                        {JustificationInput}
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CvePairStatusModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func,
    inventories: propTypes.array,
    hasDifferentStatus: propTypes.bool,
    intl: propTypes.any,
    type: propTypes.string
};

export default injectIntl(CvePairStatusModal);
