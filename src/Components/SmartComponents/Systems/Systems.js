import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import * as reactRouterDom from 'react-router-dom';
import * as reactCore from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { useDispatch, useSelector } from 'react-redux';
import * as pfReactTable from '@patternfly/react-table';
import SystemsTableToolbar from './SystemsTableToolbar';
import { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import React, { useEffect, Fragment, useState, useMemo } from 'react';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { changeSystemsParams, selectMultipleEntities, clearSystemStore } from '../../../Store/Actions/Actions';
import { useCreateUrlParams } from '../../../Helpers/MiscHelper';

const selectHosts = ({ data, meta }) => {
    const items = data && data.map(item => {
        const { cve_count: cveCount, ...rest } = item.attributes;
        return {
            cve_count: (meta.opt_out && 'Excluded') || cveCount,
            id: item.attributes.inventory_id,
            ...rest
        };
    });
    return items || [];
};

const SystemsHook = ({ intl }) => {
    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);
    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);
    const [firstMount, setFirstMount] = useState(true);
    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);
    const inventory = React.createRef();
    const dispatch = useDispatch();

    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);

    const parameters = useSelector(
        ({ SystemsStore }) =>SystemsStore.params
    );

    const metadata = useSelector(
        ({ SystemsStore }) => SystemsStore.metadata
    );

    const [selectedHosts, setSelectedHosts] = useState(undefined);

    const isLoading =  useSelector(({ SystemsStore }) => SystemsStore.isLoading);

    const items = useMemo(() => selectHosts(systems), [systems]);

    const loadInventory = async () => {
        const {
            inventoryConnector,
            mergeWithEntities,
            mergeWithDetail
        } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });

        ReducerRegistry.register({
            ...mergeWithEntities(
                inventoryEntitiesReducer(SYSTEMS_HEADER)
            ),
            ...mergeWithDetail()
        });
        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());

        setInventoryTable(() => InventoryTable);
    };

    useEffect(() => {
        loadInventory();

        return () => {
            dispatch(clearSystemStore());
        };
    }, []);

    useEffect(()=>{
        if (selectedHosts) {
            dispatch(selectMultipleEntities(selectedHosts));
        }
    }, [selectedHosts, dispatch]);

    const apply = (config) => {
        dispatch(changeSystemsParams(config));
    };

    //DRY: SystemsExposed page has also the same function
    const inventoryRefresh = (config) => {
        if (metadata.page !== config.page || metadata.limit !== config.per_page) {
            apply(config);
        }

        if (metadata && metadata.total_items <= config.per_page && inventory.current) {
            inventory.current.onRefreshData(config);
        }
    };

    useEffect(() => {
        if (firstMount) {
            apply(urlParameters);
            setFirstMount(false);
        }
        else {
            dispatch(fetchSystems(parameters));
            urlParamsAllowed
                && createUrlParams({ ...parameters })
                || setUrlParamsAllowed(true);
        }
    }, [parameters]);

    const handleSelect = (isChecked, payload) => {
        if (!payload) { payload = []; }

        setSelectedHosts(payload);
    };

    const doOptOut = (systemId = null) => {
        if (selectedHosts && (selectedHosts.length > 0) || systemId) {
            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {
                dispatch(fetchSystems({ ...parameters, page: 1 }));
                parameters.opt_out === false
                    ? dispatch(addNotification({
                        variant: 'success',
                        title: intl.formatMessage(
                            messages.systemsExcludedNotification,
                            { count: systemId ? 1 : selectedHosts.length || 0 }
                        )
                    }))
                    : dispatch(addNotification({
                        variant: 'success',
                        title: intl.formatMessage(
                            messages.systemsResumedNotificationTitle,
                            { count: systemId ? 1 : selectedHosts.length || 0 }
                        ),
                        description: intl.formatMessage(messages.systemsResumedNotificationBody)
                    }));
                setSelectedHosts([]);
            });
        }
    };

    return (
        <Fragment>
            <VulnerabilityHeader showBreadcrumb={false} />
            <Main>
                { InventoryTable &&  (
                    <InventoryTable
                        ref={inventory}
                        items={items}
                        page={metadata && metadata.page || 1 }
                        perPage={metadata && metadata.page_size || 20}
                        total={metadata && metadata.total_items || 0}
                        onRefresh={inventoryRefresh}
                        isLoaded = {!isLoading}
                        hasCheckbox={systems.length !== 0}
                        actions={systemTableRowActions(doOptOut, parameters.optOut)}
                    >
                        {systems.data && (<SystemsTableToolbar
                            parameters = {parameters}
                            systems = {systems}
                            selectedHosts = {selectedHosts || []}
                            methods = {{
                                doOptOut,
                                apply,
                                handleSelect,
                                setSelectedHosts
                            }}
                        />)}
                    </InventoryTable>
                )}
            </Main>
        </Fragment>
    );
};

SystemsHook.propTypes  = {
    intl: propTypes.any
};
export default injectIntl(SystemsHook);
