import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';
import propTypes from 'prop-types';
import React, { useEffect } from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';
import { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import Header from '../../PresentationalComponents/Header/Header';
import { injectIntl } from 'react-intl';
import { PATHS, ReadOnlyNotification } from '../../../Helpers/constants';
import messages from '../../../Messages';

import { AppInfo, DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';

const InventoryDetail = ({ fetchSystemDetails, systemDetails = {}, optOutSystem, match, addNotification, intl, errors }) => {
    const inventoryId = match.params.inventoryId;

    useEffect(() => {
        fetchSystemDetails(inventoryId);
    }, [fetchSystemDetails, inventoryId]);

    const notifications = systemName => ({
        exclude: {
            success: {
                variant: 'success',
                title: intl.formatMessage(messages.notificationExcludeSuccess, { count: 1, systemName })
            },
            failure: {
                variant: 'danger',
                autoDismiss: false,
                title: intl.formatMessage(messages.notificationExcludeFailureTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationDetailExcludeFailureBody, { count: 1 })
            }
        },
        include: {
            success: {
                variant: 'success',
                title: intl.formatMessage(messages.notificationIncludeSuccessTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationIncludeSuccessBody, { count: 1 })
            },
            failure: {
                variant: 'danger',
                autoDismiss: false,
                title: intl.formatMessage(messages.notificationIncludeFailureTitle, { count: 1, systemName }),
                description: intl.formatMessage(messages.notificationDetailIncludeFailureBody, { count: 1 })
            }
        }
    });

    const handleOptOutSystem = toExclude => {
        optOutSystem(inventoryId, toExclude).then(() => {
            const systemName = systemDetails.entity.display_name;

            fetchSystemDetails(inventoryId);
            addNotification(toExclude
                ? notifications(systemName).exclude.success
                : notifications(systemName).include.success);
        }).catch(error => {
            const systemName = systemDetails.entity.display_name;

            addNotification(error.status === '503' ? ReadOnlyNotification : toExclude
                ? notifications(systemName).exclude.failure
                : notifications(systemName).include.failure);
        });
    };

    const { opt_out: isOptOut = false, entity, loaded } = systemDetails;
    return (
        <DetailWrapper>
            <Header
                title=""
                breadcrumbs={[
                    {
                        title: PATHS.systemsPage.title,
                        to: PATHS.systemsPage.to,
                        loaded: true
                    },
                    {
                        title: entity?.display_name || intl.formatMessage(messages.invalidSystem),
                        isActive: true,
                        loaded
                    }
                ]}
            >
                {!errors && (
                    <InventoryDetailHead
                        onLoad={({ mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES }) => {
                            ReducerRegistry.register({
                                ...mergeWithEntities(),
                                ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, handleOptOutSystem))
                            });
                        }}
                        hideBack
                        actions={
                            entity && [
                                isOptOut
                                    ? {
                                        title: intl.formatMessage(messages.inventoryKebabOptionsResume),
                                        onClick: () => handleOptOutSystem(false)
                                    }
                                    : {
                                        title: intl.formatMessage(messages.inventoryKebabOptionsExclude),
                                        onClick: () => handleOptOutSystem(true)
                                    }
                            ]
                        }
                    />
                )}
            </Header>
            <Main>
                <AppInfo optOutSystemHandler={handleOptOutSystem} />
            </Main>
        </DetailWrapper>
    );
};

InventoryDetail.propTypes = {
    fetchSystemDetails: propTypes.func,
    systemDetails: propTypes.object,
    optOutSystem: propTypes.func,
    match: propTypes.object,
    addNotification: propTypes.func,
    intl: propTypes.any,
    errors: propTypes.object
};

function mapStateToProps(state) {
    return {
        errors: state.SystemCvesStore.cveList.payload.errors,
        systemDetails: state.entityDetails
    };
}

const mapDispatchToProps = dispatch => {
    return {
        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),
        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),
        addNotification: notification => dispatch(addNotification(notification))
    };
};

export default withRouter(
    injectIntl(
        connect(
            mapStateToProps,
            mapDispatchToProps
        )(InventoryDetail)
    )
);
