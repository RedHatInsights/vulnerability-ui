import Filters from './Filters'

describe('Filters', () => {
  
    const filterCategories = [
        {
            type: 'radio',
            title: 'Title1 ',
            urlParam: 'radio_urlParam',
            values: [{ value: 'radio_value', label: 'label 1' }]
        }, 
        {
            type: 'checkbox',
            title: 'Title 2 ',
            isChecked: true,    
            urlParam: 'checkbox_urlParam',
            values: [{ value: 'true', label: 'label 2' }]
        }
    ];

    let initialFilters = {'checkbox_urlParam': 'checkbox_value', 'page': 1}
    let filterValues = {...initialFilters };

    const applyMock = jest.fn(filters => { return filters });
    const filters = mount(<Filters apply={applyMock} filterValues={filterValues} filterCategories={filterCategories} />);
    filters.find('button').simulate('click')
    
    it('Should call apply when adding a single filter', () => {
        const radioButton = filters.find('Radio input').first().simulate('change').props()

        const { param, value} = radioButton

        expect(applyMock).toBeCalledWith({
            'page': 1, 
            [param]: value
        })
    })

    it('Should call apply when removing a single filter', () => {
        filters.find('Checkbox input').first().simulate('change');
        expect(applyMock).toHaveReturnedWith(initialFilters)
    })
});
