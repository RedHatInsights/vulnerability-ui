import CVEsTableToolbar from './CVEsTableToolbar';
import { CVETableContext } from './CVEs';
import TestWrapper from '../../../Utilities/TestWrapper';
import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import {
    handleChangePage,
    handleSetPageSize,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';
import { useHybridSystemFilterFlag } from '../../../Helpers/Hooks';
import '@testing-library/jest-dom';
import userEvent from '@testing-library/user-event';

jest.mock('../../../Helpers/TableToolbarHelper', () => ({
    ...(jest.requireActual('../../../Helpers/TableToolbarHelper')),
    handleChangePage: jest.fn(),
    handleSetPageSize: jest.fn(),
    removeFilters: jest.fn()
}));

jest.mock('../../../Store/Actions/Actions', () => ({
    ...jest.requireActual('../../../Store/Actions/Actions'),
    fetchCvesIds: () => ({
        type: 'FETCH_CVE_LIST_IDS',
        payload: new Promise(() => {})
    }) }
));

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useHybridSystemFilterFlag: jest.fn(() => false)
}));

const mockContext = {
    cves: {
        isLoading: false,
        meta: {
            test: 'test'
        },
        data: [
            {
                type: 'cve',
                id: 'CVE-2019-6454',
                exposed_systems_count: 1,
                business_risk_id: 0,
                business_risk_justification: null,
                status_id: 2,
                status_justification: "testhello",
                attributes: {
                    business_risk: "Not Defined",
                    business_risk_id: 0,
                    business_risk_text: null,
                    cve_status_id: 2,
                    cve_status_text: "testhello",
                    cvss2_score: null,
                    cvss3_score: "6.500",
                    description: "A new domain bypass",
                    impact: "Moderate",
                    public_date: "2020-06-09T17:00:00+00:00",
                    reporter: 1,
                    rule: null,
                    status: "On-Hold",
                    status_id: 2,
                    status_text: "testhello",
                    synopsis: "CVE-2020-0543",
                    affected_systems: 1,
                    rule: 'testRule'
                }
            }
        ]

    },
    params: {},
    selectedCves: [
        {
            attributes: {
                business_risk: 'Not Defined',
                business_risk_id: 0,
                business_risk_text: null,
                cvss2_score: null,
                cvss3_score: '8.600',
                description: 'There\'s a flaw in libxml2. An attacker who is able to submit a crafted file to be processed by an application linked with libxml2 could trigger a use-after-free. The greatest impact from this flaw is to confidentiality, integrity, and availability.',
                impact: 'Moderate',
                known_exploit: false,
                public_date: '2021-04-22T00:00:00+00:00',
                rules: [],
                status: 'Resolved',
                status_id: 2,
                status_text: null,
                synopsis: 'CVE-2019-6454',
                systems_affected: 497,
                systems_status_divergent: 497,
                status_justification: 'testhello',
                exposed_systems_count: 1,
                business_risk_justification: null
            },
            id: 'CVE-2019-6454',
            type: 'cve'
        }
    ],
    expandedRows: [],
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showBusinessRiskModal: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn()
    }
};

const props = {
    canEditStatusOrBusinessRisk: true,
    canExport: true
}

const user = userEvent.setup();

const renderWithContext = (testContext = {}, testProps = {}) => {
    return render(
        <TestWrapper>
            <CVETableContext.Provider value={{ ...mockContext, ...testContext} }>
                <CVEsTableToolbar {...{ ...props, ...testProps }} />
            </CVETableContext.Provider>
        </TestWrapper>
    );
}

describe('CVEsTableToolbar', () => {
    it('Should render snapshot in a state without errors', () => {
        const { asFragment } = renderWithContext()
        expect(asFragment()).toMatchSnapshot();
    });

    it.skip('Should CVEsTableToolbarWithContext inherit default props', () => {
        renderWithContext({ methods: {} });

        const { totalNumber, apply, downloadReport } = tempWrapper.find('CVEsTableToolbarWithContext').props();
        expect(totalNumber).toEqual(0);
        expect(apply()).toEqual(undefined);
        expect(downloadReport()).toEqual(undefined);
        tempWrapper.unmount();
        tempContext = {};
    });

    describe('actionsConfig:', () => {
        it('Should showStatusModal be called with item ID and status_id = 0', () => {
            renderWithContext();

            fireEvent.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: 'Edit status' }));
            expect(mockContext.methods.showStatusModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "status_id": 2, "justification": null, "exposed_systems_count": 497 }], true);
        });

        it('Should showBusinessRiskModal be called with item ID and business_risk_id = 0', () => {
            renderWithContext();

            fireEvent.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: 'Edit business risk' }));
            expect(mockContext.methods.showBusinessRiskModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "business_risk_id": 0, "justification": null }], true);
        });
    });

    describe('pagination:', () => {
        it('Should call handlePageChange on page change', () => {
            renderWithContext({ 
                selectedCves: ['CVE-2019-6454'], 
                cves: { meta: { total_items: 45 }} }
            );

            fireEvent.click(screen.getByRole('button', { name: 'Go to next page' }));
            expect(handleChangePage).toHaveBeenCalledWith(expect.anything(), 2, expect.any(Function));
        });

        it('Should call handleSetPageSize on page size change', () => {
            renderWithContext({ 
                selectedCves: ['CVE-2019-6454'],
                cves: { meta: { total_items: 45 }} 
            });

            fireEvent.click(screen.getByRole('button', {
                name: /1 \- 20 of 45/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: '10 per page' }));
            expect(handleSetPageSize).toHaveBeenCalledWith(expect.anything(), 10, expect.any(Function));
        });
    });

    describe('bulkSelect:', () => {
        it('Should handleOnCheckboxChange unselect all selected items', () => {
            renderWithContext({ selectedCves: ['CVE-2019-6454'] });

            fireEvent.click(screen.getByRole('checkbox', { name: 'Select all' }));
            expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, []);
        });

        it('Should handleOnCheckboxChange select all items', () => {
            renderWithContext({ selectedCves: [] });

            fireEvent.click(screen.getByRole('checkbox', { name: 'Select all' }));
            expect(mockContext.methods.selectCves).toHaveBeenCalled();
        });
    });

    describe('activeFiltersConfig:', () => {
        it('Should call Reset filters', () => {
            renderWithContext({ selectedCves: ['CVE-2019-6454'] });

            fireEvent.click(screen.getByRole('button', { name: 'Reset filters' }));
            expect(removeFilters).toHaveBeenCalledWith([], expect.any(Function), true, { "affecting": "true" });
        });

        it('Should hide edge related filters when edge flag is off', () => {
            renderWithContext({ selectedCves: ['CVE-2019-6454'] });

            fireEvent.click(screen.getByRole('button', {
                name: /conditional filter toggle/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: 'Systems' }));
            fireEvent.click(screen.getByRole('button', { name: 'Options menu' }));

            expect(screen.getByText(/1 or more/i)).toBeInTheDocument();
            expect(screen.queryByText(/1 or more conventional \(rpm\-dnf\)/i)).toBeFalsy();
            expect(screen.queryByText(/1 or more immutable \(ostree\)/i)).toBeFalsy();
        });

        it('Should show edge related filters when edge flag is on', () => {
            useHybridSystemFilterFlag.mockReturnValue(true);
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            renderWithContext(testContext);

            fireEvent.click(screen.getByRole('button', {
                name: /conditional filter toggle/i
            }));
            fireEvent.click(screen.getByRole('menuitem', { name: 'Systems' }));
            fireEvent.click(screen.getByRole('button', { name: 'Options menu' }));
            
            expect(screen.getByText(/1 or more conventional \(rpm\-dnf\)/i)).toBeInTheDocument();
            expect(screen.getByText(/1 or more immutable \(ostree\)/i)).toBeInTheDocument();
        });
    });

    describe('CVEs without errata disabled', () => {
        it('Should hide Advisory filter and and enable showing CVEs without errata', async () => {
            renderWithContext(
                { cves: { meta: { cves_without_errata: false } } },
                { canToggleCvesWithoutErrata: true }
            );

            user.click(screen.getByRole('button', { name: 'Conditional filter toggle' }));
            expect(screen.queryByRole('menuitem', {
                name: /^Advisory$/i
            }))
            .not.toBeInTheDocument();

            user.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            await waitFor( () => expect(
                screen.getByRole('menuitem', { name: 'Show CVEs without Advisories' })
            ).toBeInTheDocument());
        });
    });

    describe('CVEs without errate enabled', () => {
        it('Should show Advisory filter and enable hiding CVEs without errata', async () => {
            renderWithContext(
                { cves: { meta: { cves_without_errata: true } } },
                { canToggleCvesWithoutErrata: true }
            );
   

             user.click(
                screen.getByRole('button', { name: 'Conditional filter toggle' })
            );
            await waitFor( () => expect(screen.queryByRole('menuitem', {
                    name: /^Advisory$/i
                }))
                .toBeInTheDocument()
            );

            user.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            await waitFor(() => expect(
                    screen.getByRole('menuitem', { name: 'Hide CVEs without Advisories' })
                ).toBeInTheDocument()
            );
        });
    });

    describe('Can not toggle CVES without errate API flag', () => {
        it('Should show CVE without  API flag from toolbar action', async () => {
            renderWithContext(
                { cves: { meta: { cves_without_errata: true } } },
                { canToggleCvesWithoutErrata: false }
            );
   
            user.click(screen.getByRole('button', {
                name: /kebab dropdown toggle/i
            }));
            await waitFor(() => expect(
                    screen.queryByRole('menuitem', { name: 'Hide CVEs without Advisories' })
                ).not.toBeInTheDocument()
            );
            await waitFor(() => expect(
                    screen.queryByRole('menuitem', { name: 'Show CVEs without Advisories' })
                ).not.toBeInTheDocument()
            );
        });
    });
});
