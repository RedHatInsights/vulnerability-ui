
import React, { Fragment } from 'react';
import propTypes from 'prop-types';
import { DateFormat } from '@redhat-cloud-services/frontend-components';
import { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';
import {
    DownloadButton,
    Section,
    Column,
    Table,
    Panel,
    PanelItem,
    Chart
} from '@redhat-cloud-services/frontend-components-pdf-generator';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

const ExecutiveReport = ({ data, label, intl }) => {

    const {
        cves_by_severity: cvesBySeverity,
        recent_cves: recentCves,
        top_cves: topCves,
        cves_total: cvesTotal,
        system_count: systemTotal
    } = data;

    const mapFields = (fields, data, percentageInfo = false) => {
        let arr = [];

        for (const field in fields) {

            let { [field]: label } = fields;
            let { [field]: fieldData } = data;

            let value = fieldData.count ? fieldData.count : fieldData;

            if (percentageInfo && fieldData.percentage) {
                value = intl.formatMessage(messages.executiveReportOfTotal, { count: value, percentage: fieldData.percentage });
            }

            arr.push([label, value.toString()]);
        }

        return arr;
    };

    const title = [
        intl.formatMessage(messages.executiveReportDocTitle),
        { title: systemTotal + intl.formatMessage(messages.executiveReportRHELSystems), fontWeight: 700 },
        intl.formatMessage(messages.executiveReportHasIdentified),
        { title: cvesTotal + intl.formatMessage(messages.executiveReportCves), fontWeight: 700 },
        intl.formatMessage(messages.executiveReportCvesImpacting)
    ];

    const recentCvesData = mapFields(
        recentCvesMapping,
        {
            ...recentCves
        }
    );
    const CVSSDataMap = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        }
    );

    const CVSSChart = CVSSDataMap.map((severity) => {
        let [x, y] = severity;
        return { x: `CVSS ${x}`, y: Number(y) };
    });

    const CVSSData = mapFields(
        CVSSMapping,
        {
            ...cvesBySeverity
        },
        true
    );

    // eslint-disable-next-line new-cap
    const date = DateFormat({ date: new Date(), type: 'exact' }).props.children;

    return (
        <DownloadButton
            className="download-executive-report"
            label={label}
            fileName={`Vulnerability-Executive-Report--${date.replace(/ /g, '-')}.pdf`}
            type={intl.formatMessage(messages.vulnerabilitiesHeader)}
            title={title}
            pages={[
                <Fragment key="first-section">
                    <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>

                        <Column>
                            <Table
                                withHeader
                                rows={[CVSSHeader, ...CVSSData]}
                            />
                        </Column>
                        <Column>
                            <Chart
                                chartType="pie"
                                subTitle="Cves"
                                title="100"
                                data={CVSSChart}
                            />
                        </Column>
                    </Section>
                    <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>
                        <Column>
                            <Table
                                withHeader
                                rows={[recentCvesHeader, ...recentCvesData]}
                            />
                        </Column>
                        <Column>
                        </Column>
                    </Section>
                    <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>
                        {topCves.map(cve => (
                            <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>
                                <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>
                                    {Number.parseFloat(cve.cvss3_score).toFixed(1)}
                                </PanelItem>
                                <PanelItem title={intl.formatMessage(messages.systemsExposed)}>
                                    {cve.systems_affected.toString()}
                                </PanelItem>
                            </Panel>
                        ))}
                    </Section>
                </Fragment>
            ]} />
    );
};

ExecutiveReport.propTypes = {
    data: propTypes.object,
    label: propTypes.object,
    triggerClick: propTypes.func,
    intl: propTypes.any
};

export default injectIntl(ExecutiveReport);
