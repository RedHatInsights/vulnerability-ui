import React from 'react';
import './SystemsExposedTable.scss';
import { Table, Pagination, Ansible, routerParams } from '@red-hat-insights/insights-frontend-components';
import { connect } from 'react-redux';
import { fetchCVEsWithSystems } from '../../../Store/Actions/CVEActions';
import { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';
import propTypes from 'prop-types';
import { Grid, GridItem, Button, Badge, Alert } from '@patternfly/react-core';
import WithLoader from '../../PresentationalComponents/WithLoader/WithLoader';

class SystemsExposedTable extends React.Component {
    constructor(props) {
        super(props);
        this.checkItem = this.checkItem.bind(this);
        this.state = {
            systemList: []
        };
    }

    static getDerivedStateFromProps(props) {
        return { systemList: props.cveTableRows };
    }

    componentDidMount() {
        this.props.fetchData();
    }

    getSelectedCount() {
        let selected = this.state.systemList.filter(item => item.selected === true);
        return selected.length;
    }

    checkItem(key, value) {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    }
    handleRedirect(key) {
        this.props.history.push('/vulnerabilities/cves/' + this.props.cveTableRows[key].synopsis);
    }
    render() {
        return (
            <React.Fragment>
                <Grid gutter="sm">
                    <WithLoader isLoading={this.props.cve.isLoading}>
                        <GridItem span={12}>
                            <Alert
                                variant={this.state.systemList.length === 0 ? 'success' : 'warning'}
                                title={'Number of affected systems: ' + this.state.systemList.length}
                            />
                        </GridItem>
                        <GridItem span={12} style={this.state.systemList.length === 0 ? { display: 'none' } : {}}>
                            <Pagination
                                numberOfItems={this.props.cveTableRows ? this.props.cveTableRows.length : 1}
                                itemsPerPage={50}
                            />
                            <Table
                                className="systems-exposed-table"
                                header={['Type', 'Name', '']}
                                rows={this.state.systemList}
                                hasCheckbox={true}
                                onItemSelect={(event, key, value) => this.checkItem(key, value)}
                            />
                        </GridItem>
                        <GridItem style={this.state.systemList.length === 0 ? { display: 'none' } : {}}>
                            <Grid gutter="sm">
                                <GridItem span={9}>
                                    Systems selected: <Badge isRead={true}>{this.getSelectedCount()}</Badge>
                                </GridItem>
                                <GridItem span={3}>
                                    <Grid gutter="sm">
                                        <GridItem span={6}>
                                            <a download href="../common/AnsiblePlaybook.yml">
                                                <Button
                                                    className={'actionButtons'}
                                                    variant="secondary"
                                                    isDisabled={this.getSelectedCount() === 0}
                                                >
                                                    <Ansible style={{ paddingTop: '3px' }} />
                                                    <span className="icon-label">Generate Playbook</span>
                                                </Button>
                                            </a>
                                        </GridItem>
                                        <GridItem span={6}>
                                            <Button
                                                className={'actionButtons'}
                                                variant="secondary"
                                                isDisabled={this.getSelectedCount() === 0}
                                            >
                                                Add to plan
                                            </Button>
                                        </GridItem>
                                    </Grid>
                                </GridItem>
                            </Grid>
                        </GridItem>
                    </WithLoader>
                </Grid>
            </React.Fragment>
        );
    }
}
function mapStateToProps(state) {
    return {
        cve: state.CVEStore.cveListWithSystems,
        cveTableRows: sExposedSystemsTable(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatch(fetchCVEsWithSystems())
    };
};

SystemsExposedTable.propTypes = {
    history: propTypes.object,
    cveTableRows: propTypes.array,
    fetchData: propTypes.func,
    cve: propTypes.object
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemsExposedTable)
);
