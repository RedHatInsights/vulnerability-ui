import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React, { Component } from 'react';

class SelectAllCheckbox extends Component {
    static propTypes = {
        selectedItems: propTypes.number,
        selectorHandler: propTypes.func,
        fetchResource: propTypes.func,
        items: propTypes.object,
        multiRow: propTypes.bool
    };

    constructor(props) {
        super(props);
        this.state = {
            isOpen: false
        };
    }

    shouldComponentUpdate(nextProps, nextState) {
        if (nextState.isOpen !== this.state.isOpen || nextProps.selectedItems !== this.props.selectedItems) {
            return true;
        }

        return false;
    }

    handleOnToggle = isOpen => {
        this.setState({
            isOpen
        });
    };

    handleOnSelect = () => {
        this.setState({
            isOpen: !this.state.isOpen
        });
    };

    handleSelectPage = () => {
        const {
            items: { data },
            selectorHandler
        } = this.props;
        const cveNames = data.filter(item => item.id).map(cve => cve.id);
        selectorHandler(true, cveNames);
    };

    handleSelectAll = () => {
        const {
            items: { meta },
            selectorHandler,
            fetchResource
        } = this.props;
        // eslint-disable-next-line camelcase
        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });
        payload &&
            payload.then(({ data: response }) => {
                const cveNames = response.map(cve => cve.id);
                selectorHandler(true, cveNames);
            });
    };

    handleUnselectAll = () => {
        const { selectorHandler } = this.props;
        selectorHandler(false, undefined);
    };

    handleOnCheckboxChange = () => {
        const { selectedItems } = this.props;
        if (selectedItems === 0) {
            this.handleSelectAll();
        } else {
            this.handleUnselectAll();
        }
    };

    render() {
        const { selectedItems, items, multiRow } = this.props;
        const { meta, data } = items;
        const { isOpen } = this.state;
        const checkboxlabel = Boolean(selectedItems) && `${selectedItems} selected`;
        const selectPageNumber = multiRow ? data.length / 2 : data.length;
        const itemLabel = number => (number > 1 && 'items') || 'item';

        const dropdownItems = [
            <DropdownItem key="none" onClick={this.handleUnselectAll}>
                Select none (0 items)
            </DropdownItem>,
            <DropdownItem key="page" onClick={this.handleSelectPage}>
                Select page ({selectPageNumber} {itemLabel(selectPageNumber)})
            </DropdownItem>,
            <DropdownItem key="all" onClick={this.handleSelectAll}>
                Select all ({meta.total_items} {itemLabel(meta.total_items)})
            </DropdownItem>
        ];
        return (
            <Dropdown
                onSelect={this.handleOnSelect}
                toggle={
                    <DropdownToggle
                        splitButtonItems={[
                            <Checkbox
                                key={'selectAllcheckbox'}
                                isChecked={meta.total_items === selectedItems ? true : selectedItems === 0 ? false : null}
                                onChange={this.handleOnCheckboxChange}
                            />,
                            checkboxlabel
                        ]}
                        onToggle={this.handleOnToggle}
                    />
                }
                isOpen={isOpen}
                dropdownItems={dropdownItems}
            />
        );
    }
}

export default SelectAllCheckbox;
