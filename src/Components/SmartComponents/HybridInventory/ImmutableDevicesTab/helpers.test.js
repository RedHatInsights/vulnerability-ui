import { useOnLoad, mergeAppColumns } from "./helpers";
import { renderHook } from '@testing-library/react';
import { getSystemsExposedHeader } from '../../../../Helpers/constants';

jest.mock('../../../../Utilities/ReducerRegistry', () => ({
    __esModule: true,
    ...jest.requireActual('../../../../Utilities/ReducerRegistry'),
    default: { register: jest.fn(() => {}) }
}));

jest.mock('../../../../Store/Reducers/InventoryEntitiesReducer', () => ({
    ...jest.requireActual('../../../../Store/Reducers/InventoryEntitiesReducer'),
    inventoryEntitiesReducer: jest.fn(() => ['test-reducers'])
}));

const parameters = { sort: '-inventory_group'}
const mergeWithEntities = jest.fn();

describe('useOnLoad', () => {
    it('Should change "inventory_group" sort key to "group_name" from parameters.', () => {
        const { result } = renderHook(() => useOnLoad(parameters));

        result.current({ mergeWithEntities });
    
        expect(mergeWithEntities).toHaveBeenCalledWith(
            ['test-reducers'], 
            {
                page: 1, 
                perPage: 20, 
                sortBy: {
                    direction: "desc",
                    key: "group_name",
                },
            }
        );
    });
});

const defaultColumns = [
    { key: 'updated', renderFunc: jest.fn() },
    { key: 'system_profile', props: { width: 15 } },
    { key: 'groups', props: { width: 15 } },
  ];
  
  describe('mergeAppColumns', () => {
    test('Should replace default OS column to vulnerabilty OS column', () => {
      const result = mergeAppColumns(defaultColumns);
  
      const osColumn = result.find(
        (column) => column.key === 'os'
      );
      expect(osColumn).toEqual(getSystemsExposedHeader().find((column) => column.key === 'os'));
    });
    test('Should disable sorting when edge groups are enforced  by extending incoming column props from default columns', () => {
        const enforce_edge_groups = true;
        const result = mergeAppColumns(defaultColumns, enforce_edge_groups);
    
        const groupsColumn = result.find(
          (column) => column.key === 'groups'
        );
        expect(groupsColumn).toEqual(expect.objectContaining({ props: { width: 15, isStatic: true } }));
    });
    test('Should enable sorting by default by extending incoming column props from default columns', () => {
        const result = mergeAppColumns(defaultColumns);
    
        const groupsColumn = result.find(
          (column) => column.key === 'groups'
        );
        expect(groupsColumn).toEqual(expect.objectContaining({ props: { width: 15, isStatic: false } }));
    });
    test('Should add advisory column  to default columns', () => {
      const result = mergeAppColumns(defaultColumns);
  
      const advisories_list = result.find(
        (column) => column.key === 'advisories_list'
      );

      expect(advisories_list.toString()).toStrictEqual(
        getSystemsExposedHeader().find((column) => column.key === 'advisories_list').toString()
      );
    });
});