import React, { useMemo, useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Stack, StackItem } from '@patternfly/react-core';
import { CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';
import { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';
import { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import StatusModal from '../Modals/CveStatusModal';
import CVEsTable from './CVEsTable';
import CVEsTableToolbar from './CVEsTableToolbar';
import DownloadReport from '../../../Helpers/DownloadReport';
import {
    changeCveListParameters,
    fetchCveListByAccount,
    selectCve,
    expandCve,
    clearCVEsStore,
    changeColumnsCveList
} from '../../../Store/Actions/Actions';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import ColumnManagementModal from '../Modals/ColumnManagementModal';

export const CVETableContext = React.createContext({});

export const CVEs = () => {
    const dispatch = useDispatch();
    const [CveStatusModal, setStatusModal] = useState(() => () => null);
    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);
    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);
    const [isFirstLoad, setIsFirstLoad] = useState(true);

    const [isColumnModalOpen, setColumnModalOpen] = useState(false);

    const cveList = useSelector(
        ({ CVEsStore }) => CVEsStore.cveList
    );
    const parameters = useSelector(
        ({ CVEsStore }) => CVEsStore.parameters
    );
    const columns = useSelector(
        ({ CVEsStore }) => CVEsStore.columns
    );
    const selectedCves = useSelector(
        ({ CVEsStore }) => CVEsStore.selectedCves
    );
    const selectedRowsRawData = useSelector(
        ({ CVEsStore }) => CVEsStore.selectedRowsRawData
    );
    const expandedRows = useSelector(
        ({ CVEsStore }) => CVEsStore.expandedRows
    );
    const isAllExpanded = useSelector(
        ({ CVEsStore }) => CVEsStore.isAllExpanded
    );

    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);
    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);

    const apply = (filterParams = {}) => {
        const params = constructFilterParameters(filterParams);
        dispatch(changeCveListParameters(params));
    };

    useEffect(() => {
        if (isFirstLoad) {
            apply(urlParameters);
            setIsFirstLoad(false);
        }
        else {
            dispatch(fetchCveListByAccount(parameters));
            urlParamsAllowed
                && setUrlParam({ ...parameters })
                || setUrlParamsAllowed(true);
        }
    }, [parameters]);

    useEffect(() => {
        return () => {
            dispatch(clearCVEsStore());
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const handleCveSelect = (isSelected, cveNames) => {
        dispatch(selectCve(cveNames || []));
    };

    const downloadReport = format => {
        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(
            addNotification(notification)), () => dispatch(clearNotifications()));
    };

    const showBusinessRiskModal = (cvesList, goToFirstPage) => {
        const { meta } = cves;
        setBusinessRiskModal(() => () =>
            <BusinessRiskModal
                cves={cvesList}
                updateRef={() => {
                    dispatch(clearCVEsStore());
                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);
                }}
            />
        );
    };

    const showStatusModal = (cvesList, goToFirstPage) => {
        const { meta } = cves;
        setStatusModal(() => () =>
            <StatusModal
                cves={cvesList}
                updateRef={() => {
                    dispatch(clearCVEsStore());
                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);
                }}
            />
        );
    };

    const openCves = (cves) => {
        dispatch(expandCve(cves));
    };

    if (!cves.errors) {
        return (
            <CVETableContext.Provider
                value={{
                    cves,
                    selectedRowsRawData,
                    params: parameters,
                    selectedCves,
                    expandedRows,
                    isAllExpanded,
                    methods: {
                        apply,
                        downloadReport,
                        selectCves: handleCveSelect,
                        showBusinessRiskModal,
                        showStatusModal,
                        openCves,
                        setColumnModalOpen
                    }
                }}
            >
                <CveBusinessRiskModal />
                <CveStatusModal />
                <ColumnManagementModal
                    appliedColumns={columns}
                    applyColumns={newColumns => dispatch(changeColumnsCveList(newColumns))}
                    isModalOpen={isColumnModalOpen}
                    setModalOpen={setColumnModalOpen}
                />

                <Stack>
                    <StackItem>
                        <CVEsTableToolbar />
                    </StackItem>
                    <StackItem>
                        <CVEsTable header={columns.filter(column => column.isShown)} />
                    </StackItem>
                </Stack>
            </CVETableContext.Provider>
        );
    } else {
        return <ErrorHandler code={parseInt(cves.errors.status)} />;
    }

};

export default CVEs;
