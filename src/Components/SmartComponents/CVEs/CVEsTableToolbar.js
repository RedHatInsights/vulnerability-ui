/* eslint-disable camelcase */
import React, { useEffect, useState } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './CVEs';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';
import { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';
import DownloadCVEsReport from '../Reports/DownloadCVEsReport';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters,
    isFilterInDefaultState
} from '../../../Helpers/TableToolbarHelper';
import {
    CVES_FILTER_PARAMS,
    DEFAULT_PAGE_SIZE,
    ONLY_NON_VULNERABLE_SYSTEMS,
    RULE_PRESENCE_OPTIONS
} from '../../../Helpers/constants';
import { fetchCvesIds } from '../../../Store/Actions/Actions';
import { setCvesWithoutErrata } from '../../../Helpers/APIHelper';
import { getCveDefaultFilters } from './CVEsAssets';
import { useHybridSystemFilterFlag } from '../../../Helpers/Hooks';

const CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, canToggleCvesWithoutErrata, intl }) => {
    const [exportPDF, setExportPDF] = useState(false);

    const { cves, params, methods, selectedCves } = context;
    const { isLoading } = cves;

    const { filter } = params;
    const selectedCvesCount = selectedCves && selectedCves.length;

    const [showCvesWithoutErrata, setShowCvesWithoutErrata] = useState(null);
    const shouldUseHybridSystemFilter = useHybridSystemFilterFlag();

    useEffect(() => {
        if (!isLoading) {
            // if the API response feature flag value differs currently saved one
            if (showCvesWithoutErrata !== cves?.meta?.cves_without_errata) {
                if (cves?.meta?.cves_without_errata === true) {
                    if (!params.advisory_available) {
                        methods.apply({ advisory_available: 'true' });
                    }
                }
                else {
                    if (params.advisory_available) {
                        methods.apply({ advisory_available: undefined });
                    }
                }
            }

            setShowCvesWithoutErrata(cves?.meta?.cves_without_errata);
        }
    }, [cves?.meta?.cves_without_errata, isLoading]);

    const defaultFilters = {
        ...getCveDefaultFilters(shouldUseHybridSystemFilter),
        ...cves?.meta?.cves_without_errata ? { advisory_available: 'true' } : {}
    };

    const selectOptions = selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => fetchCvesIds({ ...params, ...ops }, shouldUseHybridSystemFilter),
        multiRow: true
    });

    const actions = [
        '', // #NOTE empty intentionally, Remediation holder
        ...canEditStatusOrBusinessRisk ? [
            {
                label: intl.formatMessage(messages.editBusinessRisk),
                onClick: () => methods.showBusinessRiskModal(selectedCves.map(({
                    id,
                    business_risk_id,
                    business_risk_text,
                    attributes
                }) => ({
                    id,
                    business_risk_id: attributes ? attributes.business_risk_id : business_risk_id,
                    justification: attributes ? attributes.business_risk_text : business_risk_text
                })), true),
                props: { isDisabled: !selectedCvesCount }
            },
            {
                label: intl.formatMessage(messages.editStatus),
                onClick: () => methods.showStatusModal(selectedCves.map(({
                    id,
                    exposed_systems_count,
                    status_justification,
                    status_id,
                    attributes
                }) => ({
                    id,
                    exposed_systems_count: attributes ? attributes.systems_affected : exposed_systems_count,
                    justification: attributes ? attributes.status_text : status_justification,
                    status_id: attributes ? attributes.status_id : status_id
                }), []), true),
                props: { isDisabled: !selectedCvesCount }
            }
        ] : [],
        {
            label: intl.formatMessage(messages.columnManagementModalTitle),
            onClick: () => methods.setColumnManagementModalOpen(true)
        },
        ...canToggleCvesWithoutErrata && showCvesWithoutErrata !== null ? [(
            showCvesWithoutErrata ?
                {
                    label: intl.formatMessage(messages.hideCvesWithoutAdvisories),
                    onClick: () => setCvesWithoutErrata(false)
                        .then(() => methods.apply({ page: 1, advisory_available: undefined }))
                } :
                {
                    label: intl.formatMessage(messages.showCvesWithoutAdvisories),
                    onClick: () => setCvesWithoutErrata(true)
                        .then(() => methods.apply({ page: 1 }))
                }
        )] : []
    ];

    const canSelect = canEditStatusOrBusinessRisk;

    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    isDisabled: cves.meta.total_items === 0,
                    itemCount: cves.meta.total_items || 0,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || DEFAULT_PAGE_SIZE,
                    ouiaId: 'pagination-top',
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions,
                    dropdownProps: { ouiaId: 'toolbar-actions' }
                }}
                bulkSelect={canSelect ? {
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                    checked: Boolean(selectedCvesCount),
                    ouiaId: 'bulk-select',
                    onSelect: selectOptions.handleOnCheckboxChange
                } : undefined}
                filterConfig={{
                    items: [
                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),
                        securityRuleFilter(methods.apply, params, [],
                            {
                                isDynamic: false,
                                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)
                            }
                        ),
                        knownExploitFilter(methods.apply, params),
                        impactFilter(methods.apply, params),
                        useCvssBaseScoreFilter(methods.apply, params),
                        businessRiskFilter(methods.apply, params),
                        affectingFilter(methods.apply, params, shouldUseHybridSystemFilter),
                        publishDateFilter(methods.apply, params),
                        statusFilter(methods.apply, params),
                        ...showCvesWithoutErrata ? [advisoryAvailabilityFilter(methods.apply, params)] : []
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(params, [], shouldUseHybridSystemFilter),
                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, defaultFilters),
                    deleteTitle: intl.formatMessage(messages.resetFilters),
                    showDeleteButton: !isFilterInDefaultState(params, defaultFilters, CVES_FILTER_PARAMS)
                }}
                exportConfig={canExport && {
                    isDisabled: cves.meta.total_items === 0,
                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],
                    ouiaId: 'export',
                    ...exportConfig(methods)
                }}
            />
            {exportPDF &&
                <DownloadCVEsReport
                    showButton={false}
                    params={params}
                    filters={buildActiveFilters(
                        { ...params, affecting: shouldUseHybridSystemFilter ? 'rpmdnf,edge' : 'true' },
                        [],
                        shouldUseHybridSystemFilter
                    )}
                    onSuccess={() => setExportPDF(false)}
                    shouldUseHybridSystemFilter={shouldUseHybridSystemFilter}
                />
            }

        </React.Fragment>
    );
};

CVEsTableToolbarWithContext.propTypes = {
    context: propTypes.object,
    intl: propTypes.object,
    canEditStatusOrBusinessRisk: propTypes.bool,
    canExport: propTypes.bool,
    canToggleCvesWithoutErrata: propTypes.bool
};

CVEsTableToolbarWithContext.defaultProps = {
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

const CVEsTableToolbar = props => (
    <CVETableContext.Consumer>
        {context => <CVEsTableToolbarWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default injectIntl(CVEsTableToolbar);
