import * as APIHelper from '../../Helpers/APIHelper';
import * as HeaderHelper from '../../Helpers/HeaderHelper';
import ReducerRegistry from '../../Utilities/ReducerRegistry';
import * as ActionTypes from '../ActionTypes';
import { BreadcrumbStore } from '../Reducers/BreadcrumbStore';
import { CVEReducer } from '../Reducers/CVEStore';
import { SystemCvesStore } from '../Reducers/SystemCvesStore';
import { SystemsReducer } from '../Reducers/SystemsStore';
import { VulnerabilitiesStore } from '../Reducers/VulnerabilitiesStore';
import { InsightsRuleStore } from '../Reducers/InsightsRuleStore';

ReducerRegistry.register({ CVEStore: CVEReducer });
ReducerRegistry.register({ VulnerabilitiesStore });
ReducerRegistry.register({ InsightsRuleStore });
ReducerRegistry.register({ SystemsStore: SystemsReducer });
ReducerRegistry.register({ BreadcrumbStore });
ReducerRegistry.register({ SystemCvesStore });

export const setHeader = props => ({
    type: ActionTypes.SET_HEADER,
    payload: new Promise(resolve => {
        resolve(HeaderHelper.setHeader(props));
    }).then(result => result)
});

export const fetchAffectedSystemsByCVE = (cve, apiProps) => ({
    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,
    payload: new Promise(resolve => {
        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));
    }).then(result => result)
});

export const fetchSystems = options => ({
    type: ActionTypes.FETCH_SYSTEMS,
    payload: new Promise(resolve => {
        resolve(APIHelper.getSystems(options));
    }).then(result => result)
});

export const fetchCveDetails = synopsis => ({
    type: ActionTypes.FETCH_CVE_DETAILS,
    payload: new Promise(resolve => {
        resolve(APIHelper.getCveDetails(synopsis));
    }).then(result => result)
});

export const handleCveDetailsError = () => ({
    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,
    payload: { error: true }
});

export const fetchSystemDetails = system => ({
    type: ActionTypes.FETCH_SYSTEM_DETAILS,
    payload: new Promise(resolve => {
        resolve(APIHelper.getSystemDetails(system));
    }).then(result => result)
});

export const fetchCveListByAccount = apiProps => ({
    type: ActionTypes.FETCH_CVE_LIST,
    meta: new Date(),
    payload: APIHelper.getCveListByAccount(apiProps)
});

export const optOutSystemAction = (system, status) => ({
    type: ActionTypes.SYSTEM_OPT_OUT,
    payload: new Promise(resolve => {
        resolve(APIHelper.optOutSystem(system, status));
    }).then(result => result)
});

export const fetchCveListBySystem = apiProps => ({
    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,
    meta: new Date(),
    payload: APIHelper.getCveListBySystem(apiProps)
});

export const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({
    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,
    payload: APIHelper.changeSystemCveStatus(inventoryId, cve, statusId, callback)
});

export const optOutSystemsAction = (system, status) => ({
    type: ActionTypes.SYSTEM_OPT_OUT,
    payload: new Promise(resolve => {
        resolve(APIHelper.optOutSystems(system, status));
    }).then(result => result)
});

export const changeCveListParameters = apiProps => ({
    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,
    payload: new Promise(resolve => {
        resolve(apiProps);
    }).then(result => result)
});

export const selectCve = apiProps => ({
    type: ActionTypes.SELECT_CVE,
    payload: apiProps
});

export const expandCve = apiProps => ({
    type: ActionTypes.EXPAND_CVE,
    payload: apiProps
});

export const expandRow = (id, isOpen) => ({
    type: ActionTypes.EXPAND_ROW,
    payload: { id, isOpen }
});
export const selectEntities = (value, ids) => ({
    type: ActionTypes.SELECT_ENTITIES,
    payload: ids
});

export const fetchInsigtsSystemRules = (systemId, params) => ({
    type: ActionTypes.FETCH_INSIGHTS_SYSTEM_RULES,
    payload: new Promise(resolve => {
        resolve(APIHelper.getInsigtsSystemRules(systemId, params));
    }).then(result => {
        return [{
            id: systemId,
            rules: result
        }];
    })
});
