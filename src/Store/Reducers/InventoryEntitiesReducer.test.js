import { initialState, inventoryEntitiesReducer } from './InventoryEntitiesReducer';
import { sortable } from '@patternfly/react-table';

let action;
let columns;
let getSelected;
let testState 
describe('inventoryEntitiesReducer', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        };
        columns = [
            { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'fqdn'] },
            { key: 'cve_count', title: 'CVEs' },
            { key: 'updated', title: 'Last Seen', isTime: true }
        ];
        getSelected = () => { return new Set() };
        testState = { 
            ...initialState,
            loaded: true, 
            selectedRows: ['testId'], 
            rows: [{ id: 'testId', selected: false }] 
        };        
    });

    it('Should return initial state', () => {
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        const reducer = wrappingFn(undefined, {});
        expect(reducer).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        const reducer = wrappingFn(undefined, action);
        expect(reducer).toEqual(initialState);
    });

    it('Should set empty array to columns state', () => {
        const wrappingFn = inventoryEntitiesReducer(undefined, getSelected);
        const reducer = wrappingFn(undefined, action);
        expect(reducer.columns).toEqual([]);
    })

    it('Should set state for loaded entities', () => {
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        columns = [...columns, {transforms: [sortable]}];
        action.type = 'LOAD_ENTITIES_FULFILLED';
        const reducer = wrappingFn(testState, action);
        expect(reducer).toEqual({
            ...initialState, 
            columns, 
            rows: [{ id: 'testId', selected: true }], 
            loaded: true, 
            selectedRows: ['testId'] 
        });
    });

    it('Should return initial state when loaded is false/undefined', () => {
        const testObject = { ...initialState, loaded:false }
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        action.type = 'LOAD_ENTITIES_FULFILLED';
        const reducer = wrappingFn(testObject, action);
        expect(reducer).toEqual(testObject);
    });

    it('Should select multiple entities', () => {
        const testArray = ['testId'];
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        action.type = 'SELECT_MULTIPLE_ENTITIES';
        action.payload = testArray;
        const reducer = wrappingFn(testState, action);
        expect(reducer).toEqual({
            ...initialState, 
            rows: [{ id: 'testId', selected: true }], 
            loaded: true, 
            selectedRows: ['testId'] 
        });
    });

    it('Should expand row', () => {
        const testObject = [{ id: 'testId', isOpen: true }];
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        action.type = 'EXPAND_ROW';
        action.payload = testObject;
        const reducer = wrappingFn({ ...initialState, rows: testObject }, action);
        expect(reducer).toEqual({
            ...initialState,
            rows: testObject
        });
    });

    it('Should clear Inverntory', () => {
        const testObject = [{ id: 'testId', isOpen: true }];
        const wrappingFn = inventoryEntitiesReducer(columns, getSelected);
        action.type = 'CLEAR_INVENTORY_STORE';
        const reducer = wrappingFn({ ...initialState, rows: testObject }, action);
        expect(reducer).toEqual(initialState);
    })
});
