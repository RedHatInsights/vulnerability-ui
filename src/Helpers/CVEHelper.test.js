import { ExternalLinkAltIcon } from '@patternfly/react-icons';
import { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import Immutable from 'seamless-immutable';
import { createCveDetailsPage, createExposedSystemsTable, createMitreLink, createRHDBLink } from './CVEHelper';

const affected_payload = Immutable({
    data: [
        {
            attributes: {
                id: 1,
                status_name: 'On-Hold',
                status_id: 2,
                business_risk_id: '3'
            }
        },
        {
            attributes: {
                id: 2,
                status_name: 'On-Hold',
                status_id: 2,
                business_risk_id: '2'
            }
        }
    ],
    meta: {
        testObject: 'testObject'
    }
});

const cves_payload = Immutable({
    isLoading: false,
    payload: {
        data: {
            attributes: {
                impact: 'Important',
                public_date: '1970-01-01 00:00:00',
                description: 'testDescription',
                synopsis: 'CVE-2016-0800',
                cvss3_score: 7.6,
                cvss2_score: 6.7,
                business_risk_id: '3',
                status_id: 0
            }
        },
        meta: {
            testObject: 'testObject'
        }
    }
});

describe('CVEHelper', () => {
    it('createExposedSystemsTable', () => {
        const cve = 'CVE-2016-0800';
        const page = createExposedSystemsTable({ cve, payload: affected_payload, isLoading: false });
        expect(page.isLoading).toEqual(false);
        expect(page.meta).toEqual(affected_payload.meta);
    });

    it.each`
        affected_payload                             | expected_data
        ${{}}                                        | ${[]}
        ${{ payload: 'testPayload' }}                | ${[]}
        ${{ payload: { data: ['test1', 'test2'] } }} | ${['test1', 'test2']}
    `('createExposedSystemsTable - loading', ({ affected_payload, expected_data }) => {
    const page = createExposedSystemsTable({ ...affected_payload, isLoading: true });
    expect(page.isLoading).toEqual(true);
    expect(page.data).toEqual(expected_data);
});

    it('createCveDetailsPage', () => {
        const page = createCveDetailsPage(cves_payload);
        expect(page.meta.testObject).toEqual('testObject');
        expect(page.isLoading).toEqual(false);

        expect(page.data.impact).toEqual(cves_payload.payload.data.attributes.impact);
        expect(page.data.public_date).toEqual(processDate(cves_payload.payload.data.attributes.public_date));
        expect(page.data.synopsis).toEqual(cves_payload.payload.data.attributes.synopsis);
        expect(page.data.rh_link).toEqual(createRHDBLink(cves_payload.payload.data.attributes.synopsis));
        expect(page.data.mitre_link).toEqual(createMitreLink(cves_payload.payload.data.attributes.synopsis));
        expect(page.data.cvss2_score).toEqual(cves_payload.payload.data.attributes.cvss2_score);
        expect(page.data.cvss3_score).toEqual(cves_payload.payload.data.attributes.cvss3_score);
    });

    it('createCveDetailsPage - loading', () => {
        const page = createCveDetailsPage({ isLoading: true });
        expect(page.data).toEqual([]);
        expect(page.meta).toEqual({});
        expect(page.isLoading).toEqual(true);
    });

    it('createRHDBLink', () => {
        const link = shallow(createRHDBLink('CVE-2016-0800'));
        expect(link.type()).toEqual('a');
        expect(link.prop('href')).toEqual('https://access.redhat.com/security/cve/CVE-2016-0800');
        expect(link.prop('target')).toEqual('_blank');
        expect(link.prop('rel')).toEqual('noopener noreferrer');
        expect(link.prop('children')[0]).toEqual('View in Red Hat CVE database ');
        expect(link.prop('children')[1]).toEqual(<ExternalLinkAltIcon />);
    });

    it('createMitreLink', () => {
        const link = shallow(createMitreLink('CVE-2016-0800'));
        expect(link.type()).toEqual('a');
        expect(link.prop('href')).toEqual('https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0800');
        expect(link.prop('target')).toEqual('_blank');
        expect(link.prop('rel')).toEqual('noopener noreferrer');
        expect(link.prop('children')[0]).toEqual('MITRE Database ');
        expect(link.prop('children')[1]).toEqual(<ExternalLinkAltIcon />);
    });
});
