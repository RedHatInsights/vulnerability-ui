import React, { useEffect, useState, Fragment } from 'react';
import { useIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import SystemsTableToolbar from './SystemsTableToolbar';
import { PERMISSIONS, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import Header from '../../PresentationalComponents/Header/Header';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeSystemsParams,
    clearSystemStore,
    clearInventoryStore,
    selectRows,
    changeColumnsSystemList
} from '../../../Store/Actions/Actions';
import { useUrlParams } from '../../../Helpers/MiscHelper';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { TableVariant } from '@patternfly/react-table';
import { useGetEntities, useOptOutSystems, useRbac } from '../../../Helpers/Hooks';
import * as APIHelper from '../../../Helpers/APIHelper';
import { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import ColumnManagementModal from '../Modals/ColumnManagementModal';
import { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';
import NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';

const SystemsPage = () => {
    const [[canReadVulnerabilityResults,
        canSetExcludedIncluded,
        canExport,
        canReadExcludedIncluded],
    isLoading] = useRbac([
        PERMISSIONS.readVulnerabilityResults,
        PERMISSIONS.setExcludedIncluded,
        PERMISSIONS.basicReporting,
        PERMISSIONS.readExcludedIncluded
    ]);

    const inventoryRef = React.createRef();
    const dispatch = useDispatch();
    const intl = useIntl();
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);

    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);
    const meta = useSelector(({ entities }) => entities?.meta);
    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});
    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount);
    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);
    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);

    let parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);
    if (!canReadExcludedIncluded) {
        parameters.excluded = '';
    }

    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);
    const columns = useSelector(({ SystemsPageStore }) => SystemsPageStore.columns);

    const [isColumnModalOpen, setColumnModalOpen] = useState(false);

    const mergeColumns = inventoryColumns => {
        return columns
            .filter(column => column.isShown ?? column.isShownByDefault)
            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));
    };

    useEffect(() => {
        return () => {
            dispatch(clearSystemStore());
            dispatch(clearInventoryStore());
            dispatch(clearNotifications());
        };
    }, [dispatch]);

    const apply = (params) => dispatch(changeSystemsParams(params));

    useEffect(() => apply(urlParameters), []);

    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);

    const handleSelect = (payload) => dispatch(selectRows(payload));

    const onRefreshInventory = () => (
        dispatch(clearInventoryStore()),
        inventoryRef.current.onRefreshData(({ page: 1 }))
    );

    const doOptOut = useOptOutSystems(onRefreshInventory);
    const getEntities = useGetEntities(APIHelper.getSystems, {});

    const [columnCounter, setColumnCount] = useState(0);
    useEffect(() => setColumnCount(columnCounter + 1), [columns]);

    return (
        isLoading ? <Spinner centered/> :
            canReadVulnerabilityResults ? <Fragment>
                <ColumnManagementModal
                    appliedColumns={columns}
                    applyColumns={newColumns => dispatch(changeColumnsSystemList(newColumns))}
                    isModalOpen={isColumnModalOpen}
                    setModalOpen={setColumnModalOpen}
                />
                <Header title={intl.formatMessage(messages.vulnerabilitySystemsHeader)} showBreadcrumb={false}/>
                <Main>
                    {hasError
                        ? <ErrorHandler code={errorCode}/>
                        : (
                            <InventoryTable
                                disableDefaultColumns
                                onLoad={({ mergeWithEntities }) => {
                                    ReducerRegistry.register({
                                        ...mergeWithEntities(
                                            inventoryEntitiesReducer(columns),
                                            {
                                                page: Number(parameters.page || 1),
                                                perPage: Number(parameters.page_size || 20),
                                                ...(parameters.sort && {
                                                    sortBy: {
                                                        key: parameters.sort.replace(/^-/, ''),
                                                        direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'
                                                    }
                                                })
                                            }
                                        )
                                    });
                                }}
                                tableProps={{
                                    isStickyHeader: true,
                                    canSelectAll: false,
                                    actionResolver: totalItems > 0 && canSetExcludedIncluded
                                        && ((rowData) => systemTableRowActions(rowData, doOptOut)),
                                    variant: TableVariant.compact
                                }}
                                paginationProps={{
                                    isDisabled: !totalItems
                                }}
                                showTagModal
                                isFullView
                                ref={inventoryRef}
                                autoRefresh
                                customFilters={{
                                    vulnerabilityParams: {
                                        ...parameters
                                    }
                                }}
                                columnsCounter={columnCounter}
                                columns={defaultColumns => mergeColumns(defaultColumns)}
                                getEntities={getEntities}
                                hideFilters={{ all: true }}
                                noSystemsTable={<EmptyStateNoSystems/>}
                            >
                                <SystemsTableToolbar
                                    canExport={canExport}
                                    canSetExcludedIncluded={canSetExcludedIncluded}
                                    canReadExcludedIncluded={canReadExcludedIncluded}
                                    parameters={parameters}
                                    rawData={{ data: items, meta: { totalItems }, isLoaded }}
                                    selectedRows={selectedRows}
                                    selectedRowsCount={selectedRowsCount}
                                    selectedRowsRawData={selectedRowsRawData}
                                    methods={{
                                        doOptOut,
                                        apply,
                                        handleSelect,
                                        setColumnModalOpen
                                    }}
                                    actions
                                />
                            </InventoryTable>
                        )}
                </Main>
            </Fragment> : <NoAccessPage/>
    );
};

export default SystemsPage;
