import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';
import parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';
import propTypes from 'prop-types';
import React from 'react';
import { getImpactDetails } from '../../../Helpers/MiscHelper';
import CvssVector from '../CvssVector/CvssVector';
import messages from '../../../Messages';
import SnippetWithHeaderAndPopover from '../CVEPageDetailsDescription/SnippetWithHeaderAndTooltip';
import { ExclamationTriangleIcon } from '@patternfly/react-icons';
import { StyledText, StyledConstants } from '@patternfly/react-styled-system';
import { Table, TableBody, TableHeader } from '@patternfly/react-table';
import { STATUS_OPTIONS } from '../../../Helpers/constants';
import { injectIntl } from 'react-intl';
import { Shield } from '@redhat-cloud-services/frontend-components';
import Label from '../Snippets/Label';

const CVEPageDetailsSeverity = ({ cveAttributes, intl }) => {
    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');

    const {
        business_risk: businessRisk,
        business_risk_justification: businessRiskJustification,
        status,
        status_justification: statusJustification,
        systems_status_detail: systemsStatusDetail,
        systems_status_divergent: systemsStatusDivergent
    } = cveAttributes;

    const detailRows =
        systemsStatusDetail &&
        Object.keys(systemsStatusDetail).map(item => [
            STATUS_OPTIONS.find(status => status.value === item.toString()).label,
            systemsStatusDetail[item].toString()
        ]);

    const brPopoverContent = (
        <TextContent>
            <Stack>
                <StackItem>
                    <StyledText
                        fontWeight={StyledConstants.fontWeights.bold}
                        fontSize={StyledConstants.fontSizes.sm}
                        lineHeight={StyledConstants.lineHeights.sm}
                    >
                        {intl.formatMessage(messages.justificationNote)}
                    </StyledText>
                </StackItem>
                <StackItem>{businessRiskJustification || '--'}</StackItem>
            </Stack>
        </TextContent>
    );

    const statusPopoverContent = (
        <Stack>
            <StackItem>
                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                >
                    {intl.formatMessage(messages.cveStatus)}
                </StyledText>
                {status || '--'}

                <StyledText
                    fontWeight={StyledConstants.fontWeights.bold}
                    fontSize={StyledConstants.fontSizes.sm}
                    lineHeight={StyledConstants.lineHeights.sm}
                    style={{ marginTop: 'var(--pf-global--spacer--sm)' }}
                >
                    {intl.formatMessage(messages.justificationNote)}
                </StyledText>
                {statusJustification || '--'}
            </StackItem>
            {systemsStatusDivergent > 0 && (
                <StackItem>
                    <TextContent>
                        <hr className={'splitter'} />
                    </TextContent>
                    <StyledText fontWeight={StyledConstants.fontWeights.semi_bold} lineHeight={StyledConstants.lineHeights.sm}>
                        {intl.formatMessage(messages.cvePageDetailsSystemsWTCves)}
                    </StyledText>
                    <Table
                        aria-label={'Status details'}
                        borders={false}
                        gridBreakPoint={null}
                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}
                        rows={detailRows}
                        className={'status-breakdown-table'}
                    >
                        <TableHeader />
                        <TableBody />
                    </Table>
                </StackItem>
            )}
        </Stack>
    );

    return (
        <Stack hasGutter>
            <StackItem>
                <Split hasGutter>
                    <SplitItem>
                        <SnippetWithHeaderAndPopover
                            title={intl.formatMessage(messages.businessRiskLabel)}
                            value={businessRisk}
                            content={brPopoverContent}
                        />
                    </SplitItem>
                    <SplitItem className="pf-u-ml-lg">
                        <SnippetWithHeaderAndPopover
                            title={intl.formatMessage(messages.statusLabel)}
                            content={statusPopoverContent}
                            value={
                                <span>
                                    {systemsStatusDivergent > 0 && (
                                        <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />
                                    )}{' '}
                                    {status}
                                </span>
                            }
                        />
                    </SplitItem>
                </Split>
            </StackItem>

            <StackItem>
                <Label className='pf-u-mb-xs' isLarge>
                    {intl.formatMessage(messages.impact)}
                </Label><br/>
                <Shield impact={cveDetails.title} hasLabel/>
            </StackItem>

            <StackItem>
                <CvssVector
                    cvss2_metrics={cveAttributes.cvss2_metrics}
                    cvss3_metrics={cveAttributes.cvss3_metrics}
                    score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}
                />
            </StackItem>
        </Stack>
    );
};

CVEPageDetailsSeverity.propTypes = {
    cveAttributes: propTypes.any,
    intl: propTypes.any
};

export default injectIntl(CVEPageDetailsSeverity);
