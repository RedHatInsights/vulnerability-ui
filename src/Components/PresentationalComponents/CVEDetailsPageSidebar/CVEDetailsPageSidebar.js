import { Stack, StackItem, Split, SplitItem, TextContent, Button, Icon } from '@patternfly/react-core';
import parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';
import propTypes from 'prop-types';
import React from 'react';
import { getImpactDetails } from '../../../Helpers/MiscHelper';
import CvssVector from '../CvssVector/CvssVector';
import messages from '../../../Messages';
import SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';
import { ExclamationTriangleIcon } from '@patternfly/react-icons';
import {
    Table,
    TableBody,
    TableHeader
} from '@patternfly/react-table/deprecated';
import { STATUS_OPTIONS } from '../../../Helpers/constants';
import { useIntl } from 'react-intl';
import { Shield } from '@redhat-cloud-services/frontend-components/Shield';
import Label from '../Snippets/Label';
import { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';
import WithLoader from '../WithLoader/WithLoader';

const CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {
    const intl = useIntl();
    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');

    const {
        business_risk: businessRisk,
        business_risk_justification: businessRiskJustification,
        status,
        status_justification: statusJustification,
        systems_status_detail: systemsStatusDetail,
        systems_status_divergent: systemsStatusDivergent
    } = cveAttributes;

    const detailRows =
        systemsStatusDetail &&
        Object.keys(systemsStatusDetail).map(item => [
            STATUS_OPTIONS.find(status => status.value === item.toString()).label,
            systemsStatusDetail[item].toString()
        ]);

    const BusinessRiskPopoverContent = (
        <Stack className="pf-v5-u-p-xs">
            <StackItem>
                <Label className="pf-v5-u-mb-xs">
                    {intl.formatMessage(messages.justificationNote)}
                </Label>
            </StackItem>
            <StackItem>{businessRiskJustification || '--'}</StackItem>
            {canEditStatusOrBusinessRisk && <StackItem className="pf-v5-u-mt-sm">
                <Button
                    variant="secondary"
                    onClick={showBusinessRiskModal}
                >
                    {intl.formatMessage(messages.editBusinessRisk)}
                </Button>
            </StackItem>}
        </Stack>
    );

    const StatusPopoverContent = (
        <Stack className="pf-v5-u-p-xs">
            <StackItem>
                <Label className="pf-v5-u-mb-xs">
                    {intl.formatMessage(messages.cveStatus)}
                </Label>
                {status || '--'}
                <Label className="pf-v5-u-mb-xs pf-v5-u-mt-sm">
                    {intl.formatMessage(messages.justificationNote)}
                </Label>
                {statusJustification || '--'}
            </StackItem>
            {systemsStatusDivergent > 0 && (
                <StackItem>
                    <TextContent>
                        <hr className="pf-v5-u-mt-sm pf-v5-u-mb-sm" />
                    </TextContent>
                    <Label isLarge>
                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}
                    </Label>
                    <Table
                        aria-label="Status details"
                        gridBreakPoint=""
                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}
                        rows={detailRows}
                        className="status-breakdown-table"
                        variant="compact"
                    >
                        <TableHeader />
                        <TableBody />
                    </Table>
                </StackItem>
            )}
            {canEditStatusOrBusinessRisk && <StackItem className="pf-v5-u-mt-sm">
                <Button variant="secondary" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>
            </StackItem>}
        </Stack>
    );

    return (
        <CVEPageContext.Consumer>
            {context => (
                <Stack hasGutter>
                    <StackItem>
                        <Split hasGutter>
                            <SplitItem>
                                <SnippetWithHeaderAndPopover
                                    title={intl.formatMessage(messages.businessRiskLabel)}
                                    value={
                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>
                                            {businessRisk}
                                        </WithLoader>}
                                    content={BusinessRiskPopoverContent}
                                />
                            </SplitItem>
                            <SplitItem className="pf-v5-u-ml-lg">
                                <SnippetWithHeaderAndPopover
                                    title={intl.formatMessage(messages.statusLabel)}
                                    content={StatusPopoverContent}
                                    value={
                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>
                                            <span>
                                                {systemsStatusDivergent > 0 && (
                                                    <Icon>
                                                        <ExclamationTriangleIcon
                                                            color="var(--pf-v5-global--primary-color--100)"
                                                            className="pf-v5-u-mr-xs"
                                                        />
                                                    </Icon>
                                                )}{' '}
                                                {status}
                                            </span>
                                        </WithLoader>
                                    }
                                />
                            </SplitItem>
                        </Split>
                    </StackItem>

                    <StackItem>
                        <Label className="pf-v5-u-mb-xs" isLarge>
                            {intl.formatMessage(messages.impact)}
                        </Label>
                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>
                            <span id="severity-shield" style={{ color: cveDetails.color }}>
                                <Shield impact={cveDetails.title} hasLabel />
                            </span>
                        </WithLoader>
                    </StackItem>

                    <StackItem>
                        <CvssVector
                            cvss2_metrics={cveAttributes.cvss2_metrics}
                            cvss3_metrics={cveAttributes.cvss3_metrics}
                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}
                        />
                    </StackItem>
                </Stack>
            )}
        </CVEPageContext.Consumer>
    );
};

CVEDetailsPageSidebar.propTypes = {
    cveAttributes: propTypes.any,
    canEditStatusOrBusinessRisk: propTypes.bool,
    showStatusModal: propTypes.func,
    showBusinessRiskModal: propTypes.func
};

export default CVEDetailsPageSidebar;
