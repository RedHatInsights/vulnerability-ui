import React, { Component, Fragment } from 'react';
import propTypes from 'prop-types';
import { Table, TableBody, TableHeader } from '@patternfly/react-table';
import { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';

import { cveTableRowActions } from '../../../Helpers/CVEHelper';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import {
    FilterNotFoundForCVE,
    EmptyCVEListForSystem,
    EmptyCVEList
} from '../../PresentationalComponents/EmptyStates/EmptyStates';

import { CVETableContext } from './VulnerabilitiesCves';

class VulnerabilitiesTableWithContext extends Component {
    static propTypes = {
        context: propTypes.any,
        header: propTypes.array,
        entity: propTypes.object
    };

    noCves = () => {
        const { entity, context } = this.props;
        const { cves } = context;
        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(
            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]
        );

        let emptyComponent = filterFields.length !== 0
            ? FilterNotFoundForCVE
            : entity
                ? EmptyCVEListForSystem
                : cves.data.length === 0
                    ? EmptyCVEList
                    : undefined;

        return ([{
            heightAuto: true,
            cells: [
                {
                    props: { colSpan: 8 },
                    title: (
                        emptyComponent
                    )
                }
            ]
        }]);
    };

    handleOnCollapse = (event, rowKey, isOpen) => {
        const { rows } = this.state;
        /**
         * Please do not use rowKey as row index for more complex tables.
         * Rather use some kind of identifier like ID passed with each row.
         */
        rows[rowKey].isOpen = isOpen;
        this.setState({
            rows
        });
    };

    handleOnSelect = (event, isSelected, rowId) => {
        const { context } = this.props;
        const { cves, methods } = context;
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    handleBusinessRiskToggle = () => {
        this.setState(({ isBusinessRiskOpen }) => ({
            isBusinessRiskOpen: !isBusinessRiskOpen
        }));
    };

    render() {
        const { context, header } = this.props;
        const { cves, methods } = context;
        return (
            <Fragment>
                {!cves.isLoading ? (
                    <Fragment>
                        <Table
                            aria-label={'Vulnerability CVE table'}
                            cells={header}
                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}
                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}
                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}
                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}
                            sortBy={!(cves.data.length === 0) ?
                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}
                            onSort={!(cves.data.length === 0) ?
                                (event, key, direction) =>
                                    handleSortColumn(
                                        key,
                                        direction,
                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],
                                        cves.meta.sort,
                                        methods.apply
                                    ) : undefined
                            }
                            gridBreakPoint={'grid-lg'}
                        >
                            <Fragment>
                                <TableHeader />
                                <TableBody />
                            </Fragment>
                        </Table>
                        <TableToolbar>
                            <PaginationWrapper variant="bottom" meta={cves.meta} apply={methods.apply} />
                        </TableToolbar>
                    </Fragment>
                ) : (
                    <SkeletonTable colSize={6} rowSize={20} />
                )}
            </Fragment>
        );
    }
}

const VulnerabilitiesTable = props => (
    <CVETableContext.Consumer>
        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);

export default VulnerabilitiesTable;
