/* eslint-disable camelcase */
import { ToolbarGroup } from '@patternfly/react-core';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React, { Component } from 'react';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import {
    kebabItemDownloadCSV,
    kebabItemDownloadJSON,
    kebabItemEditBusinessRisk
} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import Filters from '../../PresentationalComponents/Filters/Filters';
import Remediation from '../Remediation/Remediation';
import SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';
import { CVETableContext } from './SystemCves';
import { filtersCVSSScore, filtersPublishDate, filtersSeverity, filtersStatus } from '../../../Helpers/constants';

class SystemCveToolbarWithContext extends Component {
    static propTypes = {
        showRemediationButton: propTypes.bool,
        entity: propTypes.object,
        context: propTypes.object
    };

    static defaultProps = {
        showRemediationButton: false,
        totalNumber: 0,
        apply: () => undefined,
        downloadReport: () => undefined
    };

    render() {
        const { showRemediationButton, entity, context } = this.props;
        const { cves, params, methods } = context;
        const { selectedCves } = params;
        const selectedCvesCount =
            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;
        const kebabOptions = [
            kebabItemEditBusinessRisk(
                methods.showBusinessRiskModal,
                [...selectedCves].map(item => ({ id: item, business_risk_id: '0' })),
                { isDisabled: !selectedCvesCount }
            ),
            kebabItemDownloadJSON(methods.downloadReport),
            kebabItemDownloadCSV(methods.downloadReport)
        ];
        return (
            <TableToolbar className="space-between-toolbar-items">
                <ToolbarGroup className="vulnerability-toolbar-spacing">
                    {showRemediationButton && (
                        <SelectAllCheckbox
                            selectedItems={selectedCvesCount}
                            selectorHandler={methods.selectCves}
                            cves={cves}
                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}
                        />
                    )}
                    <Filters
                        searchPlaceholder="Find a CVEâ€¦"
                        apply={methods.apply}
                        filterValues={params}
                        filterCategories={[
                            filtersCVSSScore,
                            filtersSeverity,
                            filtersPublishDate,
                            filtersStatus
                        ]}
                    />
                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}
                    <BaseKebab dropdownItems={kebabOptions} />
                </ToolbarGroup>

                <ToolbarGroup>
                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />
                </ToolbarGroup>
            </TableToolbar>
        );
    }
}

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default SystemCveToolbar;
