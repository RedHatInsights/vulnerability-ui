import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React, { useEffect, useState, useCallback } from 'react';
import { setBusinessRisk } from '../../../Helpers/APIHelper';
import { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';
import BaseModal from './BaseModal';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';

export const BusinessRiskModal = ({ cves, updateRef, intl }) => {
    const [cveList] = useState(cves);
    const [businessRiskId, setBusinessRiskId] = useState('0');
    const [label, setLabel] = useState();

    const getDefaultLabel = useCallback(() => {
        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');
    }, [cveList]);

    useEffect(() => {
        const getDefaultBusinessRisk = () => {
            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');
        };

        getDefaultBusinessRisk();
        getDefaultLabel();
    }, [cves, getDefaultLabel, cveList]);

    useEffect(getDefaultLabel, [getDefaultLabel]);

    const handleOnRadioChange = (_, event) => {
        const { value } = event.currentTarget;
        setBusinessRiskId(value);
    };

    const handleOnLabelChange = value => {
        setLabel(value);
    };

    const handleSave = () => {
        return setBusinessRisk({
            business_risk_id: parseInt(businessRiskId),
            cve: cveList.map(item => item.id),
            business_risk_text: label
        }).then(updateRef).catch(error => {
            throw error; // propagate error to BaseModal
        });
    };

    const onSuccessNotification = {
        variant: 'success',
        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })
    };

    const onFailureNotification = {
        variant: 'danger',
        autoDismiss: false,
        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),
        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)
    };

    return (
        <BaseModal
            items={cveList}
            onSave={handleSave}
            onSuccessNotification={onSuccessNotification}
            onFailureNotification={onFailureNotification}
            title={intl.formatMessage(messages.businessRiskModalTitle)}
            ouiaId="business-risk-modal"
        >
            <Stack hasGutter>
                <StackItem>
                    {intl.formatMessage(messages.businessRiskModalInfo)}
                </StackItem>
                <StackItem>
                    <Form>
                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId="businessRiskId">
                            {BUSINESS_RISK_OPTIONS.map(item => (
                                <Radio
                                    className="business-risk-radio"
                                    value={item.value}
                                    isChecked={businessRiskId === item.value}
                                    onChange={(event, _) => handleOnRadioChange(_, event)}
                                    label={item.label}
                                    key={item.value}
                                    id={item.value}
                                    name={item.label}
                                    aria-label={item.label}
                                    ouiaId="business-risk-radio"
                                />
                            ))}
                        </FormGroup>
                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId="label">
                            <TextArea
                                type="text"
                                onChange={(_event, value) => handleOnLabelChange(value)}
                                value={label}
                                resizeOrientation="vertical"
                                aria-label="justification"
                                style={{ minHeight: '2.25rem' }}
                            />
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

BusinessRiskModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func,
    intl: propTypes.any
};

export default injectIntl(BusinessRiskModal);
