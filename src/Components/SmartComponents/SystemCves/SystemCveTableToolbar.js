import React, { useMemo } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { CVETableContext } from './SystemCves';
import Remediation from '../Remediation/Remediation';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';
import publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';
import cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';
import impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import {
    handleChangePage,
    handleSetPageSize,
    exportConfig,
    buildActiveFilters,
    removeFilters
} from '../../../Helpers/TableToolbarHelper';

const SystemCveToolbarWithContext = ({ showRemediationButton, entity, intl, context }) => {

    const handleCveDescription = () => {
        const { cves, methods, expandCveDescription } = context;
        const isOpen = !expandCveDescription;
        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];
        methods.openCves(isOpen, openedCves, !expandCveDescription);
    };

    const { cves, parameters, methods, selectedCves, expandCveDescription } = context;
    const { filter } = parameters;
    const selectedCvesCount = showRemediationButton === true ? (selectedCves && selectedCves.length) || 0 : undefined;

    const selectOptions  = useMemo(() => selectAllCheckbox({
        selectedItems: selectedCves,
        selectorHandler: methods.selectCves,
        items: cves,
        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops, show_all: !parameters.show_all }),
        multiRow: true
    }), [selectedCves, cves, parameters, methods]);

    const actions = [
        showRemediationButton && entity && <Remediation systems={entity} cves={selectedCves} /> || '',
        {
            label: intl.formatMessage(messages.editStatus),
            onClick: () => methods.showStatusModal(
                [...selectedCves].map(item => ({
                    id: item,
                    ...cves.data.filter(cve => item === cve.id)
                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]
                })), []
            ),
            props: { isDisabled: !selectedCvesCount }
        },
        {
            label: expandCveDescription
                ? intl.formatMessage(messages.kebabCollapseCves)
                : intl.formatMessage(messages.kebabExpandCves),
            onClick: handleCveDescription,
            props: { isDisabled: cves.meta.total_items === 0 }

        }
    ];

    return (
        <React.Fragment>
            <PrimaryToolbar
                pagination={{
                    itemCount: cves.meta.total_items || 0,
                    page: cves.meta.page || 1,
                    perPage: cves.meta.page_size || 1,
                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),
                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)
                }}
                actionsConfig={{
                    actions,
                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }
                } }
                bulkSelect={{
                    count: selectedCvesCount,
                    items: selectOptions.items,
                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,
                    checked: Boolean(selectedCvesCount),
                    onSelect: ()=> selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),
                        securityRuleFilter(methods.apply, parameters),
                        impactFilter(methods.apply, parameters),
                        cvssBaseScoreFilter(methods.apply, parameters),
                        businessRiskFilter(methods.apply, parameters),
                        statusFilter(methods.apply, parameters),
                        publishDateFilter(methods.apply, parameters)
                    ]
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters(parameters),
                    onDelete: (e, i) => removeFilters(i, methods.apply)
                }}
                exportConfig = {{
                    isDisabled: cves.meta.total_items === 0,
                    ...exportConfig(methods)
                }}
            />
        </React.Fragment>
    );

};

SystemCveToolbarWithContext.defaultProps = {
    showRemediationButton: false,
    totalNumber: 0,
    apply: () => undefined,
    downloadReport: () => undefined
};

SystemCveToolbarWithContext.propTypes = {
    showRemediationButton: propTypes.bool,
    entity: propTypes.string,
    context: propTypes.object,
    intl: propTypes.any
};

const SystemCveToolbar = props => (
    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default injectIntl(SystemCveToolbar);
