import { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, TextContent, Title } from '@patternfly/react-core';
import { SecurityIcon } from '@patternfly/react-icons';
import React from 'react';
/* eslint react/prop-types: 0 */

export const SystemExludedFromAnalysis = ({ buttonAction }) => (
    <Bullseye>
        <EmptyState variant={'sm'}>
            <EmptyStateIcon icon={SecurityIcon} size={'lg'} />
            <Title headingLevel="h5" size="lg">
                Excluded from vulnerability analysis
            </Title>
            <TextContent>
                <EmptyStateBody>
                    This system has been excluded from vulnerability analysis. It is not being evaluated from potential
                    vulnerabilities by Red Hat Cloud Management Services.
                </EmptyStateBody>
                <Button variant="primary" component="a" onClick={buttonAction}>
                    Resume vulnerability analysis
                </Button>
            </TextContent>
        </EmptyState>
    </Bullseye>
);

export const SystemNotFound = () => (
    <Bullseye>
        <EmptyState variant={'sm'}>
            <EmptyStateIcon icon={SecurityIcon} size={'lg'} />
            <Title headingLevel="h5" size="lg">
                No matching system found
            </Title>
        </EmptyState>
    </Bullseye>
);

export const impactTextList = {
    critical:
        'This rating is given to flaws that could be easily exploited by a remote unauthenticated attacker' +
        ' and lead to system compromise (arbitrary code execution) without requiring user interaction.' +
        ' These are the types of vulnerabilities that can be exploited by worms. Flaws that require an authenticated' +
        ' remote user, a local user, or an unlikely configuration are not classed as Critical impact.',
    important:
        'This rating is given to flaws that can easily compromise the confidentiality, integrity, or availability' +
        ' of resources. These are the types of vulnerabilities that allow local users to gain privileges, allow' +
        ' unauthenticated remote users to view resources that should otherwise be protected by authentication,' +
        ' allow authenticated remote users to execute arbitrary code, or allow remote users to cause a denial' +
        ' of service.',
    moderate:
        'This rating is given to flaws that may be more difficult to exploit but could still lead to some' +
        ' compromise of the confidentiality, integrity, or availability of resources, under certain circumstances.' +
        ' These are the types of vulnerabilities that could have had a Critical impact or Important impact' +
        ' but are less easily exploited based on a technical evaluation of the flaw, or affect unlikely' +
        ' configurations.',
    low:
        'This rating is given to all other issues that have a security impact. These are the types of vulnerabilities' +
        ' that are believed to require unlikely circumstances to be able to be exploited, or where a successful exploit' +
        ' would give minimal consequences.'
};

export const impactColorList = {
    default: 'severity-low',
    danger: 'severity-critical',
    warning: 'severity-moderate',
    orange: 'severity-color-important'
};

export const impactList = {
    Critical: {
        title: 'Critical',
        color: impactColorList.danger,
        text: impactTextList.critical
    },
    High: {
        title: 'High',
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Important: {
        title: 'Important',
        color: impactColorList.orange,
        text: impactTextList.important
    },
    Medium: {
        title: 'Medium',
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Moderate: {
        title: 'Moderate',
        color: impactColorList.warning,
        text: impactTextList.moderate
    },
    Low: {
        title: 'Low',
        color: impactColorList.default,
        text: impactTextList.low
    }
};
