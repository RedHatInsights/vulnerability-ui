import SystemDetails from "./SystemDetails";
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from "react-redux";
import { initialState } from '../../../Store/Reducers/SystemCvesStore';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false]
}));

const customMiddleWare = store => next => action => {
    next(action);
}
  
const mockStore = configureStore([customMiddleWare]);
let storeObj = { 
    SystemCvesStore: initialState, 
    entityDetails: { 
        entity: { test: 'test' }, 
        opt_out: false, 
        loaded: true 
    },
    AppStore: { 
        popup: {}
    } 
};

describe('SystemDetails', () => {

    const mountComponent = (store) => 
        mountWithIntl(
            <Provider store={store}>
                <Router>
                    <SystemDetails
                        rbacPermissions={{
                            canExport: true,
                            canReadVulnerabilityResults: true,
                            canEditPairStatus: true,
                            canReadExcluded: true,
                        }}
                        isRbacLoading={false}
                    />
                </Router>
            </Provider>);

    it('Should render SystemCVEs when isOptOut is false', () => {
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('SystemCVEs')).toBeTruthy();
    });

    it('Should render EmptyStateExcludedSystem when isOptOut is true', () => {
        storeObj.entityDetails.opt_out = true;
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('EmptyStateExcludedSystem')).toBeTruthy();
    });

    it('Should pass optOutSystemHandler to EmptyStateExcludedSystem component', () => {
        storeObj.entityDetails.opt_out = true;
        const tempStore = mockStore(storeObj);
        const mockFunc = jest.fn();
        const wrapper = mountWithIntl(
            <Provider store={tempStore}>
                <Router>
                    <SystemDetails
                        optOutSystemHandler={mockFunc}
                        rbacPermissions={{
                            canExport: true,
                            canReadVulnerabilityResults: true,
                            canEditPairStatus: true,
                            canReadExcluded: true,
                        }}
                        isRbacLoading={false}
                    />
                </Router>
            </Provider>);
        const buttonAction = wrapper.find('EmptyStateExcludedSystem').props().buttonAction;
        buttonAction();
        expect(mockFunc).toHaveBeenCalledWith(undefined, false);
    });

    it('Should render null when entity is undefined or loaded is false', () => {
        storeObj.entityDetails.entity = undefined;
        const tempStore = mockStore(storeObj);
        const wrapper = mountComponent(tempStore);
        expect(wrapper.find('EmptyStateExcludedSystem')).toEqual({});
        expect(wrapper.find('SystemCVEs')).toEqual({});   
    });
});
