import { Main } from '@redhat-cloud-services/frontend-components/Main';
import propTypes from 'prop-types';
import React, { useMemo, useState, useEffect } from 'react';
import { createCveDetailsPage } from '../../../Helpers/CVEHelper';
import { useDispatch, useSelector } from 'react-redux';
import {
    fetchCveDetails,
    changeExposedSystemsParameters,
    fetchAffectedSystemsByCVE,
    clearCveStore
} from '../../../Store/Actions/Actions';
import { withRouter } from 'react-router-dom';
import { PATHS } from '../../../Helpers/constants';
import CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';
import { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import CveStatusModal from '../Modals/CveStatusModal';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import Header from '../../PresentationalComponents/Header/Header';
import GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';

export const CVEPageContext = React.createContext({ isLoading: true });

const CVEDetailsPage = ({ match }) => {
    const dispatch = useDispatch();
    const [cveName] = useState(match.params.cve);
    const [BusinessModal, setBusinessRisk] = useState(() => () => null);
    const [StatusModal, setStatusModal] = useState(() => () => null);

    const details = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails
    );
    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);

    const exposedSystems = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE
    );

    useEffect(() => {
        dispatch(fetchCveDetails(cveName));
    }, [dispatch, cveName]);

    const showBusinessRiskModal = cves => {
        setBusinessRisk(
            () => () =>
                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />
        );
    };

    const showStatusModal = cves => {
        setStatusModal(
            () => () =>
                <CveStatusModal
                    cves={cves}
                    updateRef={() => {
                        dispatch(fetchCveDetails(cveName));
                        dispatch(fetchAffectedSystemsByCVE(cveName));
                    }}
                />
        );
    };

    useEffect(() => {
        return () => {
            dispatch(clearCveStore());
        };
    }, [dispatch]);

    const { error, data } = cveDetails;

    const cveStatusDetails = {
        id: cveName,
        status_id: cveDetails.data.status_id,
        justification: cveDetails.data.status_justification,
        exposed_systems_count: exposedSystems?.payload?.meta?.total_items || 0
    };
    const kebabItems = [
        kebabItemEditBusinessRisk(showBusinessRiskModal, [
            {
                business_risk_id: cveDetails.data.business_risk_id,
                id: cveName,
                justification: cveDetails.data.business_risk_justification
            }
        ]),
        kebabItemEditStatus(showStatusModal, [cveStatusDetails])
    ];
    const { rules } = data;
    const filterRuleValues = rules && rules.map(
        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })
    );

    if (error?.hasError) {
        return (
            <React.Fragment>
                <Header title={cveName}/>
                <ErrorHandler code={error?.errorCode} />
            </React.Fragment>
        );
    } else {
        return (
            <React.Fragment>
                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>
                    <Header
                        title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}
                        actions={kebabItems}
                        actionsOuiaId={'cve-actions'}
                        breadcrumbs={[
                            {
                                title: PATHS.cvesPage.title,
                                to: PATHS.cvesPage.to,
                                loaded: true
                            },
                            {
                                title: cveName,
                                isActive: true,
                                loaded: true
                            }
                        ]}
                        labels={[
                            <GroupedCVELabels
                                key="labels"
                                hasExploit={!!details.payload.data?.attributes.known_exploit}
                                hasRule={details.payload.data?.attributes.rules.length > 0}
                            />
                        ]}
                    >
                        <CVEDetailsPageSummary
                            changeExposedSystemsParameters={changeExposedSystemsParameters}
                            data={cveDetails}
                        />
                        <StatusModal />
                        <BusinessModal />
                    </Header>
                    <Main>
                        <SystemsExposedTable
                            cve={cveName}
                            filterRuleValues={filterRuleValues}
                            cveStatusDetails={cveStatusDetails}
                            methods={{ showStatusModal }}
                        />
                    </Main>
                </CVEPageContext.Provider>
            </React.Fragment>
        );
    }
};

CVEDetailsPage.propTypes = {
    match: propTypes.object
};

export default withRouter(CVEDetailsPage);
