import * as ActionTypes from '../ActionTypes';
import { applyGlobalFilter } from './reducersHelper';

// Initial State
export const initialState = {
    cveList: {
        isLoading: true,
        payload: [],
        timestamp: new Date()
    },
    parameters: {
        sort: '-public_date',
        affecting: 'true,false'
    },
    selectedCves: [],
    openedCves: [],
    expandCveDescription: false
};

function isValid(stateTimestamp, actionTimestamp) {
    return actionTimestamp >= stateTimestamp;
}

// Reducer
export const CVEsStore = (state = initialState, action) => {
    let newState = { ...state };

    switch (action.type) {
        case ActionTypes.FETCH_CVE_LIST + '_PENDING':
            newState.cveList = {
                timestamp: action.meta,
                isLoading: true
            };
            return newState;

        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':
            newState.error = true;
            newState.cveList = {
                isLoading: false,
                payload: { errors: action.payload }
            };
            return newState;

        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':
            if (isValid(state.cveList.timestamp, action.meta)) {
                newState.cveList = {
                    payload: action.payload,
                    isLoading: false
                };

                return newState;
            }

            return state;

        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':
            newState.parameters = { ...newState.parameters, ...action.payload };
            return newState;

        case ActionTypes.SELECT_CVE: {
            let selectedCves = newState.selectedCves.slice();
            if (Array.isArray(action.payload)) {
                selectedCves = action.payload;
            } else {
                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||
                    selectedCves.push(action.payload);
            }

            return { ...newState, selectedCves  };
        }

        case ActionTypes.EXPAND_CVE: {
            if (Array.isArray(action.payload)) {
                const openedCves = action.payload;
                const expandCveDescription = action.payload.length === 0 ? false : true;
                return { ...newState,  openedCves, expandCveDescription };
            }

            const cveName = newState.cveList.payload.data[action.payload / 2].id;
            const openedCves = newState.openedCves.slice();
            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);

            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);

            return { ...newState, openedCves, expandCveDescription };
        }

        case ActionTypes.CLEAR_CVES_STORE:
            return initialState;

        case ActionTypes.SET_GLOBAL_FILTER:
            newState.parameters = {
                ...applyGlobalFilter(newState.parameters, action.payload)
            };
            return newState;

        default:
            return state;
    }
};
