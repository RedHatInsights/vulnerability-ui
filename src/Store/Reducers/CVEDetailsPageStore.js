import Immutable from 'seamless-immutable';
import * as ActionTypes from '../ActionTypes';

// Initial State
export const initialState = Immutable({
    affectedSystemsByCVE: {
        isLoading: true,
        openedRows: [],
        payload: {
            meta: {
                total_items: 0,
                page: 1,
                page_size: 20
            }
        }
    },
    parameters: {
        page: 1,
        page_size: 20,
        selectedHosts: [],
        status_id: undefined,
        sort: '-last_upload',
        show_advisories: true
    },
    cveDetails: {
        isLoading: true,
        payload: {},
        error: false
    }
});

// Reducer
export const CVEDetailsPageStore = (state = initialState, action) => {
    let newState;
    switch (action.type) {
        case ActionTypes.FETCH_CVE_DETAILS + '_REJECTED':
            newState = state.setIn(['cveDetails', 'error'], true);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;
        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':
            newState = state.setIn(['cveDetails', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':
            newState = state.setIn(['cveDetails', 'payload'], action.payload);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':
            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':
            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);
            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);
            return newState;
        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:
            newState = state.setIn(['parameters'], {
                ...state.parameters,
                ...action.payload,
                page_size: action.payload.page_size || state.parameters.page_size
            });
            return newState;
        case ActionTypes.SET_GLOBAL_FILTER:
            newState = state.setIn(['parameters'], {
                ...state.parameters,
                ...action.payload
            });
            return newState;
        case ActionTypes.CLEAR_CVE_STORE:
            return initialState;
        default:
            return state;
    }
};

