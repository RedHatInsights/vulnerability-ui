import excludedFilter from './ExcludedFilter'

const OPTION_INCLUDED_SYSTEMS = "0";
const OPTION_EXCLUDED_SYSTEMS = "1";

describe('excludedFilter', () => {
    const applyMock = jest.fn();

    it('Should use default currentValue (undefined) if none provided', () => {
        let filterComponent = excludedFilter(applyMock)

        expect(filterComponent.filterValues.value).toEqual(undefined)
    });

    it('Should use provided currentValue initially', () => {
        let currentFilter = { excluded: 'false,true' }
        let filterComponent = excludedFilter(applyMock, currentFilter)

        expect(filterComponent.filterValues.value).toStrictEqual([OPTION_EXCLUDED_SYSTEMS])
    });

    it('Should call apply with correct params', () => {
        let filterComponent = excludedFilter(applyMock)

        filterComponent.filterValues.onChange('event', [])
        expect(applyMock).toBeCalledWith({ excluded: '', page: 1  })

        filterComponent.filterValues.onChange('event', [OPTION_INCLUDED_SYSTEMS])
        expect(applyMock).toBeCalledWith({ excluded: 'true,false', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_EXCLUDED_SYSTEMS])
        expect(applyMock).toBeCalledWith({ excluded: 'false,true', page: 1 })

        filterComponent.filterValues.onChange('event', [OPTION_INCLUDED_SYSTEMS, OPTION_EXCLUDED_SYSTEMS])
        expect(applyMock).toBeCalledWith({ excluded: 'true,true', page: 1 })
    })
})
