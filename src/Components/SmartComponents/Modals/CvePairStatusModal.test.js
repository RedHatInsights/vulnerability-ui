import React from 'react';
import * as deps from '../../../Helpers/APIHelper';
import CVEPairStatusModal from './CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { fireEvent, render, screen } from '@testing-library/react';
import TestWrapper from '../../../Utilities/TestWrapper';
import '@testing-library/jest-dom';

const store = ReducerRegistry.getStore();

// testing for correct default checkbox, enabled alert box when statuses are different, and correct params sent to the setSystemCveStatus()
describe('CvePairStatusModal component', () => {
    const cveSingle = [
        { id: "CVE-2020-0001", status_id: "3", justification: "old justification" }
    ];

    const cveMultiple = [
        { id: "CVE-2020-0001", status_id: "3", justification: "old justification" },
        { id: "CVE-2020-0002", status_id: "4", justification: "old justification" }
    ];

    const systemSingle = [
        { id: "system-1", status_id: "2", justification: "old justification" }
    ];

    const systemMultiple = [
        { id: "system-1", status_id: "3", justification: "old justification" },
        { id: "system-2", status_id: "4", justification: "different old justification" }
    ];

    it('should render from perspective of system CVE table with one CVE selected', () => {
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        deps.setSystemCveStatus = setSystemCveStatusMock;

        render(
            <TestWrapper store={ store }>
                <CVEPairStatusModal open type="systemDetail" cveList={cveSingle} inventoryList={systemSingle}/>
            </TestWrapper>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const overallCheckbox             = screen.getByRole('checkbox', { name: /use overall cve status/i });
        const alertBox                    = screen.queryAllByLabelText('Warning alert');
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        expect(alertBox).toHaveLength(0);

        fireEvent.click(overallCheckbox);

        expect(statusDropdown).toBeDisabled();
        expect(justificationNote).toBeDisabled();

        fireEvent.click(overallCheckbox);

        expect(statusDropdown).not.toBeDisabled();
        expect(justificationNote).not.toBeDisabled();

        fireEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'No action - risk accepted' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        fireEvent.click(saveButton);

        expect(setSystemCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            inventory_id: ['system-1'],
            status_id: 3,
            status_text: 'new justification'
        });
    });

    it('should render from perspective of system CVE table with multiple CVE with different statuses selected', () => {
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        deps.setSystemCveStatus = setSystemCveStatusMock;

        render(
            <TestWrapper store={ store }>
                <CVEPairStatusModal open type="systemDetail" cveList={cveMultiple} inventoryList={systemSingle}/>
            </TestWrapper>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const alertBox                    = screen.getByRole('heading', { name: 'Warning alert: Selected pairs have different statuses. Changes will be applied to all' });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        expect(alertBox).toBeVisible();

        fireEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'No action - risk accepted' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        fireEvent.click(saveButton);

        expect(setSystemCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001', 'CVE-2020-0002'],
            inventory_id: ['system-1'],
            status_id: 0,
            status_text: 'new justification'
        });
    });

    it('should render from perspective of affected systems table with single system selected', () => {
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        deps.setSystemCveStatus = setSystemCveStatusMock;

        render(
            <TestWrapper store={ store }>
                <CVEPairStatusModal open type="systemsExposed" cveList={cveSingle} inventoryList={systemSingle} />
            </TestWrapper>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const alertBox                    = screen.queryByRole('heading', { name: 'Warning alert: Selected pairs have different statuses. Changes will be applied to all' });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        expect(alertBox).toBeFalsy();

        fireEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'No action - risk accepted' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        fireEvent.click(saveButton);

        expect(setSystemCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            inventory_id: ['system-1'],
            status_id: 2,
            status_text: 'new justification'
        });
    });

    it('should render from perspective of affected systems table with multiple systems with different statuses selected', () => {
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        deps.setSystemCveStatus = setSystemCveStatusMock;

        render(
            <TestWrapper store={ store }>
                <CVEPairStatusModal open type="systemsExposed" cveList={cveSingle} inventoryList={systemMultiple}/>
            </TestWrapper>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const alertBox                    = screen.queryByRole('heading', { name: 'Warning alert: Selected pairs have different statuses. Changes will be applied to all' });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        expect(alertBox).toBeVisible();

        fireEvent.click(statusDropdown);
        screen.getByRole('option', { name: 'No action - risk accepted' });
        fireEvent.change(justificationNote, { target: { value: 'new justification' } });
        fireEvent.click(saveButton);

        expect(setSystemCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            inventory_id: ['system-1', 'system-2'],
            status_id: 0,
            status_text: 'new justification'
        });
    });

    it('should render from perspective of affected systems table with multiple systems selected and use overall justification', () => {
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        deps.setSystemCveStatus = setSystemCveStatusMock;

        render(
            <TestWrapper store={ store }>
                <CVEPairStatusModal open type="systemsExposed" cveList={cveSingle} inventoryList={systemMultiple}/>
            </TestWrapper>
        );

        const statusDropdown              = screen.getByRole('combobox', { name: /select input/i });
        const justificationNote           = screen.getByRole('textbox', { name: /justification note/i });
        const alertBox                    = screen.queryByRole('heading', { name: 'Warning alert: Selected pairs have different statuses. Changes will be applied to all' });
        const saveButton                  = screen.getByRole('button', { name: /save/i });

        expect(alertBox).toBeVisible();

        expect(statusDropdown).not.toBeFalsy();
        expect(justificationNote).not.toBeFalsy();

        fireEvent.click(saveButton);

        expect(setSystemCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            inventory_id: ['system-1', 'system-2'],
            status_id: 0,
            status_text: ''
        });
    });
});
