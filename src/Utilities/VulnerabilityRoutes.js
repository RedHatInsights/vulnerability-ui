import React, { useEffect, useState, lazy, Suspense, Fragment, createContext } from 'react';
import PropTypes from 'prop-types';
import { Navigate, Route, Routes, useLocation } from 'react-router-dom';
import { getSystems, checkEdgePresence } from '../Helpers/APIHelper';
import { PATHS } from '../Helpers/constants';
import { intl } from './IntlProvider';
import messages from '../Messages';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';
import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';
import useFeatureFlag from './useFeatureFlag';

const SystemsPage = lazy(() =>
    import(
        /* webpackChunkName: "Systems" */ '../Components/SmartComponents/SystemsPage/SystemsPage'
    )
);

const LandingPage = lazy(() =>
    import(
        /* webpackChunkName: "LandingPage" */ '../Components/SmartComponents/LandingPage/LandingPage'
    )
);

const Upgrade = lazy(() =>
    import(
        /* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'
    )
);

const CVEDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "CVEDetailsPage" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'
    )
);

const SystemDetailsPage = lazy(() =>
    import(
        /* webpackChunkName: "SystemDetailsPage" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'
    )
);
const Reports = lazy(() =>
    import(/* webpackChunkName: "Reports" */ '../Components/SmartComponents/Reports/ReportsPage')
);

export const AccountStatContext = createContext({
    hasConventionalSystems: true,
    hasEdgeDevices: false
});

const InsightsElement = ({ element: Element, title, globalFilterEnabled, ...elementProps }) => {
    let location = useLocation();
    const [hasConventionalSystems, setHasConventionalSystems] = useState(true);
    const [hasEdgeDevices, setHasEdgeDevices] = useState(true);
    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');
    const chrome = useChrome();

    useEffect(() => {
        const fetchData = async () => {
            const result = await getSystems();
            setHasConventionalSystems(result?.meta?.total_items > 0);
        };

        fetchData();

        //if there is at least 1 edge device in the account level, not only in vulnerability
        checkEdgePresence().then(edgeDevicePresent => setHasEdgeDevices(edgeDevicePresent));
    }, []);

    const subPath = location.pathname && location.pathname.split('/')[4];

    useEffect(() => {
        chrome.updateDocumentTitle(`${subPath ? `${subPath} - ` : ''} ${title} -
         ${intl.formatMessage(messages.pageTitleSuffix)}`);
    }, [chrome, intl, subPath]);

    useEffect(() => {
        chrome.hideGlobalFilter(!globalFilterEnabled);
    }, [location.pathname]);

    const accountHasSystem = isEdgeParityEnabled && (hasEdgeDevices || hasConventionalSystems) || hasConventionalSystems;

    return (
        !accountHasSystem ?
            <AsyncComponent
                appId="vulnerability_zero_state"
                appName="dashboard"
                module="./AppZeroState"
                scope="dashboard"
                ErrorComponent={<ErrorState />}
                app="Vulnerability"
            />
            : (
                <AccountStatContext.Provider value={{ hasConventionalSystems, hasEdgeDevices }}>
                    <Element
                        {...elementProps}
                        hasEdgeDevices={hasEdgeDevices}
                        hasConventionalSystems={hasEdgeDevices}
                    />
                </AccountStatContext.Provider>)
    );
};

InsightsElement.propTypes = {
    element: PropTypes.func,
    title: PropTypes.string,
    globalFilterEnabled: PropTypes.bool
};

export const VulnerabilityRoutes = () => {
    return (
        <Suspense fallback={Fragment}>
            <Routes>
                <Route
                    path={PATHS.cveDetailsPage.to}
                    element={
                        <InsightsElement
                            element={CVEDetailsPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            globalFilterEnabled
                        />
                    }
                />
                <Route
                    path={PATHS.cveDetailsEdgePage.to}
                    element={
                        <InsightsElement
                            element={CVEDetailsPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            isImmutableTabOpen
                        />
                    }
                />
                <Route
                    path={PATHS.systemDetailsPage.to}
                    element={<SystemDetailsPage />}
                />

                <Route
                    path={PATHS.home.to}
                    element={
                        <InsightsElement
                            element={LandingPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            globalFilterEnabled
                        />
                    }
                />

                <Route
                    path={PATHS.cvesPage.to}
                    element={
                        <InsightsElement
                            element={LandingPage}
                            title={intl.formatMessage(messages.cvesHeader)}
                            globalFilterEnabled
                        />
                    }
                />

                <Route
                    path={PATHS.systemsPage.to}
                    element={
                        <InsightsElement
                            element={SystemsPage}
                            title={intl.formatMessage(messages.systemsHeader)}
                            globalFilterEnabled
                        />
                    }
                />

                <Route
                    path={PATHS.upgrade.to}
                    element={<InsightsElement element={Upgrade} title={intl.formatMessage(messages.upgradePageTitle)} />}
                />

                <Route
                    path={PATHS.reports.to}
                    element={<InsightsElement element={Reports} title={intl.formatMessage(messages.reportsPageTitle)} />}
                />

                <Route
                    path="*"
                    element={<Navigate to="cves" />}
                />
            </Routes>
        </Suspense>
    );
};
