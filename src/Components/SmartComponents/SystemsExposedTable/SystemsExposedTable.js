import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import React, { useEffect, useState, useMemo } from 'react';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';
import { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import DownloadReport from '../../../Helpers/DownloadReport';
import Remediation from '../Remediation/Remediation';
import useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import {
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    expandRow,
    selectRows,
    changeExposedSystemsParameters,
    fetchAffectedSystemsIdsByCve,
    clearInventoryStore
} from '../../../Store/Actions/Actions';
import {
    SYSTEMS_EXPOSED_HEADER,
    SYSTEMS_EXPOSED_ALLOWED_PARAMS,
    SYSTEMS_EXPOSED_SORTING_HEADER,
    RULE_ABSENSE_OPTIONS
} from '../../../Helpers/constants';
import { TableVariant } from '@patternfly/react-table';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import useDeepCompareEffect from 'use-deep-compare-effect';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import * as APIHelper from '../../../Helpers/APIHelper';
import { useGetEntities, useBulkSelect } from '../../../Helpers/Hooks';

const SystemsExposedTable = ({
    cve: cveId,
    intl,
    cveStatusDetails,
    filterRuleValues
}) => {
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const inventoryRef = React.createRef();
    const dispatch = useDispatch();
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);

    const parameters = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,
        shallowEqual
    );

    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);
    const meta = useSelector(({ entities }) => entities?.meta || {});
    const error = useSelector(({ entities }) => entities?.error || {});
    const loaded = useSelector(({ entities }) => entities?.loaded || false);
    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});
    const selectedRowsCount = Object.keys(selectedRows).length || 0;

    const apply = (config) => dispatch(
        changeExposedSystemsParameters(config)
    );

    const handleSelect = (payload) => dispatch(selectRows(payload));

    useEffect(() => {
        apply(urlParameters);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useDeepCompareEffect(() => {
        setUrlParams({ ...parameters });
    }, [parameters]);

    useEffect(() => {
        return () => {
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    const downloadReport = format => {
        DownloadReport.exec(
            fetchAffectedSystemsByCVE,
            { id: cveId, ...parameters },
            format,
            'systems-exposed',
            notification => dispatch(addNotification(notification)),
            () => dispatch(clearNotifications())
        );
    };

    const getEntities = useGetEntities(
        APIHelper.getAffectedSystemsByCVE,
        {
            createRows: createExposedSystemsRows,
            id: cveId,
            setUrlParams
        }
    );

    const bulkSelectProps = useBulkSelect({
        rawData: { data: items, meta },
        selectedRows,
        selectedRowsCount,
        handleSelect,
        fetchResource: ops => fetchAffectedSystemsIdsByCve(cveId, { ...parameters, ...ops })
    });

    const showStatusModal = (cves, inventories) => {
        setStatusModal(
            () => () =>
                <CvePairStatusModal
                    cveList={cves}
                    updateRef={() => {
                        inventoryRef.current.onRefreshData(({ page: 1 }));
                        dispatch(fetchCveDetails(cveId));
                    }}
                    inventoryList={inventories}
                    type={'systemsExposed'}
                />
        );
    };

    const selectedRowsData = useMemo(() => items?.filter(s => selectedRows[s.id] === true), [selectedRows, items]);

    const kebabOptions = ['',
        {
            label: intl.formatMessage(messages.editStatus),
            onClick: () => showStatusModal([cveStatusDetails], selectedRowsData),
            props: { isDisabled: !selectedRows || selectedRowsCount === 0 }
        }
    ];

    const sortingHeader = items?.meta?.patch_access
        ? SYSTEMS_EXPOSED_SORTING_HEADER
        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');

    const sortBy = () =>
        createSortBy(
            sortingHeader,
            meta.sort
        );

    const onSort = (_event, index, direction) =>
        handleSortColumn(
            index,
            direction,
            sortingHeader,
            urlParameters.sort,
            apply
        );

    const searchFilter = useSearchFilter(
        'filter',
        messages.systemsSearchName,
        messages.searchFilterByName,
        parameters.filter, apply
    );

    const advisoryFilter = useSearchFilter('advisory', messages.advisory, messages.search, parameters.advisory, apply);

    return (
        <React.Fragment>
            <Stack hasGutter>
                <StackItem>
                    <TextContent>
                        <Text component={TextVariants.h2}>
                            {intl.formatMessage(messages.affectsSystems)}
                        </Text>
                    </TextContent>
                </StackItem>
                <StackItem>
                    { Object.keys(error).length > 0
                        ? <ErrorHandler code={error?.status} />
                        : <InventoryTable
                            disableDefaultColumns
                            onLoad={({ mergeWithEntities }) => {
                                ReducerRegistry.register({
                                    ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER))
                                });
                            }}
                            tableProps={{
                                isStickyHeader: true,
                                canSelectAll: false,
                                onSort: (totalItems > 0) && onSort,
                                sortBy: (totalItems > 0) && sortBy(),
                                actionResolver: (rowData, rowIndex) => (
                                    totalItems > 0 &&
                                        systemExposedTableRowActions(
                                            showStatusModal,
                                            cveStatusDetails,
                                            rowIndex.rowIndex
                                        )
                                ),
                                variant: TableVariant.compact
                            }}
                            autoRefresh
                            customFilters={{
                                vulnerabilityParams: {
                                    ...parameters,
                                    show_advisories: true
                                }
                            }}
                            getEntities={getEntities}
                            showTags
                            isFullView
                            key={'inventory'}
                            expandable
                            ref={inventoryRef}
                            page={meta && meta.page || 1}
                            perPage={meta && meta.page_size || 20}
                            total={meta && meta.total_items || 0}
                            hasCheckbox={items && totalItems !== 0}
                            showActions={items && totalItems !== 0}
                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}
                            hideFilters={{ all: true }}
                            noSystemsTable={<EmptyStateNoSystems />}
                        >
                            <PrimaryToolbar
                                className="vuln-systems-primary-toolbar"
                                exportConfig={{
                                    isDisabled: totalItems === 0,
                                    ouiaId: 'export',
                                    ...exportConfig({ downloadReport })
                                }}
                                dedicatedAction={loaded &&
                                    <Remediation
                                        manyRules
                                        systems={selectedRowsData}
                                        cves={{ id: cveId, rules: filterRuleValues }}
                                    />
                                }
                                actionsConfig={{
                                    actions: kebabOptions,
                                    kebabToggleProps: { isDisabled: !selectedRows || selectedRowsCount === 0 },
                                    dropdownProps: { ouiaId: 'toolbar-actions' }
                                }}
                                activeFiltersConfig={{
                                    filters: buildActiveFilters({ ...parameters }, filterRuleValues),
                                    onDelete: (_, chips) => removeFilters(chips, apply),
                                    deleteTitle: intl.formatMessage(messages.resetFilters)
                                }}
                                bulkSelect={bulkSelectProps}
                                filterConfig={{
                                    items: [
                                        searchFilter,
                                        securityRuleFilter(
                                            apply,
                                            parameters,
                                            filterRuleValues,
                                            {
                                                isDynamic: true,
                                                dropdownItems: RULE_ABSENSE_OPTIONS
                                            }
                                        ),
                                        statusFilter(apply, parameters),
                                        advisoryFilter
                                    ]
                                }}
                            />
                            {StatusModal && <StatusModal />}
                        </InventoryTable>
                    }
                </StackItem>
            </Stack>
        </React.Fragment>
    );
};

SystemsExposedTable.propTypes = {
    intl: propTypes.object,
    cve: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.array
};

export default injectIntl(
    withRouter(
        SystemsExposedTable
    )
);
