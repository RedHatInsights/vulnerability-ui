import React, { useState, useEffect } from 'react';
import propTypes from 'prop-types';
import {
    Modal,
    Button,
    Form,
    FormGroup,
    TextInput,
    Checkbox,
    TextArea,
    ToggleGroup,
    ToggleGroupItem
} from '@patternfly/react-core';
import { useDispatch, useSelector } from 'react-redux';
import {
    CVE_REPORT_FILTERS,
    PDF_REPORT_USER_NOTE_MAX_LENGTH,
    CUSTOM_REPORT_SORT_OPTIONS
} from '../../../Helpers/constants';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import styles from '../Reports/Common/styles';
import { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';
import SelectCustomSorter from '../../PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter';
import TagFilter from '../../PresentationalComponents/Filters/CustomFilters/TagFilter';
import { fetchOperatingSystems } from '../../../Store/Actions/Actions';
import buildOSGroups from '../Reports/Common/buildOSGroups';

const ReportConfigModal = ({
    isOpen: isModalOpen,
    handleModalClose,
    filterData,
    sorterData,
    setFilterData,
    setSorterData,
    handleDownloadButton,
    columnsToInclude,
    setColumnsToInclude,
    userNotes,
    setUserNotes,
    reportTitle,
    setReportTitle,
    inheritGlobalTags,
    setInheritGlobalTags,
    globalFilterTags,
    cvesWithoutErrata
}) => {
    const dispatch = useDispatch();
    const [includeAllColumns, setIncludeAllColumns] = useState(true);
    const operatingSystems = useSelector(({ ReportsPageStore }) => ReportsPageStore?.operatingSystems?.data);
    const osGroups = buildOSGroups(operatingSystems || []);

    const ACTIVE_FILTERS = [
        'rule_presence',
        'known_exploit',
        'impact',
        'cvss_filter',
        'business_risk_id',
        'status_id',
        'publish_date',
        'rhel_version',
        ...cvesWithoutErrata ? ['advisory_available'] : []
    ];

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        } else {
            setColumnsToInclude(
                columnsToInclude.filter((item) => item !== parameter)
            );
        }
    };

    useEffect(() => {
        if (includeAllColumns) {
            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));
        }

    }, [includeAllColumns, setColumnsToInclude]);

    useEffect(() => {
        dispatch(fetchOperatingSystems());
    }, [dispatch]);

    return (
        <Modal
            width="50rem"
            title={intl.formatMessage(messages.configModalTitle)}
            ouiaId="custom-report-modal"
            isOpen={isModalOpen}
            onClose={() => {
                handleModalClose();
                setInheritGlobalTags(true);
            }}
            actions={[
                <Button
                    key="export"
                    variant="primary"
                    onClick={handleDownloadButton}
                    isDisabled={
                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||
                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH
                    }
                >
                    {intl.formatMessage(messages.configModalExportReport)}
                </Button>,
                <Button
                    key="cancel"
                    variant="secondary"
                    onClick={() => {
                        handleModalClose();
                        setInheritGlobalTags(true);
                    }}
                >
                    {intl.formatMessage(messages.cancel)}
                </Button>
            ]}
        >
            <Form>
                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId="horizontal-form-name">
                    <TextInput
                        value={reportTitle}
                        onChange={(value) => setReportTitle(value)}
                        type="text"
                        className="report-text-input"
                        id="horizontal-form-name"
                    />
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}
                >
                    <div className="custom-report-select-wrapper">
                        {ACTIVE_FILTERS.map((filterId) => {
                            return (
                                CVE_REPORT_FILTERS[filterId]?.component({
                                    ...CVE_REPORT_FILTERS[filterId],
                                    filterData,
                                    setFilterData,
                                    selectProps: {
                                        className: 'pf-u-mr-sm pf-u-mb-sm',
                                        ...CVE_REPORT_FILTERS[filterId].selectProps
                                    },
                                    options: CVE_REPORT_FILTERS[filterId].items,
                                    filterId,
                                    filterName: CVE_REPORT_FILTERS[filterId].title,
                                    ...(filterId === 'rhel_version' ? {
                                        // overriding parameters specific to the OS filter
                                        options: Object.values(osGroups).flat(),
                                        groups: osGroups
                                    } : {})
                                })
                            );
                        })}
                    </div>
                </FormGroup>
                <FormGroup
                    label={intl.formatMessage(messages.tagFilterTitle)}
                >
                    <TagFilter
                        onEdit={() => setInheritGlobalTags(false)}
                        selectedTags={filterData.tags}
                        setSelectedTags={tags => setFilterData({ ...filterData, tags })}
                        globalTags={globalFilterTags}
                        inheritGlobalTags={inheritGlobalTags}
                    />
                    {globalFilterTags?.length > 0 && inheritGlobalTags &&
                        <div className="pf-u-font-size-sm pf-u-mt-sm">
                            {intl.formatMessage(messages.tagFilterGlobal)}
                            <a className="pf-u-ml-md" onClick={() => {
                                setInheritGlobalTags(false);
                                filterData.tags = [];
                            }}>
                                {intl.formatMessage(messages.tagFilterClear)}
                            </a>
                        </div>
                    }
                </FormGroup>

                <FormGroup
                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}
                >
                    <ToggleGroup aria-label="Default with single selectable">
                        <ToggleGroupItem
                            text={intl.formatMessage(messages.customReportDataToggleAll)}
                            isSelected={includeAllColumns}
                            onChange={() => setIncludeAllColumns(true)} />
                        <ToggleGroupItem
                            text={intl.formatMessage(messages.customReportDataToggleCustom)}
                            isSelected={!includeAllColumns}
                            onChange={() => setIncludeAllColumns(false)} />
                    </ToggleGroup>

                    {includeAllColumns ||
                        <div style={styles.columns}>
                            <Checkbox
                                id="cve_id"
                                label="CVE ID"
                                isChecked
                                isDisabled
                                className="pf-u-mb-md"
                            />
                            {
                                Object.entries(CVE_REPORT_FILTERS)
                                    .filter(([key]) => cvesWithoutErrata || key !== 'advisory_available')
                                    .filter(([, value]) => value.hasColumn !== false)
                                    .map(([key, value]) =>
                                        <Checkbox
                                            id={key}
                                            key={key}
                                            label={value.title}
                                            isChecked={columnsToInclude.includes(key)}
                                            onChange={(newValue) =>
                                                handleCheckboxChange(key, newValue)
                                            }
                                            className="pf-u-mb-md"
                                        />
                                    )
                            }
                        </div>
                    }
                </FormGroup>

                <FormGroup
                    label={intl.formatMessage(messages.customReportSortDataByLabel)}
                >
                    <div className="custom-report-select-wrapper">
                        <SelectCustomSorter sorterData={sorterData} setSorterData={setSorterData}
                            selectProps={{ className: 'pf-u-mr-sm pf-u-mb-sm' }}
                            options={CUSTOM_REPORT_SORT_OPTIONS} />
                    </div>
                </FormGroup>

                <FormGroup
                    label={intl.formatMessage(messages.customReportUserNotesLabel)}
                    fieldId="user-notes-box"
                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}
                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                >
                    <TextArea
                        value={userNotes}
                        onChange={(value) => setUserNotes(value)}
                        type="text"
                        id="user-notes-box"
                        className="report-text-input"
                        resizeOrientation="vertical"
                        style={{ minHeight: '4em' }}
                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
};

ReportConfigModal.propTypes = {
    isOpen: propTypes.bool,
    filterData: propTypes.object,
    sorterData: propTypes.string,
    setFilterData: propTypes.func,
    setSorterData: propTypes.func,
    handleModalClose: propTypes.func,
    handleDownloadButton: propTypes.func,
    columnsToInclude: propTypes.array,
    setColumnsToInclude: propTypes.func,
    userNotes: propTypes.string,
    setUserNotes: propTypes.func,
    reportTitle: propTypes.string,
    setReportTitle: propTypes.func,
    inheritGlobalTags: propTypes.bool,
    setInheritGlobalTags: propTypes.func,
    globalFilterTags: propTypes.array,
    cvesWithoutErrata: propTypes.bool
};

export default ReportConfigModal;
