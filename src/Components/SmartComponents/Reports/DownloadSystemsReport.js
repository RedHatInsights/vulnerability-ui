
import React, { useState } from 'react';
import propTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getSystems } from '../../../Helpers/APIHelper';
import { chunkArray } from '../../../Helpers/MiscHelper';
import messages from '../../../Messages';
import firstPagePDF from './Common/firstPagePDF';
import tablePage from './Common/tablePage';
import DownloadReport from '../../../Helpers/DownloadReport';
import { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';
import { useNotification } from '../../../Helpers/Hooks';

const DownloadSystemsReport = ({
    filters,
    params,
    reportData = {},
    buttonProps,
    label,
    ...props
}) => {
    const intl = useIntl();
    const [loading, setLoading] = useState(false);
    const [addNotification, clearNotifications] = useNotification();
    const { systemsReportRestPages, systemsReportFirstPage } = PDF_REPORT_PER_PAGE;

    const otherPagesPDF = data => chunkArray(data, systemsReportRestPages);

    const systemsFetch = async () => {
        setLoading(true);

        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });

        let data;
        let meta;

        try {
            ({ data, meta } = await getSystems({
                ...params,
                ...DownloadReport.defaultParams
            }));
        }
        catch {
            clearNotifications();
            addNotification({
                variant: 'danger',
                autoDismiss: false,
                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),
                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)
            });

            return [];
        }

        const firstPage = firstPagePDF({
            data: data.splice(0, systemsReportFirstPage),
            meta,
            filters,
            intl
        });

        const otherPages = otherPagesPDF(data);

        setLoading(false);

        clearNotifications();
        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });

        return [
            firstPage,
            ...otherPages.map((systemPage, index) =>
                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })
            )
        ];
    };

    return (
        <div>
            <DownloadButton
                {...props}
                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}
                asyncFunction={systemsFetch}
                buttonProps={{ component: 'button', ...buttonProps }}
                reportName={intl.formatMessage(messages.systemPDFReportName)}
                type={''}
                fileName={`${DownloadReport.filename('system-list')}.pdf`}
                allPagesHaveTitle={false}
                size={'A4'}
                orientation={'landscape'}
            />
        </div>
    );
};

DownloadSystemsReport.defaultProps = {
    label: messages.kebabExportAsPDF
};

DownloadSystemsReport.propTypes = {
    filters: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ]),
    params: propTypes.object,
    reportData: propTypes.object,
    buttonProps: propTypes.object,
    label: propTypes.oneOfType([
        propTypes.array,
        propTypes.object
    ])
};

export default DownloadSystemsReport;
