import { renderHook, act } from '@testing-library/react';
import { createTestWrapper } from '../Utilities/TestWrapper';
import { MemoryRouter } from 'react-router-dom';

import useUrlParams, { constructURLParameters } from './useUrlParams';

describe('MiscHelper', () => {
    it('useUrlParams', async () => {
        const { result } = renderHook(() =>  useUrlParams(['a', 'b']), {
            wrapper: createTestWrapper(MemoryRouter, { initialEntries: ['/'] })
        });

        await act(()=> {
            result.current[1]({ a: 'testValue', b: 'testValue', c: 'testValue' });
        });

        expect(result.current[0].get('a')).toEqual('testValue');
        expect(result.current[0].get('b')).toEqual('testValue');
        expect(result.current[0].get('c')).toEqual(null);
    });

    it.each`
        urlParams                               | expected_data
        ${undefined}                            | ${undefined}
        ${{}}                                   | ${{}}
        ${{ a: 'testValue', b: undefined }}     | ${{ a: 'testValue' }}
        ${{ a: false, b: 'testValue' }}         | ${{ b: 'testValue' }}
        ${{ a: 'testValue', c: 'testValue' }}   | ${{ a: 'testValue' }}
        ${{ a: '', b: 'testValue' }}            | ${{ b: 'testValue' }}
    `('constructURLParameters', ({ urlParams, expected_data }) => { // eslint-disable-line camelcase

        const result = constructURLParameters(urlParams, ['a', 'b']);
        expect(result).toEqual(expected_data);
    });
});
