import React from 'react';
import { Provider } from 'react-redux';
import * as deps from '../../../Helpers/APIHelper';
import CVEStatusModal from './CveStatusModal';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { act } from 'react-dom/test-utils';

const MockStore = ({ children }) => <Provider store={ReducerRegistry.getStore()}>{children}</Provider>;

describe('CveStatusModal component', () => {
    it('should render with one CVE selected', () => {
        const setCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));

        deps.setCveStatus = setCveStatusMock; // CVE status
        deps.setSystemCveStatus = setSystemCveStatusMock; // CVE-system pair status, only call when checkbox is unchecked

        const cveList = [{
            id: "CVE-2020-0001",
            status_id: "3",
            justification: "old justification"
        }];

        const statusModal = mountWithIntl(
            <MockStore>
                <CVEStatusModal open cves={cveList} />
            </MockStore>
        );

        const setStatus = statusModal.find('FormSelect').prop('onChange');
        const setJustificationNote = statusModal.find('TextArea').first().prop('onChange');
        const saveButton = statusModal.find({ variant: 'primary' }).last();

        act(() => {
            setStatus(5);
            setJustificationNote('new justification');
        });

        saveButton.simulate('click');

        expect(setCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001'],
            status_id: 5,
            status_text: 'new justification'
        });
    });

    it('should render with multiple CVEs selected', () => {
        const setCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));
        const setSystemCveStatusMock = jest.fn(parameters => new Promise(resolve => resolve(parameters)));

        deps.setCveStatus = setCveStatusMock; // CVE status
        deps.setSystemCveStatus = setSystemCveStatusMock; // CVE-system pair status, only call when checkbox is unchecked

        const cveList2 = [
            {
                id: "CVE-2020-0001",
                status_id: "3",
                justification: "test"
            },
            {
                id: "CVE-2020-0002",
                status_id: "4",
                justification: "test2"
            }
        ];

        const statusModal = mountWithIntl(
            <MockStore>
                <CVEStatusModal open cves={cveList2} />
            </MockStore>
        );

        const setStatus = statusModal.find('FormSelect').prop('onChange');
        const setJustificationNote = statusModal.find('TextArea').first().prop('onChange');
        const saveButton = statusModal.find({ variant: 'primary' }).last();

        act(() => {
            setStatus(0);
            setJustificationNote('new justification');
        });

        saveButton.simulate('click');

        expect(setCveStatusMock).toBeCalledWith({
            cve: ['CVE-2020-0001', 'CVE-2020-0002'],
            status_id: 0,
            status_text: 'new justification'
        });
    });
});
