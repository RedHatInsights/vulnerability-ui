
import React, { useState, useCallback } from 'react';
import { classNames, expandable, sortable, nowrap, wrappable } from '@patternfly/react-table';
import messages from '../../../Messages';
import { intl } from '../../../Utilities/IntlProvider';
import DownloadReport from '../../../Helpers/DownloadReport';
import {
    addNotification,
    clearNotifications
} from '@redhat-cloud-services/frontend-components-notifications/redux';
import { useDispatch } from 'react-redux';
import { fetchCveListByAccount } from '../../../Store/Actions/Actions';

export const VULNERABILITIES_HEADER = [
    {
        title: intl.formatMessage(messages.cveId),
        key: 'synopsis',
        transforms: [sortable],
        columnTransforms: [wrappable],
        cellFormatters: [expandable],
        isShownByDefault: true,
        isUnhidable: true
    },
    {
        title: intl.formatMessage(messages.publishDate),
        key: 'public_date',
        transforms: [sortable, wrappable],
        columnTransforms: [classNames('hide-description')],
        isShownByDefault: true
    },
    {
        title: intl.formatMessage(messages.impact),
        key: 'impact',
        transforms: [sortable],
        columnTransforms: [nowrap],
        isShownByDefault: true
    },
    {
        title: intl.formatMessage(messages.cvssBaseScore),
        key: 'cvss_score',
        transforms: [sortable, wrappable],
        isShownByDefault: true
    },
    {
        title: intl.formatMessage(messages.systemsExposed),
        key: 'systems_affected',
        transforms: [sortable, wrappable],
        isShownByDefault: true
    },
    {
        title: intl.formatMessage(messages.businessRisk),
        key: 'business_risk',
        transforms: [sortable, wrappable],
        isShownByDefault: true
    },
    {
        title: intl.formatMessage(messages.status),
        key: 'status',
        transforms: [sortable, wrappable],
        isShownByDefault: true
    }
];

export const getCveDefaultFilters = (shouldUseHybridSystemFilter, includesCvesWithoutErrata) => {
    return {
        affecting: shouldUseHybridSystemFilter ?  'rpmdnf,edge' : 'true',
        ...includesCvesWithoutErrata ? { advisory_available: 'true' } : {}
    };
};

export const useDownloadReport = (parameters, shouldUseHybridSystemFilter) => {
    const dispatch = useDispatch();

    return useCallback((format) => DownloadReport.exec(
        fetchCveListByAccount,
        parameters,
        format,
        'cves',
        notification => dispatch(addNotification(notification)),
        () => dispatch(clearNotifications()),
        shouldUseHybridSystemFilter
    ), [parameters]
    );
};

export const useShowModal = (Modal, modalProps = {}) => {
    const [ModalComponent, setModalComponent] = useState(() => () => null);

    const showModal = useCallback((cvesList, goToFirstPage) => {
        setModalComponent(() => () =>
            <Modal
                cves={cvesList}
                goToFirstPage={goToFirstPage}
                {...modalProps}
            />
        );
    }, [modalProps, Modal]);

    return [ModalComponent, showModal];
};
