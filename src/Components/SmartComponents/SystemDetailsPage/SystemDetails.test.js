import SystemDetails from "./SystemDetails";
import configureStore from 'redux-mock-store';
import { initialState } from '../../../Store/Reducers/SystemCvesStore';
import TestWrapper from "../../../Utilities/TestWrapper";
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false]
}));

const customMiddleWare = store => next => action => {
    next(action);
}

const mockStore = configureStore([customMiddleWare]);
let storeObj = {
    SystemCvesStore: initialState,
    SystemDetailsPageStore: {
        opt_out: false,
        loaded: true
    },
    entityDetails: {
        entity: { test: 'test' }
    },
    AppStore: {
        popup: {}
    }
};

describe('SystemDetails', () => {
    const mountComponent = (store) =>
        render(
            <TestWrapper store={ store }>
                <SystemDetails
                    rbacPermissions={{
                        canExport: true,
                        canReadVulnerabilityResults: true,
                        canEditPairStatus: true,
                        canReadExcluded: true
                    }}
                    isRbacLoading={false}
                />
            </TestWrapper>
        );

    it('Should render SystemCVEs when isOptOut is false', () => {
        const tempStore = mockStore(storeObj);
        mountComponent(tempStore);
        expect(screen.getByRole('heading', { name: 'CVEs' })).toBeVisible();
    });

    it('Should render EmptyStateExcludedSystem when isOptOut is true', () => {
        storeObj.SystemDetailsPageStore.opt_out = true;
        const tempStore = mockStore(storeObj);
        mountComponent(tempStore);
        expect(screen.getByRole('heading', {
            name: /vulnerability analysis disabled/i
        })).toBeVisible();
    });

    it('Should pass optOutSystemHandler to EmptyStateExcludedSystem component', () => {
        storeObj.SystemDetailsPageStore.opt_out = true;
        const tempStore = mockStore(storeObj);
        const mockFunc = jest.fn();
        render(
            <TestWrapper store={ tempStore }>
                <SystemDetails
                    optOutSystemHandler={mockFunc}
                    rbacPermissions={{
                        canExport: true,
                        canReadVulnerabilityResults: true,
                        canEditPairStatus: true,
                        canReadExcluded: true
                    }}
                    isRbacLoading={false}
                />
            </TestWrapper>
        );

        userEvent.click(screen.getByText(/enable vulnerability analysis/i));
        expect(mockFunc).toHaveBeenCalledWith(undefined, false);
    });

    it('Should render null when entity is undefined or loaded is false', () => {
        storeObj.entityDetails.entity = undefined;
        const tempStore = mockStore(storeObj);
        mountComponent(tempStore);
        expect(screen.queryByRole('heading', { name: /vulnerability analysis disabled/i })).toBeFalsy();
        expect(screen.queryByRole('heading', { name: 'CVEs' })).toBeFalsy();
    });
});
