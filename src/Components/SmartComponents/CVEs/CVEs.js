import React, { useMemo, useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Stack, StackItem } from '@patternfly/react-core';
import { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';
import { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';
import { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';
import { constructFilterParameters, updateRef, useCreateUrlParams } from '../../../Helpers/MiscHelper';
import BusinessRiskModal from '../Modals/BusinessRiskModal';
import StatusModal from '../Modals/CveStatusModal';
import SystemCveTable from './CVEsTable';
import SystemCveTableToolbar from './CVEsTableToolbar';
import DownloadReport from '../../../Helpers/DownloadReport';
import {
    changeCveListParameters,
    fetchCveListByAccount,
    selectCve,
    expandCve,
    clearCVEsStore
} from '../../../Store/Actions/Actions';

export const CVETableContext = React.createContext({});

export const CVEs = () => {
    const dispatch = useDispatch();
    const [CveStatusModal, setStatusModal] = useState(() => () => null);
    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);
    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);
    const [isFirstLoad, setIsFirstLoad] = useState(true);

    const cveList = useSelector(
        ({ CVEsStore }) =>  CVEsStore.cveList
    );
    const parameters = useSelector(
        ({ CVEsStore }) => CVEsStore.parameters
    );
    const selectedCves = useSelector(
        ({ CVEsStore }) => CVEsStore.selectedCves
    );
    const openedCves = useSelector(
        ({ CVEsStore }) => CVEsStore.openedCves
    );
    const expandCveDescription = useSelector(
        ({ CVEsStore }) => CVEsStore.expandCveDescription
    );

    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);
    const [createUrlParams, urlParameters] = useCreateUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);

    const apply = (filterParams = {}) => {
        const params = constructFilterParameters(filterParams);
        dispatch(changeCveListParameters(params));
    };

    useEffect(() => {
        if (isFirstLoad) {
            apply(urlParameters);
            setIsFirstLoad(false);
        }
        else {
            dispatch(fetchCveListByAccount(parameters));
            urlParamsAllowed
                && createUrlParams({ ...parameters })
                || setUrlParamsAllowed(true);
        }
    }, [parameters]);

    useEffect(() => {
        return () => {
            dispatch(clearCVEsStore());
        };
    }, []);

    const processError = () => {
        return GenericError;
    };

    const handleCveSelect = (isSelected, cveNames) => {
        dispatch(selectCve(cveNames || []));
    };

    const downloadReport = format => {
        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');
    };

    const showBusinessRiskModal = cvesList => {
        const  { meta } = cves;
        setBusinessRiskModal(() => () =>
            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)
        );
    };

    const showStatusModal = cvesList => {
        const  { meta } = cves;
        setStatusModal(() => () =>
            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)
        );
    };

    const openCves = (cves) => {
        dispatch(expandCve(cves));
    };

    if (!cves.errors) {
        return (
            <CVETableContext.Provider
                value={{
                    cves,
                    params: parameters,
                    selectedCves,
                    openedCves,
                    expandCveDescription,
                    methods: {
                        apply,
                        downloadReport,
                        selectCves: handleCveSelect,
                        showBusinessRiskModal,
                        showStatusModal,
                        openCves
                    }
                }}
            >
                <CveBusinessRiskModal />
                <CveStatusModal />

                <Stack>
                    <StackItem>
                        <SystemCveTableToolbar showAllCheckbox />
                    </StackItem>
                    <StackItem>
                        <SystemCveTable header={VULNERABILITIES_HEADER} showAllCheckbox />
                    </StackItem>
                </Stack>
            </CVETableContext.Provider>
        );
    } else {
        return processError(cves.errors);
    }

};

export default CVEs;
