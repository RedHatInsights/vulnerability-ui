import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import * as reactRouterDom from 'react-router-dom';
import * as ReactRedux from 'react-redux';
import { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';
import { useCreateUrlParams, updateRef, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import {
    Table as PfTable,
    TableBody,
    TableHeader,
    TableGridBreakpoint,
    cellWidth,
    TableVariant,
    sortable,
    expandable,
    SortByDirection
} from '@patternfly/react-table';
import { useDispatch, useSelector } from 'react-redux';
import React, { useEffect, useState, useMemo } from 'react';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { middlewareListener } from '../../../Utilities/ReducerRegistry';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';
import { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import DownloadReport from '../../../Helpers/DownloadReport';
import Remediation from '../Remediation/Remediation';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import {
    selectMultipleEntities,
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    expandRow,
    changeExposedSystemsParameters,
    clearCveStore,
    fetchAffectedSystemsIdsByCve,
    clearInventoryStore
} from '../../../Store/Actions/Actions';
import {
    SYSTEMS_EXPOSED_HEADER,
    SYSTEMS_EXPOSED_ALLOWED_PARAMS,
    SYSTEMS_EXPOSED_SORTING_HEADER
} from '../../../Helpers/constants';

const SystemsExposedTable = (props) => {
    const [InventoryTable, setInventoryTable] = useState(()=> () => <div>Loading...</div>);
    const [StatusModal, setStatusModal] = useState(() => () => null);
    const [selectedHosts, setSelectedHosts] = useState(undefined);
    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);
    const [isFirstMount, setIsFirstMount] = useState(true);

    const inventory = React.createRef();
    const dispatch = useDispatch();
    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);

    const affectedSystems = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE
    );

    const isLoading = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading
    );

    const parameters = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters
    );

    const metadata = useSelector(
        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta
    );

    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems, ...props.cve }), [affectedSystems]);

    const apply = (config) => dispatch(changeExposedSystemsParameters(config));

    const inventoryRefresh = ({ page, per_page: pageSize, sort }) => {
        if (inventory.current && (metadata.page !== page || metadata.page_size !== pageSize)) {
            apply({ page, page_size: pageSize, sort });
        }

        if (metadata && metadata.total_items <= pageSize && inventory.current) {
            inventory.current.onRefreshData({ page, page_size: pageSize, sort });
        }
    };

    const handleSelect = (isChecked, payload) => {
        const selectedHosts = payload ? payload : [];
        setSelectedHosts(selectedHosts);
    };

    const onSelect = (payload) => {
        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]
            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);

        handleSelect(false, newSelected);
    };

    middlewareListener.addNew({
        on: 'SELECT_ENTITY',
        callback: payload => onSelect(payload)
    });

    useEffect(() => {
        if (!inventory.current && isFirstMount) {
            apply(urlParameters);
            setIsFirstMount(false);
        }
        else {
            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));
            urlParamsAllowed
                && createUrlParams({ ...parameters })
                || setUrlParamsAllowed(true);
        }
    }, [parameters]);

    useEffect(()=>{
        if (selectedHosts) {
            dispatch(selectMultipleEntities(selectedHosts));
        }
    }, [selectedHosts, dispatch]);

    const loadInventory = async () => {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            ReactRedux,
            react: React,
            reactRouterDom,
            pfReactTable: {
                Table: PfTable,
                TableBody,
                TableHeader,
                TableGridBreakpoint,
                cellWidth,
                TableVariant,
                sortable,
                expandable,
                SortByDirection
            },
            pfReact: reactCore
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),
            ...mergeWithDetail()
        });

        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());
        setInventoryTable(() => InventoryTable);
    };

    useEffect(() => {
        loadInventory();
        return () => {
            dispatch(clearCveStore());
            dispatch(clearInventoryStore());
        };
    }, []);

    const downloadReport = format => {
        let params = [props.cve, { ...parameters }];
        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');
    };

    const showStatusModal = (cves, inventories) => {
        setStatusModal(
            () => () =>
                <CvePairStatusModal
                    cves={cves}
                    updateRef={() => {
                        updateRef(items.meta, apply);
                        fetchCveDetails(props.cve);
                    }}
                    inventories={ inventories }
                    type={'systemsExposed'}
                />

        );
    };

    const getSelectedSystemsLabel = () => {
        // we only need display name when we have 1 system selected
        if (selectedHosts.length === 1) {
            const { id, display_name: displayName } = items.data.find(({ id }) => id === selectedHosts[0]);
            return [{ id, displayName }];
        }
        else if (selectedHosts.length > 1) {
            return selectedHosts.map(item => ({ id: item }));
        }

        return [];
    };

    const kebabOptions = [
        (!isLoading && (<Remediation systems={selectedHosts} cves={props.cve} />) || ''),
        {
            label: props.intl.formatMessage(messages.editStatus),
            onClick: () => showStatusModal(
                [props.cveStatusDetails],
                getSelectedSystemsLabel()
            ),
            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }
        }
    ];

    const selectOptions  = useMemo(() => selectAllCheckbox({
        selectedItems: selectedHosts || [],
        selectorHandler: handleSelect,
        items: items.data && items || { data: [], meta: { total_items: 0 } },
        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })
    }), [items, selectedHosts, parameters]);

    const sortBy = () =>
        createSortBy(
            SYSTEMS_EXPOSED_SORTING_HEADER,
            urlParameters.sort
        );

    const onSort = (event, index, direction) =>
        handleSortColumn(
            index,
            direction,
            SYSTEMS_EXPOSED_SORTING_HEADER,
            urlParameters.sort,
            inventoryRefresh
        );

    return (
        <React.Fragment>
            <Stack hasGutter>
                <StackItem>
                    <TextContent>
                        <Text component={TextVariants.h2}>
                            {props.intl.formatMessage(messages.systemsExposedTableHeader)}
                        </Text>
                    </TextContent>
                </StackItem>
                <StackItem>
                    <InventoryTable
                        tableProps={{
                            canSelectAll: false,
                            onSort: (items.data.length > 0) && onSort,
                            sortBy: (items.data.length > 0) && sortBy(),
                            actionResolver: (rowData, rowIndex) =>
                                systemExposedTableRowActions(showStatusModal, props.cveStatusDetails, rowIndex.rowIndex)
                        }}
                        items={items.data}
                        key={'inventory'}
                        ref={inventory}
                        expandable='true'
                        onRefresh={inventoryRefresh}
                        page={parameters.page}
                        total={metadata.total_items}
                        isLoaded = {!isLoading}
                        perPage={parameters.page_size }
                        hasCheckbox={items && items.length !== 0}
                        showActions={items && items.length !== 0}
                        exportConfig={{
                            isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),
                            ...exportConfig({ downloadReport })
                        }}
                        onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}
                        actionsConfig={{
                            actions: kebabOptions,
                            kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 }
                        }}
                        activeFiltersConfig={{
                            filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),
                            onDelete: (e, i) => removeFilters(i, apply)
                        }}
                        bulkSelect ={ selectOptions && {
                            count: selectedHosts && selectedHosts.length,
                            items: selectOptions.items,
                            isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),
                            checked: Boolean(selectedHosts && selectedHosts.length),
                            onSelect: () => selectOptions.handleOnCheckboxChange()
                        }}
                        filterConfig={{
                            items: [
                                searchFilter(
                                    messages.systemsSearchName, messages.searchFilterByName,
                                    parameters.filter, apply
                                ),
                                securityRuleFilter(apply, parameters, props.filterRuleValues),
                                statusFilter(apply, parameters)
                            ]
                        }}
                    >
                        {StatusModal && <StatusModal />}
                    </InventoryTable>
                </StackItem>
            </Stack>
        </React.Fragment>
    );
};

SystemsExposedTable.propTypes = {
    intl: propTypes.object,
    cve: propTypes.string,
    cveStatusDetails: propTypes.object,
    filterRuleValues: propTypes.array
};

export default injectIntl(
    withRouter(
        SystemsExposedTable
    )
);
