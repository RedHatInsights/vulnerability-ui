import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text, View } from '@react-pdf/renderer';
import messages from '../../../../../Messages';
import tablePage from '../tablePage/tablePage';
import {
    PUBLIC_DATE_OPTIONS,
    getFilters, getCveReportFilters,
    SYSTEM_REPORT_FILTERS
} from '../../../../../Helpers/constants';
import { intlFormatWithBold } from '../../../../../Helpers/ReportsHelper';
import styles from '../styles';
import CheckboxCustomFilter
    from '../../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';
import CvesFiltersParagraph from './CvesFiltersParagraph';
import SystemsFilterParagraph from './SystemsFilterParagraph';
import { getAffectingFilterTexts, cveFilterStringSegments, systemsFilterStringSegments } from './helpers';

const firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type, isEdgeParityEnabled }) => {
    const CVE_REPORT_FILTERS = getCveReportFilters(isEdgeParityEnabled);
    const FILTERS = getFilters(isEdgeParityEnabled);

    // if data isn't converted to object convert it
    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {
        obj[item.key] = {
            filter: item.category,
            values: item.key === 'publish_date'
                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label
                : item.chips.map(({ name }) => name).join(', '),
            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component
                === CheckboxCustomFilter
                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)
                : null
        };
        return obj;
    }, {});

    let filterStringSegments = type === 'cves' ? cveFilterStringSegments : systemsFilterStringSegments;

    // find and tag first present filter segment
    for (let i = 0; i < filterStringSegments.length; i++) {
        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {
            filterStringSegments[i].isFirst = true;
            break;
        }
    }

    // find and tag last present filter segment
    for (let i = filterStringSegments.length - 1; i >= 0; i--) {
        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {
            filterStringSegments[i].isLast = true;
            break;
        }
    }

    const affectingFilterText = getAffectingFilterTexts(meta.system_count.toString());
    const affectingSystemsMessage = affectingFilterText[filtersBuilder.affecting?.values] || '';
    return (
        <Fragment key="first-section">
            {
                isReportDynamic && (
                    <Paragraph>
                        {intlFormatWithBold(messages.customReportIntroductionText)}
                    </Paragraph>
                )
            }

            {type === 'cves'
                ? <CvesFiltersParagraph
                    filtersBuilder={filtersBuilder}
                    filterStringSegments={filterStringSegments}
                    isEdgeParityEnabled={isEdgeParityEnabled}
                    affectingFilterText={affectingFilterText}
                    intl={intl}
                /> : <SystemsFilterParagraph
                    filtersBuilder={filtersBuilder}
                    filterStringSegments={filterStringSegments}
                    filters={filters}
                />
            }

            {type === 'cves' && (
                <Paragraph>
                    <Text>
                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {
                            cve_count: meta.total_items.toString(),
                            system_count: meta.system_count.toString(),
                            affectingSystemsMessage
                        })}

                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&
                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {
                                knownExploitCount: meta.knownExploitCount.toString()
                            })
                        }
                    </Text>
                </Paragraph>
            )}

            {
                reportData && reportData.userNotes ?
                    (
                        <View style={styles.userNotes}>
                            <Paragraph style={styles.userNotesTitle}>
                                <Text style={styles.bold}>
                                    {intl.formatMessage(messages.customReportUserNoteLabel)}
                                </Text>
                            </Paragraph>
                            <Paragraph>
                                <Text>{reportData.userNotes}</Text>
                            </Paragraph>
                            <Paragraph>
                                {user && user.identity &&
                                    <Text style={styles.italic}>
                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {
                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`
                                        })}
                                    </Text>
                                }
                            </Paragraph>
                        </View>
                    ) : null
            }

            <View style={styles.mt16}>
                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}
            </View>
        </Fragment>
    );
};

firstPagePDF.defaultProps = {
    user: undefined
};

firstPagePDF.propTypes = {
    intl: PropTypes.any,
    filters: PropTypes.array,
    data: PropTypes.object,
    meta: PropTypes.object,
    reportData: PropTypes.object,
    isReportDynamic: PropTypes.bool,
    user: PropTypes.object,
    type: PropTypes.string
};

export default firstPagePDF;
