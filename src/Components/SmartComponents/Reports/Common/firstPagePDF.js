import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { Text, View } from '@react-pdf/renderer';
import messages from '../../../../Messages';
import tablePage from './tablePage';

const firstPagePDF = ({ cves, meta, filters, intl, isReportDynamic, reportData, user }) => {
    // if data isn't converted to object convert it
    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {
        obj[item.key] = {
            filter: item.category,
            values: item.chips.map(({ name }) => name).join(', ')
        };
        return obj;
    }, {});

    const generateFiltersParagraph = () =>
        // if there are no filters don't dispay this paragraph
        // if there is at least one start with "This report includes CVEs with "
        // if has CVSS          += "a CVSS base score of <min>-<max>"
        // if has publish_date  += "publish date" -> custom intl -> "withing 7 days ... 1 year OR more than 1 year ago"
        // if has severity      += "severity of <list>"
        // if has business risk += "business risk of <list>"
        // if has status        += "status of <list>"
        // if has security rule += "<option>" (has security rule)

        Object.keys(filtersBuilder).length === 0 ? undefined : (<Paragraph>
            {intl.formatMessage(messages.CVEsPDFreportHeader)}
            {filtersBuilder.hasOwnProperty('cvss_filter') && intl.formatMessage(messages.CVEsPDFreportFiltersCvssScore, {
                score: filtersBuilder.cvss_filter.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })}
            {filtersBuilder.hasOwnProperty('publish_date') && intl.formatMessage(messages.CVEsPDFreportFiltersPublishDate, {
                date: filtersBuilder.publish_date.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })}
            {filtersBuilder.hasOwnProperty('impact') && intl.formatMessage(messages.CVEsPDFreportFiltersSeverity, {
                severity: filtersBuilder.impact.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })}
            {filtersBuilder.hasOwnProperty('business_risk_id') && intl.formatMessage(messages.CVEsPDFreportFiltersBusinessRisk, {
                businessRisk: filtersBuilder.business_risk_id.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })}
            {filtersBuilder.hasOwnProperty('status_id') && intl.formatMessage(messages.CVEsPDFreportFiltersStatus, {
                status: filtersBuilder.status_id.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })}
            {filtersBuilder.hasOwnProperty('security_rule') && intl.formatMessage(messages.CVEsPDFreportFiltersSecurityRule, {
                securityRule: filtersBuilder.security_rule.values,
                b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
            })} {'\n\n'}
        </Paragraph>
        );

    return (
        <Fragment key="first-section">
            {
                isReportDynamic && (
                    <Paragraph>
                        {intl.formatMessage(messages.customReportIntroductionText)}
                    </Paragraph>
                )
            }

            { generateFiltersParagraph() }

            <Paragraph>
                {intl.formatMessage(messages.CVEsPDFreportSubHeader, {
                    cve_count: meta.total_items.toString(),
                    system_count: meta.system_count.toString(),
                    b: (...chunks) => <Text style={{ fontWeight: 700 }}>{chunks}</Text>
                })}
            </Paragraph>

            {
                reportData && reportData.userNotes ?
                    (<View style={{ backgroundColor: '#F0F0F0', padding: '8px', marginBottom: '16px' }}>
                        <Paragraph style={{ marginBottom: '4px' }}><Text style={{ fontWeight: 700 }}>
                            {intl.formatMessage(messages.customReportUserNoteLabel)}
                        </Text></Paragraph>
                        <Paragraph style={{ marginBottom: '0px' }}><Text>{reportData.userNotes}</Text></Paragraph>
                        <Paragraph>
                            { user && user.identity &&
                                <Text style={{ fontStyle: 'italic' }}>
                                    - {user.identity.user.first_name} {user.identity.user.last_name}
                                </Text>
                            }
                        </Paragraph>
                    </View>
                    ) : null
            }

            {tablePage({ data: cves, intl, header: reportData && reportData.header })}
        </Fragment>
    );
};

firstPagePDF.defaultProps = {
    user: undefined
};

firstPagePDF.propTypes = {
    intl: PropTypes.any,
    filters: PropTypes.array,
    cves: PropTypes.object,
    meta: PropTypes.object,
    reportData: PropTypes.object,
    isReportDynamic: PropTypes.bool,
    user: PropTypes.object
};

export default firstPagePDF;
