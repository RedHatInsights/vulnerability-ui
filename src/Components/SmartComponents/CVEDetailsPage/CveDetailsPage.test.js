import CveDetailsPage, { CVEPageContext } from './CVEDetailsPage';
import { initialState } from '../../../Store/Reducers/CVEDetailsPageStore';
import configureStore from 'redux-mock-store';
import { useSelector } from 'react-redux';
import Immutable from 'seamless-immutable';
import { render, screen } from '@testing-library/react';
import TestWrapper from '../../../Utilities/TestWrapper';
import { getAffectedSystemsByCVE } from '../../../Helpers/APIHelper';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false]
}));

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));

jest.mock('../../../Store/Actions/Actions', () => ({
    ...jest.requireActual('../../../Store/Actions/Actions'),
    fetchCveDetails: () => ({
        type: 'FETCH_CVE_DETAILS',
        payload: new Promise(() => {})
    })
}));

jest.mock('@unleash/proxy-client-react', () => ( {
    ...jest.requireActual('@unleash/proxy-client-react'),
    useFlag: () => true, 
    useFlagsStatus: () => ({ flagsReady: true })
}))

jest.mock('../../../Helpers/APIHelper', () => ({
    ...jest.requireActual('../../../Helpers/APIHelper'),
    getAffectedSystemsByCVE: jest.fn()
}));

let state = {
    ...initialState,
    cveDetails: {
        isLoading: false,
        error: false,
        payload: Immutable({
            data: {
                attributes: {
                    business_risk: "High",
                    business_risk_id: 3,
                    business_risk_text: null,
                    cvss2_metrics: null,
                    cvss2_score: null,
                    cvss3_metrics: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
                    cvss3_score: "6.500",
                    description: "A new domain bypass transient execution attack",
                    modified_date: "2020-07-20T10:37:20+00:00",
                    public_date: "2020-06-09T17:00:00+00:00",
                    redhat_url: "",
                    rules: [],
                    secondary_url: "",
                    status: "In-Review",
                    status_id: 1,
                    status_text: null,
                    synopsis: "CVE-2020-0543",
                    systems_status_detail: '',
                    systems_status_divergent: 73
                }
            }
        })
    }
}

useSelector.mockImplementation(callback => {
    return callback({ CVEDetailsPageStore: state })
});

const customMiddleWare = store => next => action => {
    next(action);
}

const mockStore = configureStore([customMiddleWare]);
const store = mockStore(initialState);
const props = { match: { params: { cve: 'testCve' } } };

getAffectedSystemsByCVE.mockImplementation(() => Promise.resolve({}))

describe('CVE details:', () => {
    it('Should render match snapshot', () => {
        const { asFragment } = render(
            <TestWrapper store={ store }>
                <CVEPageContext.Provider value={{ isLoading: false }}>
                    <CveDetailsPage  {...props} store={store} />
                </CVEPageContext.Provider>
            </TestWrapper>
        );

        expect(asFragment()).toMatchSnapshot();
    });

    it('Should dispatch actions to fetch data', () => {
        render(
            <TestWrapper store={ store }>
                <CveDetailsPage {...props} />
            </TestWrapper>
        );
        expect(store.getActions().some(({ type }) => type === 'FETCH_CVE_DETAILS')).toBeTruthy();
        expect(store.getActions().some(({ type }) => type === 'FETCH_AFFECTED_SYSTEMS_BY_CVE')).toBeFalsy();
    });

    describe('test modals: ', () => {
        it('Should display BusinessRiskModal', async () => {
            render(
                <TestWrapper store={ store }>
                    <CVEPageContext.Provider value={{ isLoading: false }}>
                        <CveDetailsPage {...props} store={store} />
                    </CVEPageContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Actions' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Edit business risk' }));
            expect(screen.getByRole('dialog', { name: 'Edit business risk' })).toBeVisible();
        });

        it('Should set StatusModal', () => {
            render(
                <TestWrapper store={ store }>
                    <CVEPageContext.Provider value={{ isLoading: false }}>
                        <CveDetailsPage {...props} store={store} />
                    </CVEPageContext.Provider>
                </TestWrapper>
            );

            userEvent.click(screen.getByRole('button', { name: 'Actions' }));
            userEvent.click(screen.getByRole('menuitem', { name: 'Edit status' }));
            expect(screen.getByRole('dialog', { name: 'Edit status for this CVE' })).toBeVisible();
        });
    });

    it('Should display InvalidObject page', () => {
        useSelector.mockImplementation(callback => {
            return callback({
                CVEDetailsPageStore: {
                    ...initialState,
                    cveDetails: {
                        isLoading: false,
                        error: {
                            hasError: true
                        }
                    }
                }
            })
        });

        render(
            <TestWrapper store={ store }>
                <CVEPageContext.Provider value={{ isLoading: false }}>
                    <CveDetailsPage {...props}/>
                </CVEPageContext.Provider>
            </TestWrapper>
        );

        expect(screen.getByRole('heading', { name: 'Something went wrong' })).toBeVisible();
    });

    it('Should process filterRulevalues and send as a prop to SystemsExposedPage', () => {
        let newState = { ...state };
        newState.cveDetails.payload = Immutable({
            data: {
                attributes: {
                    business_risk: "High",
                    business_risk_id: 3,
                    business_risk_text: null,
                    cvss2_metrics: null,
                    cvss2_score: null,
                    cvss3_metrics: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
                    cvss3_score: "6.500",
                    description: "A new domain bypass transient execution attack",
                    modified_date: "2020-07-20T10:37:20+00:00",
                    public_date: "2020-06-09T17:00:00+00:00",
                    redhat_url: "",
                    rules: [{
                        "associated_cves": [
                            "CVE-2019-11135"
                        ],
                        "change_risk": 3,
                        "description": "testDescription",
                        "generic": "sd",
                        "kbase_node_id": 4572391,
                        "playbook_count": 1,
                        "reboot_required": false,
                        "rule_id": "testID",
                        "summary": "testSummary"
                    }],
                    secondary_url: "",
                    status: "In-Review",
                    status_id: 1,
                    status_text: null,
                    synopsis: "CVE-2020-0543",
                    systems_status_detail: '',
                    systems_status_divergent: 73
                }
            }
        });
        useSelector.mockImplementation(callback => {
            return callback({ CVEDetailsPageStore: newState });
        });

        render(
            <TestWrapper store={ store }>
                <CVEPageContext.Provider value={{ isLoading: false }}>
                    <CveDetailsPage {...props}/>
                </CVEPageContext.Provider>
            </TestWrapper>
        );

        expect(screen.getByRole('button', { name: 'Security rule testDescription Filter by affected systems' })).toBeVisible();
    });

    it('Should render skeleton table', async () => {
        getAffectedSystemsByCVE.mockImplementation(() => Promise.resolve({ meta: { total_items: 1 }}))
        render(
            <TestWrapper store={ store }>
                <CVEPageContext.Provider value={{ isLoading: false }}>
                    <CveDetailsPage {...props}/>
                </CVEPageContext.Provider>
            </TestWrapper>
        );

        expect(screen.getByLabelText('Table title skeleton')).toBeVisible();
    });

    it('Should count only advisory available cves in the table title by filter the API with "advisory_available: true"', async () => {
        expect(getAffectedSystemsByCVE).toHaveBeenCalledWith(
            expect.objectContaining({ advisory_available: true }),     
        );
    });
});
