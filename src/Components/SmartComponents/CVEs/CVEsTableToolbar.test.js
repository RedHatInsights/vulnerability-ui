import CVEsTableToolbar from './CVEsTableToolbar';
import { CVETableContext } from './CVEs';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import toJson from 'enzyme-to-json';
import {
    handleChangePage,
    handleSetPageSize, 
    removeFilters
} from '../../../Helpers/TableToolbarHelper';


jest.mock('../../../Helpers/TableToolbarHelper', () => (
    {
      ...(jest.requireActual('../../../Helpers/TableToolbarHelper')),
      handleChangePage: jest.fn(),
      handleSetPageSize: jest.fn(),
      removeFilters: jest.fn()
    }
));

const mockContext = {
    cves: {
        isLoading: false,
        meta: {
            test: 'test'
        },
        data: [
            {
                type: 'cve',
                id: 'CVE-2019-6454',
                exposed_systems_count: 1,
                business_risk_id: 0,
                business_risk_justification: null,
                status_id: 2,
                status_justification: "testhello",
                attributes: {
                    business_risk: "Not Defined",
                    business_risk_id: 0,
                    business_risk_text: null,
                    cve_status_id: 2,
                    cve_status_text: "testhello",
                    cvss2_score: null,
                    cvss3_score: "6.500",
                    description: "A new domain bypass",
                    impact: "Moderate",
                    public_date: "2020-06-09T17:00:00+00:00",
                    reporter: 1,
                    rule: null,
                    status: "On-Hold",
                    status_id: 2,
                    status_text: "testhello",
                    synopsis: "CVE-2020-0543",
                    affected_systems: 1,
                    rule: 'testRule'
                }
            }
        ]

    },
    params: {},
    selectedCves: [],
    selectedRowsRawData: [
        {
          attributes: {
            business_risk: 'Not Defined',
            business_risk_id: 0,
            business_risk_text: null,
            cvss2_score: null,
            cvss3_score: '8.600',
            description: 'There\'s a flaw in libxml2. An attacker who is able to submit a crafted file to be processed by an application linked with libxml2 could trigger a use-after-free. The greatest impact from this flaw is to confidentiality, integrity, and availability.',
            impact: 'Moderate',
            known_exploit: false,
            public_date: '2021-04-22T00:00:00+00:00',
            rules: [],
            status: 'Resolved',
            status_id: 2,
            status_text: null,
            synopsis: 'CVE-2019-6454',
            systems_affected: 497,
            systems_status_divergent: 497,
            status_justification: 'testhello',
            exposed_systems_count: 1,
            business_risk_justification: null 
          },
          id: 'CVE-2019-6454',
          type: 'cve'
        }
    ],
    expandedRows: [],
    isAllExpanded: false,
    methods: {
        apply: jest.fn(),
        downloadReport: jest.fn(),
        selectCves: jest.fn(),
        showBusinessRiskModal: jest.fn(),
        showStatusModal: jest.fn(),
        openCves: jest.fn()
    }
};

describe('CVEsTableToolbar', () => {
    it('Should render without errors', () => {
        const wrapper = mountWithIntl(
            <CVETableContext.Provider value={mockContext}>
                <CVEsTableToolbar/>
            </CVETableContext.Provider>
        ); 
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should CVEsTableToolbarWithContext inherit default props', () => {
        let tempContext = { ...mockContext, methods: {} };
        const tempWrapper = mountWithIntl(
            <CVETableContext.Provider value={tempContext}>
                <CVEsTableToolbar/>
            </CVETableContext.Provider>
        );
        const { totalNumber, apply, downloadReport } = tempWrapper.find('CVEsTableToolbarWithContext').props();
        expect(totalNumber).toEqual(0);
        expect(apply()).toEqual(undefined);
        expect(downloadReport()).toEqual(undefined);
        tempWrapper.unmount();
        tempContext = {};
    });

    describe('actionsConfig:', () => {
        it('Should openCves be called with testCve if isAllExpanded = false', () => {
            const wrapper = mountWithIntl(
                <CVETableContext.Provider value={mockContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            ); 
            wrapper.find("Button").first().simulate("click");
            expect(mockContext.methods.openCves).toHaveBeenCalledWith(['CVE-2019-6454']);
        });
    
        it('Should openCves be called with empty array if isAllExpanded = true', () => {
            let tempContext = { ...mockContext, isAllExpanded: true };
            const tempWrapper = mountWithIntl(
                <CVETableContext.Provider value={tempContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            );
            tempWrapper.find("Button").first().simulate("click");
            expect(tempContext.methods.openCves).toHaveBeenCalledWith([]);
            tempWrapper.unmount();
            tempContext = {};
        });
        
        it('Should showStatusModal be called with item ID and status_id = 0', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            const wrapper = mountWithIntl(
                <CVETableContext.Provider value={testContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            ); 
            const { actionsConfig: { actions } } = wrapper.find('PrimaryToolbar').props();
            actions[2].onClick();
            expect(mockContext.methods.showStatusModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "status_id": 2, "justification": null, "exposed_systems_count": 497 }]);
        });

        it('Should showBusinessRiskModal be called with item ID and business_risk_id = 0', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            const wrapper = mountWithIntl(
                <CVETableContext.Provider value={testContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            ); 
            const { actionsConfig: { actions } } = wrapper.find('PrimaryToolbar').props();
            actions[1].onClick();
            expect(mockContext.methods.showBusinessRiskModal).toHaveBeenCalledWith([{ id: 'CVE-2019-6454', "business_risk_id": 0, "justification": null }]);
        });
    });
    
    describe('pagination:', () => {
        it('Should call handlePageChange on page change', () => {
              const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
              const wrapper = mountWithIntl(
                  <CVETableContext.Provider value={testContext}>
                      <CVEsTableToolbar/>
                  </CVETableContext.Provider>
              ); 
              const { pagination: { onSetPage } } = wrapper.find('PrimaryToolbar').props();
              onSetPage(null, 2);
              expect(handleChangePage).toHaveBeenCalledWith(null, 2, expect.any(Function));
        });

        it('Should call handleSetPageSize on page size change', () => {
            const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
            const wrapper = mountWithIntl(
                <CVETableContext.Provider value={testContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            ); 
            const { pagination: { onPerPageSelect } } = wrapper.find('PrimaryToolbar').props();
            onPerPageSelect(null, 2);
            expect(handleSetPageSize).toHaveBeenCalledWith(null, 2, expect.any(Function));
      });
    });

    describe('bulkSelect:', () => {
        it('Should handleOnCheckboxChange unselect all selected items', () => {
              const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
              const wrapper = mountWithIntl(
                  <CVETableContext.Provider value={testContext}>
                      <CVEsTableToolbar/>
                  </CVETableContext.Provider>
              ); 
              const { bulkSelect: { onSelect } } = wrapper.find('PrimaryToolbar').props();
              onSelect();
              expect(mockContext.methods.selectCves).toHaveBeenCalledWith(false, []);
        });
        it('Should handleOnCheckboxChange select all items', () => {
            const testContext = { ...mockContext, selectedCves: [] };
            const wrapper = mountWithIntl(
                <CVETableContext.Provider value={testContext}>
                    <CVEsTableToolbar/>
                </CVETableContext.Provider>
            ); 
            const { bulkSelect: { onSelect } } = wrapper.find('PrimaryToolbar').props();
            onSelect();
            expect(mockContext.methods.selectCves).toHaveBeenCalled();
      });
    });

    describe('activeFiltersConfig:', () => {
        it('Should call removeFilters with two parameters', () => {
              const testContext = { ...mockContext, selectedCves: ['CVE-2019-6454'] };
              const wrapper = mountWithIntl(
                  <CVETableContext.Provider value={testContext}>
                      <CVEsTableToolbar/>
                  </CVETableContext.Provider>
              ); 
              const { activeFiltersConfig: { onDelete } } = wrapper.find('PrimaryToolbar').props();
              onDelete(null, 'testitem');
              expect(removeFilters).toHaveBeenCalledWith('testitem', expect.any(Function), undefined, {"affecting": "true"});
        });
    });
});