import './Systems.scss';
import propTypes from 'prop-types';
import React from 'react';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';
import { middlewareListener } from '../../../Utilities/ReducerRegistry';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import DownloadReport from '../../../Helpers/DownloadReport';

const SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {

    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;

    const onSelect = (payload) => {
        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]
            : selectedHosts.filter(item => item !== payload.data.id);

        handleSelect(false, newSelected);
    };

    middlewareListener.addNew({
        on: 'SELECT_ENTITY',
        callback: payload => onSelect(payload)
    });

    const downloadReport = format => {
        let params = { ...parameters };
        DownloadReport.exec(fetchSystems, params,  format, 'system-list');
    };

    const handleOptOut = () => {
        apply({ opt_out: !parameters.opt_out, page: 1 });
        setSelectedHosts([]);
    };

    const kebabOptions = [
        '',
        {
            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)
                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),
            onClick: () => doOptOut(),
            props: { isDisabled: !selectedHosts.length }
        },
        {
            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)
                : intl.formatMessage(messages.kebabShowExcludedSystems),
            onClick: handleOptOut
        }
    ];

    const selectOptions = selectAllCheckbox({
        selectedItems: selectedHosts,
        selectorHandler: handleSelect,
        items: systems,
        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })
    });

    return (
        <PrimaryToolbar
            bulkSelect={{
                count: selectedHosts.length,
                items: selectOptions.items,
                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,
                checked: Boolean(selectedHosts.length),
                onSelect: () => selectOptions.handleOnCheckboxChange()
            }}
            actionsConfig={{
                actions: kebabOptions
            }}
            filterConfig={{
                items: [
                    searchFilter(
                        messages.systemsSearchName,
                        messages.searchFilterByName,
                        parameters.filter,
                        apply
                    )
                ]
            }}
            activeFiltersConfig={{
                filters: buildActiveFilters(parameters),
                onDelete: (e, i) => removeFilters(i, apply)
            }}
            exportConfig={{
                isDisabled: systems.meta.total_items === 0,
                ...exportConfig({ downloadReport })
            }}
        >
        </PrimaryToolbar>

    );

};

SystemsTableToolbar.propTypes = {
    systems: dataShape,
    parameters: propTypes.object,
    selectedHosts: propTypes.array,
    methods: propTypes.shape({
        doOptOut: propTypes.func,
        apply: propTypes.func,
        handleSelect: propTypes.func,
        setSelectedHosts: propTypes.func
    }),
    intl: propTypes.any
};

export default withRouter(
    injectIntl(SystemsTableToolbar)
);

