import React from 'react';
import { classNames, expandable, sortable, cellWidth, nowrap, wrappable } from '@patternfly/react-table';
import { renderSystemCSAwLabel } from './VulnerabilityHelper';
import StatusColumn from '../Components/PresentationalComponents/StatusColumn/StatusColumn';
import AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';
import SystemNameColumn from '../Components/PresentationalComponents/TableColumns/SystemNameColumn';
import CvssCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';
import CheckboxCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';
import RadioCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/RadioCustomFilter';
import messages from '../Messages';
import { intl } from '../Utilities/IntlProvider';
import { formatWithBold } from '../Components/SmartComponents/Reports/ReportsHelper';
import { Label as Pflabel } from '@patternfly/react-core';

export const DEFAULT_PAGE_SIZE = 20;
export const RH_KB_URL = 'https://access.redhat.com/node';
export const CVES_PATH = `${document.baseURI}insights/vulnerability/cves`;
export const ADVISORY_PATH = `${document.baseURI}insights/patch/advisories`;

export const impactTextList = {
    low: intl.formatMessage(messages.impactTextListLow),
    moderate: intl.formatMessage(messages.impactTextListModerate),
    important: intl.formatMessage(messages.impactTextListImportant),
    critical: intl.formatMessage(messages.impactTextListCritical)
};

export const PATHS = {
    home: {
        title: 'Vulnerability',
        to: '/'
    },
    cvesPage: {
        title: 'CVEs',
        to: '/cves'
    },
    cveDetailsPage: {
        title: 'CVE',
        to: '/cves/:cve'
    },
    systemsPage: {
        title: 'Systems',
        to: '/systems'
    },
    systemDetailsPage: {
        title: 'Inventory Detail',
        to: '/systems/:inventoryId'
    },
    cvepagePath: {
        title: 'CVE Page',
        to: '/cves/:cve/:inventoryId'
    },
    upgrade: {
        title: 'Upgrade',
        to: '/upgrade'
    },
    reports: {
        title: 'Reports',
        to: '/reports'
    }
};

export const impactList = {
    Critical: {
        title: intl.formatMessage(messages.impactListCritical),
        color: 'var(--pf-global--danger-color--100)',
        text: impactTextList.critical
    },
    Important: {
        title: intl.formatMessage(messages.impactListImportant),
        color: 'var(--pf-global--palette--orange-400)',
        text: impactTextList.important
    },
    Moderate: {
        title: intl.formatMessage(messages.impactListModerate),
        color: 'var(--pf-global--warning-color--200)',
        text: impactTextList.moderate
    },
    Low: {
        title: intl.formatMessage(messages.impactListLow),
        color: 'var(--pf-global--default-color--300)',
        text: impactTextList.low
    }
};

// Read-only mode notification text
export const ReadOnlyNotification = {
    title: intl.formatMessage(messages.readOnlyNotificationTitle),
    detail: intl.formatMessage(messages.readOnlyNotificationBody)
};

export const RULE_PRESENCE_OPTIONS = [
    { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },
    { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }
];

export const KNOWN_EXPLOIT_FILTER_OPTIONS = [
    { value: 'true', label: intl.formatMessage(messages.knownExploit) },
    { value: 'false', label: intl.formatMessage(messages.noKnownExploit) }
];

export const AFFECTING_FILTER_OPTIONS = [
    {
        value: '0',
        label: intl.formatMessage(messages.systemsAffected)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.systemsNotAffected)
    }
];

export const EXCLUDED_FILTER_OPTIONS = [
    {
        value: '0',
        label: intl.formatMessage(messages.systemsIncluded)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.systemsExcluded)
    }
];

export const subtractDays = (toSubtract, currDate = new Date()) => {
    return currDate.setDate(currDate.getDate() - toSubtract);
};

export const subtractYears = (toSubtract, currDate = new Date()) => {
    return currDate.setFullYear(currDate.getFullYear() - toSubtract);
};

//Public date labels to value
export const PUBLIC_DATE_OPTIONS = [
    {
        value: 'all',
        label: intl.formatMessage(messages.optionsAll),
        timespan_label: formatWithBold(messages.customReportTimespanAnytime)
    },
    {
        value: 'last7',
        label: intl.formatMessage(messages.lastxdays, { days: 7 }),
        timespan_label: formatWithBold(messages.customReportTimespanWithinLastXDays, { count: 7 }),
        from: subtractDays(7)
    },
    {
        value: 'last30',
        label: intl.formatMessage(messages.lastxdays, { days: 30 }),
        timespan_label: formatWithBold(messages.customReportTimespanWithinLastXDays, { count: 30 }),
        from: subtractDays(30)
    },
    {
        value: 'last90',
        label: intl.formatMessage(messages.lastxdays, { days: 90 }),
        timespan_label: formatWithBold(messages.customReportTimespanWithinLastXDays, { count: 90 }),
        from: subtractDays(90)
    },
    {
        value: 'lastYear',
        label: intl.formatMessage(messages.lastYear),
        timespan_label: formatWithBold(messages.customReportTimespanWithinLastYear),
        from: subtractYears(1)
    },
    {
        value: 'MoreThanYear',
        label: intl.formatMessage(messages.moreThanYear),
        timespan_label: formatWithBold(messages.customReportTimespanMoreThanOneYear),
        to: subtractYears(1)
    }
];

export const IMPACT_OPTIONS = [
    {
        label: intl.formatMessage(messages.impactListCritical),
        value: '7',
        hasIcon: true,
        iconColor: 'var(--pf-global--danger-color--100)'
    },
    {
        label: intl.formatMessage(messages.impactListImportant),
        value: '5',
        hasIcon: true,
        iconColor: 'var(--pf-global--palette--orange-300)'
    },
    {
        label: intl.formatMessage(messages.impactListModerate),
        value: '4',
        hasIcon: true,
        iconColor: 'var(--pf-global--warning-color--100)'
    },
    {
        label: intl.formatMessage(messages.impactListLow),
        value: '2',
        hasIcon: true,
        iconColor: 'var(--pf-global--Color--200)'
    },
    {
        label: intl.formatMessage(messages.impactListUnknown),
        value: '1',
        hasIcon: false
    }
];

export const STATUS_OPTIONS = [
    { label: intl.formatMessage(messages.notReviewed), value: '0' },
    { label: intl.formatMessage(messages.inReview), value: '1' },
    { label: intl.formatMessage(messages.onHold), value: '2' },
    { label: intl.formatMessage(messages.scheduledPatch), value: '3' },
    { label: intl.formatMessage(messages.resolved), value: '4' },
    { label: intl.formatMessage(messages.noAction), value: '5' },
    { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }
];

export const BUSINESS_RISK_OPTIONS = [
    {
        value: '3',
        label: intl.formatMessage(messages.high)
    },
    {
        value: '2',
        label: intl.formatMessage(messages.medium)
    },
    {
        value: '1',
        label: intl.formatMessage(messages.low)
    },
    {
        value: '0',
        label: intl.formatMessage(messages.notDefined)
    }
];

export const FILTERS = {
    publish_date: {
        title: intl.formatMessage(messages.publishDate),
        items: PUBLIC_DATE_OPTIONS.map(item => ({ ...item }))
    },
    impact: {
        title: intl.formatMessage(messages.impact),
        items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value }))
    },
    cvss_filter: {
        title: intl.formatMessage(messages.cvssBaseScore)
    },
    affecting: {
        title: intl.formatMessage(messages.affectsSystems),
        items: AFFECTING_FILTER_OPTIONS.map(item => ({ ...item }))
    },
    business_risk_id: {
        title: intl.formatMessage(messages.businessRisk),
        items: BUSINESS_RISK_OPTIONS.map(item => ({ ...item }))
    },
    status_id: {
        title: intl.formatMessage(messages.status),
        items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))
    },
    security_rule: {
        title: intl.formatMessage(messages.securityRules),
        items: RULE_PRESENCE_OPTIONS.map(item => ({ ...item }))
    },
    excluded: {
        title: intl.formatMessage(messages.systemsIncludedInAnalysis),
        items: EXCLUDED_FILTER_OPTIONS.map(item => ({ ...item }))
    }
};

export const CVE_REPORT_FILTERS = {
    known_exploit: {
        title: intl.formatMessage(messages.filterKnownExploit),
        items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(item => ({ ...item })),
        component: CheckboxCustomFilter
    },
    rule_presence: {
        title: intl.formatMessage(messages.customReportSecurityRuleCheckbox),
        items: RULE_PRESENCE_OPTIONS.map(item => ({ ...item })),
        component: CheckboxCustomFilter
    },
    publish_date: {
        title: intl.formatMessage(messages.publishDate),
        items: PUBLIC_DATE_OPTIONS.map(item => ({ ...item })),
        component: RadioCustomFilter
    },
    impact: {
        title: intl.formatMessage(messages.impact),
        items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value })),
        component: CheckboxCustomFilter
    },
    cvss_filter: {
        title: intl.formatMessage(messages.cvssBaseScore),
        component: CvssCustomFilter
    },
    affecting: {
        title: intl.formatMessage(messages.customReportSystemsExposed),
        items: AFFECTING_FILTER_OPTIONS.map(item => ({ ...item }))
    },
    business_risk_id: {
        title: intl.formatMessage(messages.businessRisk),
        items: BUSINESS_RISK_OPTIONS.map(item => ({ ...item })),
        component: CheckboxCustomFilter
    },
    status_id: {
        title: intl.formatMessage(messages.status),
        items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),
        component: CheckboxCustomFilter
    }
};

export const rulesHeader = [
    intl.formatMessage(messages.executiveReportSecurityPanelSeverity),
    intl.formatMessage(messages.executiveReportSecurityNumRules),
    intl.formatMessage(messages.executiveReportSecurityNumAffected)
];

export const CVSSHeader = [
    intl.formatMessage(messages.cvssScoreRange),
    intl.formatMessage(messages.numberOfCves)
];

export const recentCvesHeader = [
    intl.formatMessage(messages.timeFrame),
    intl.formatMessage(messages.numberOfCves)
];

export const CVSSMapping = {
    '8to10': '8.0 - 10.0',
    '4to7.9': '4.0 - 7.9',
    '0to3.9': '0.0 - 3.9',
    na: 'N/A'
};

export const recentCvesMapping = {
    last7days: intl.formatMessage(messages.lastxdays, { days: 7 }),
    last30days: intl.formatMessage(messages.lastxdays, { days: 30 }),
    last90days: intl.formatMessage(messages.lastxdays, { days: 90 })
};

export const RISK_OF_CHANGE_TOOLTIP = {
    1: intl.formatMessage(messages.riskOfChangeTooltipVeryLow),
    2: intl.formatMessage(messages.riskOfChangeTooltipLow),
    3: intl.formatMessage(messages.riskOfChangeTooltipModerate),
    4: intl.formatMessage(messages.riskOfChangeTooltipHigh)
};

export const RISK_OF_CHANGE_LABEL = {
    1: (
        <Pflabel style={{
            backgroundColor: 'var(--pf-global--palette--blue-50)',
            color: 'var(--pf-global--palette--blue-600)'
        }}>
            {intl.formatMessage(messages.impactListVeryLow)}
        </Pflabel>
    ),
    2: (
        <Pflabel style={{
            backgroundColor: '#fdf7e7',
            color: 'var(--pf-global--palette--gold-700)'
        }}>
            {intl.formatMessage(messages.impactListLow)}
        </Pflabel>
    ),
    3: (
        <Pflabel style={{
            backgroundColor: '#FFF5EC',
            color: '#773D00'
        }}>
            {intl.formatMessage(messages.impactListModerate)}
        </Pflabel>
    ),
    4: (
        <Pflabel style={{
            backgroundColor: '#FAEAE8',
            color: 'var(--pf-global--palette--red-300)'
        }}>
            {intl.formatMessage(messages.impactListHigh)}
        </Pflabel>
    )
};

export const VULNERABILITIES_HEADER = [
    {
        title: intl.formatMessage(messages.cveId),
        key: 'synopsis',
        transforms: [sortable],
        columnTransforms: [wrappable, cellWidth(15)],
        cellFormatters: [expandable]
    },
    {
        title: intl.formatMessage(messages.publishDate),
        key: 'public_date',
        transforms: [sortable, wrappable, cellWidth(15)],
        columnTransforms: [classNames('hide-description')]
    },
    {
        title: intl.formatMessage(messages.impact),
        key: 'impact',
        transforms: [sortable, cellWidth(15)],
        columnTransforms: [nowrap]
    },
    {
        title: intl.formatMessage(messages.cvssBaseScore),
        key: 'cvss_score',
        transforms: [sortable, wrappable, cellWidth(15)]
    },
    {
        title: intl.formatMessage(messages.systemsExposed),
        key: 'systems_affected',
        transforms: [sortable, wrappable, cellWidth(15)]
    },
    {
        title: intl.formatMessage(messages.businessRisk),
        key: 'business_risk',
        transforms: [sortable, wrappable, cellWidth(15)]
    },
    {
        title: intl.formatMessage(messages.status),
        key: 'status',
        transforms: [sortable, wrappable, cellWidth(15)]
    }
];

export const SYSTEMS_EXPOSED_HEADER = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        composed: ['facts.os_release', 'display_name'],
        transforms: [sortable],
        props: {
            width: 40
        },
        renderFunc: (item, _id, { rule }) => renderSystemCSAwLabel(item, rule)
    },
    {
        key: 'status',
        title: intl.formatMessage(messages.status),
        transforms: [sortable],
        props: {
            width: 20
        },
        renderFunc: (
            value,
            _id,
            { cve_status_id: cveStatusId, status_id: systemStatusId }
        ) => <StatusColumn cveStatusId={cveStatusId} systemStatusId={systemStatusId} />
    }
];
export const SYSTEMS_ADVISORY_COLUMN =
{
    key: 'advisory',
    title: intl.formatMessage(messages.advisory),
    props: {
        width: 20
    },
    renderFunc: (
        value,
        _id,
        { cve, advisories_list: advisoriesList }
    ) => <AdvisoryColumn cve={cve} advisoriesList={advisoriesList} />
};

export const SYSTEMS_HEADER = [
    {
        key: 'display_name',
        title: intl.formatMessage(messages.systemsColumnHeaderName),
        composed: ['facts.os_release', 'display_name'],
        transforms: [sortable],
        cellTransforms: [nowrap],
        renderFunc: (item, _id, { opt_out: optOut }) => <SystemNameColumn item={item} optOut={optOut} />

    },
    {
        key: 'cve_count',
        title: intl.formatMessage(messages.systemsColumnHeaderCveCount),
        transforms: [sortable, cellWidth(25)],
        renderFunc: (value) => value ?? intl.formatMessage(messages.systemsTableExcluded)
    }
];

export const SYSTEM_DETAILS_HEADER = [
    {
        title: intl.formatMessage(messages.cveId),
        key: 'synopsis',
        transforms: [sortable],
        columnTransforms: [wrappable],
        cellFormatters: [expandable]
    },
    {
        title: intl.formatMessage(messages.publishDate),
        key: 'public_date',
        transforms: [sortable, wrappable]
    },
    {
        title: intl.formatMessage(messages.impact),
        key: 'impact',
        transforms: [sortable, wrappable],
        columnTransforms: [nowrap]
    },
    {
        title: intl.formatMessage(messages.cvssBaseScore),
        key: 'cvss_score',
        transforms: [sortable, wrappable]
    },
    {
        title: intl.formatMessage(messages.advisory),
        key: 'advisory'
    },
    {
        title: intl.formatMessage(messages.businessRisk),
        key: 'business_risk',
        transforms: [sortable, wrappable]
    },
    {
        title: intl.formatMessage(messages.status),
        key: 'status',
        transforms: [sortable, wrappable]
    }
];

export const CVES_ALLOWED_PARAMS = [
    'cvss_from',
    'cvss_to',
    'publish_date',
    'filter',
    'limit',
    'offset',
    'page',
    'page_size',
    'sort',
    'impact',
    'business_risk_id',
    'status_id',
    'rule_presence',
    'affecting',
    'show_advisories',
    'advisory',
    'tags',
    'sap_sids',
    'sap_system',
    'known_exploit'
];

export const SYSTEMS_EXPOSED_ALLOWED_PARAMS = [
    'filter',
    'page',
    'page_size',
    'status_id',
    'sort',
    'tags',
    'uuid',
    'rule_key',
    'rule_presence',
    'sort',
    'tags',
    'sap_sids',
    'sap_system',
    'show_advisories',
    'advisory'
];

export const SYSTEMS_ALLOWED_PARAMS = [
    'filter',
    'page',
    'page_size',
    'opt_out',
    'sort',
    'tags',
    'sap_sids',
    'sap_system',
    'excluded'
];

export const SYSTEMS_SORTING_HEADER = [
    { key: 'empty' },
    { key: 'display_name' },
    { key: 'tags' },
    { key: 'cve_count' },
    { key: 'updated' }
];

export const SYSTEMS_EXPOSED_SORTING_HEADER = [
    { key: 'empty' },
    { key: 'empty' },
    { key: 'display_name' },
    { key: 'tags' },
    { key: 'advisory' },
    { key: 'status' },
    { key: 'updated' }
];

export const TRUNCATE_TEXT_THRESHOLD = 230;

export const DEFAULT_FILTER_DATA = {
    business_risk_id: [],
    status_id: [],
    impact: [],
    publish_date: 'all',
    rule_presence: [],
    cvss_filter: {
        from: 0.0,
        to: 10.0
    },
    known_exploit: []
};

export const PDF_REPORT_USER_NOTE_MAX_LENGTH = 1000;

export const PDF_REPORT_PER_PAGE = {
    firstPageWithNote: 5,
    firstPageWithoutNote: 10,
    otherPages: 18,
    otherPagesWithLabels: 10,
    systemsReportRestPages: 24,
    systemsReportFirstPage: 22
};

export const EXEC_RULES_SEVERITY_MAP = {
    1: impactList.Low.title,
    2: impactList.Moderate.title,
    3: impactList.Important.title,
    4: impactList.Critical.title
};
