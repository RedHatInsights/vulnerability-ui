import React from 'react';
import some from 'lodash/some';
import PropTypes from 'prop-types';
import { Redirect, Route, Switch, useLocation } from 'react-router-dom';
import asyncComponent from './asyncComponent';
import { PATHS } from '../Helpers/constants';
import { intl } from './IntlProvider';
import messages from '../Messages';

const SystemsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "Systems" */ '../Components/SmartComponents/SystemsPage/SystemsPage'
    )
);

const LandingPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "LandingPage" */ '../Components/SmartComponents/LandingPage/LandingPage'
    )
);

const Upgrade = asyncComponent(() =>
    import(
        /* webpackChunkName: "Upgrade" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'
    )
);

const CVEDetailsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "CVEDetailsPage" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'
    )
);

const SystemDetailsPage = asyncComponent(() =>
    import(
        /* webpackChunkName: "SystemDetailsPage" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'
    )
);
const Reports = asyncComponent(() =>
    import(/* webpackChunkName: "Reports" */ '../Components/SmartComponents/Reports/ReportsPage')
);

const InsightsRoute = ({ component: Component, rootClass = 'vulnerability', title, ...rest }) => {
    const root = document.getElementById('root');
    root.removeAttribute('class');

    root.classList.add(`page__${rootClass}`, 'pf-l-page__main');
    root.classList.add(`page__${rootClass}`, 'pf-c-page__main');
    root.setAttribute('role', 'main');

    if (title) {
        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];
        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;
    }

    return <Route {...rest} component={Component} />;
};

InsightsRoute.propTypes = {
    component: PropTypes.func,
    rootClass: PropTypes.string,
    title: PropTypes.string
};

export const Routes = () => {
    let location = useLocation();
    let path = location.pathname;
    return (
        <Switch>
            <Redirect from={PATHS.cvepagePath.to} to={PATHS.systemDetailsPage.to} />
            <InsightsRoute exact path={PATHS.cveDetailsPage.to} component={CVEDetailsPage}
                title={intl.formatMessage(messages.cvesHeader)}/>
            <InsightsRoute exact path={PATHS.systemDetailsPage.to} component={SystemDetailsPage}/>
            <InsightsRoute exact path={PATHS.cvesPage.to} component={LandingPage}
                title={intl.formatMessage(messages.cvesHeader)}/>
            <InsightsRoute exact path={PATHS.systemsPage.to} component={SystemsPage}
                title={intl.formatMessage(messages.systemsHeader)}/>
            <InsightsRoute exact path={PATHS.upgrade.to} component={Upgrade}
                title={intl.formatMessage(messages.upgradePageTitle)}/>
            <InsightsRoute exact path={PATHS.reports.to} component={Reports}
                title={intl.formatMessage(messages.reportsPageTitle)}/>
            <Route
                render={() => (some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />)}
            />
        </Switch>
    );
};
