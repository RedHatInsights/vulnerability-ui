import * as ActionTypes from '../../Store/ActionTypes';
import { SystemCvesStore, initialState } from './SystemCvesStore';

let action;

describe('System Cves Store: ', () => {
    beforeEach(() => {
        action = {
            type: undefined,
            payload: {}
        }
    });

    it('Should return initail state', () => {
        expect(SystemCvesStore(undefined, {})).toEqual(initialState);
    });

    it('Should set initial state on empty action', () => {
        expect(SystemCvesStore(undefined, action)).toEqual(initialState);
    });

    it('Should start loading system cves list', () => {
        action.type = ActionTypes.FETCH_SYSTEM_CVE_LIST + '_PENDING';
        expect(SystemCvesStore(undefined, action).cveList.isLoading).toEqual(true);
    });

    it('Should handle SystemCvesStore error', () => {
        action.type = ActionTypes.FETCH_SYSTEM_CVE_LIST + '_REJECTED';
        action.payload = 'test error'
        expect(SystemCvesStore(undefined, action).cveList).toEqual({ isLoading: false,  payload: { errors: action.payload } });
    });

    it('Should load System Cves List', () => {
        let testObject = { testObject: 'value' };
        let testDate = new Date(Date.now());
        action.type = ActionTypes.FETCH_SYSTEM_CVE_LIST + '_FULFILLED';
        action.payload = testObject;
        action.meta = testDate
        expect(SystemCvesStore({ timestamp: testDate }, action).cveList).toEqual({ isLoading: false, payload: testObject });
    });

    it('Should select (an) entity/entities', () => {
        let testArray = ['entityId'];
        action.type = ActionTypes.SELECT_SYSTEM_CVE;
        action.payload = testArray;
        expect(SystemCvesStore(undefined, action).selectedCves).toEqual(testArray);
    });

    it('Should expand (a) cve/cves', () => {
        let testObject = { isOpen: true, cves: ['testId'], expandCveDescription: 'test string'};
        action.type = ActionTypes.EXPAND_SYSTEM_CVE;
        action.payload = testObject;
        expect(SystemCvesStore(undefined, action).openedCves).toEqual([{ id: 'testId', isOpen: true }]);
    });

    it('Should load change parameters of SystemCvesStore', () => {
        let testObject = { testObject: 'value' };
        action.type = ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS;
        action.payload = testObject;
        expect(SystemCvesStore(undefined, action).parameters).toEqual(
            expect.objectContaining(testObject)
        );
    });

    it('Should clear SystemCvesStore', () => {
        action.type = ActionTypes.CLEAR_SYSTEM_CVES_STORE;
        expect(SystemCvesStore(undefined, action)).toEqual(
            expect.objectContaining({
                selectedCves: [],
                openedCves: [],
                parameters: {
                    page: 1,
                    page_size: 20,
                    show_advisories: true
                }
            })
        );
    });
});