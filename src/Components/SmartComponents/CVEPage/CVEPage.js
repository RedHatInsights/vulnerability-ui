import { DropdownPosition, Page } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchCveDetails, setHeader, handleCveDetailsError } from '../../../Store/Actions/Actions';
import { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';
import { paths } from '../../../Utilities/Routes';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';
import { kebabItemEditBusinessRisk } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';
import BusinessRiskModal from '../BusinessRiskModal/BusinessRiskModal';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import { InvalidObject } from '@redhat-cloud-services/frontend-components';

export const CVEPageContext = React.createContext({ isLoading: true });

class CVEPage extends React.Component {
    static propTypes = {
        match: propTypes.object,
        cveDetails: propTypes.object,
        fetchCveDetails: propTypes.func,
        setHeader: propTypes.func,
        handleCveDetailsError: propTypes.func
    };

    constructor(props) {
        super(props);
        this.state = { cveName: this.props.match.params.cve, BusinessRiskModal: () => null };
    }

    componentDidMount() {
        const { fetchCveDetails, handleCveDetailsError, setHeader } = this.props;

        setHeader({
            breadcrumbs: [
                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },
                { title: this.state.cveName, isActive: true }
            ]
        });

        fetchCveDetails(this.state.cveName)
        .catch(() => {
            handleCveDetailsError();
        });
    }

    showBusinessRiskModal = cves => {
        this.setState({
            BusinessRiskModal: () => (
                <BusinessRiskModal open cves={cves} updateRef={() => this.props.fetchCveDetails(this.state.cveName)} />
            )
        });
    };

    render() {
        const { cveDetails } = this.props;
        const { error } = cveDetails;
        const { cveName, BusinessRiskModal } = this.state;

        const kebabItems = [
            kebabItemEditBusinessRisk(this.showBusinessRiskModal, [
                {
                    business_risk_id: cveDetails.data.business_risk_id,
                    id: cveName,
                    justification: cveDetails.data.business_risk_justification
                }
            ])
        ];

        if (!error) {
            return (
                <Page>
                    <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>
                        <VulnerabilityHeader
                            title={
                                <span style={{ display: 'flex', justifyContent: 'space-between' }}>
                                    {cveName}
                                    <BaseKebab dropdownItems={kebabItems} position={DropdownPosition.right}></BaseKebab>
                                </span>
                            }
                            showTabs={false}
                        >
                            <CVEPageDetails data={cveDetails} />
                            <BusinessRiskModal />
                        </VulnerabilityHeader>
                        <Main>
                            <SystemsExposedTable cve={cveName} />
                        </Main>
                    </CVEPageContext.Provider>
                </Page>

            );
        } else {
            return (
                <React.Fragment>
                    <VulnerabilityHeader title={cveName} showTabs={false}/>
                    <InvalidObject />
                </React.Fragment>
            );
        }
    }
}

function mapStateToProps(state) {
    return {
        cveDetails: sCveDetailsPage(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchCveDetails: cveName => dispatchAction(fetchCveDetails(cveName)),
        setHeader: header => dispatchAction(setHeader(header)),
        handleCveDetailsError: () => dispatchAction(handleCveDetailsError())
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEPage)
);
