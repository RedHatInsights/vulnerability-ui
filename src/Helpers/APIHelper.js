let BASE_ROUTE = '/r/insights/platform/vulnerability/';
let apiVersion = 'v1';

export function createApiCall(endpoint, method, parameters = undefined, data = undefined) {
    if (parameters && method === 'get') {
        let params = Object.keys(parameters)
        .map(key => [
            encodeURIComponent(key)
            .concat('=')
            .concat(encodeURIComponent(parameters[key]))
        ])
        .join('&');
        endpoint = endpoint.concat('?').concat(params);
    }

    let result = window.insights.chrome.auth
    .getUser()
    .then(() =>
        fetch(BASE_ROUTE + apiVersion + endpoint, {
            method,
            body: JSON.stringify(data)
        })
    )
    .then(res => {
        if (!res.ok) {
            throw res;
        }

        return res.json();
    });
    return result;
}

export function getCveDetails(synopsis) {
    let endpoint = '/cves/' + synopsis + '/details/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getAffectedSystemsByCVE(synopsis) {
    let endpoint = '/cves/' + synopsis + '/affected_systems/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getChanges() {
    let endpoint = '/vulnerabilities/changes/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getCurrentImpacts() {
    let endpoint = '/vulnerabilities/impacts/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getCveListByAccount(apiProps) {
    let endpoint = '/vulnerabilities/cves/';
    let result = createApiCall(endpoint, 'get', apiProps);
    return result;
}

export function getCveListBySystem(apiProps) {
    let endpoint = '/systems/' + apiProps.system + '/cves/';
    delete apiProps.system;
    let result = createApiCall(endpoint, 'get', apiProps);
    return result;
}

export async function getReportFromList(api, params, dataFormat) {
    params = { ...params, page_size: 9999, data_format: dataFormat };
    let result = api(params);
    let promise = await result.payload;
    return promise.data;
}
