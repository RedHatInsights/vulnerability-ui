import React, { useEffect } from 'react';
import propTypes from 'prop-types';
import { injectIntl } from 'react-intl';
import { useUrlParams } from '../../../../Helpers/MiscHelper';
import { useDispatch, useSelector } from 'react-redux';
import useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';
import ReducerRegistry from '../../../../Utilities/ReducerRegistry';
import { createExposedDevicesRows } from '../../../../Helpers/CVEHelper';
import { inventoryEntitiesReducer } from '../../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeExposedDevicesParameters
} from '../../../../Store/Actions/Actions';
import {
    SYSTEMS_EXPOSED_ALLOWED_PARAMS,
    PERMISSIONS,
    DEFAULT_PAGE_SIZE,
    RULE_PRESENCE_OPTIONS,
    CVE_DETAILS_FILTER_PARAMS
} from '../../../../Helpers/constants';
import ErrorHandler from '../../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { EmptyStateNoSystems } from '../../../PresentationalComponents/EmptyStates/EmptyStates';
import { useGetEntities, mergeAppColumns } from './helpers.js';
import Spinner from '@redhat-cloud-services/frontend-components/Spinner';
import { buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../../Helpers/TableToolbarHelper';
import useSearchFilter from '../../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import useSecurityRuleFilter from '../../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { useRbac } from '../../../../Helpers/Hooks';
import messages from '../../../../Messages';

const ImmutableDevices = ({ intl, cveName, filterRuleValues, inventoryRef, headerFilters }) => {
    const [[canReadHostsInventory], isLoadingInventory] = useRbac([
        PERMISSIONS.readHosts
    ], 'inventory');

    const dispatch = useDispatch();
    const navigate = useInsightsNavigate('inventory');
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);

    const totalItems = useSelector(({ entities }) => entities?.total);
    const error = useSelector(({ entities }) => entities?.error || {});

    const parameters = useSelector(
        ({ ImmutableDevicesStore }) => ImmutableDevicesStore.parameters);

    const apply = (params) => dispatch(changeExposedDevicesParameters(params));

    useEffect(() => apply(urlParameters), []);

    useEffect(() => setUrlParams({ ...parameters, ...headerFilters }), [parameters, headerFilters]);

    const getEntities = useGetEntities(
        {
            id: cveName,
            createRows: createExposedDevicesRows,
            apply
        }
    );

    useEffect(() => {
        apply(headerFilters);
    }, [headerFilters]);

    const searchFilter = useSearchFilter(
        'filter',
        messages.systemsSearchName,
        messages.searchFilterByName,
        parameters.filter,
        apply
    );

    const advisoryNameFilter = useSearchFilter(
        'advisory',
        messages.advisoryName,
        messages.searchFilterByAdvisoryName,
        parameters.advisory,
        apply
    );
    const securityRuleFilter = useSecurityRuleFilter(
        apply,
        parameters,
        filterRuleValues,
        {
            isDynamic: true,
            dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')
        }
    );

    const activeFilters = {
        filters: buildActiveFilters(parameters, filterRuleValues),
        onDelete: (_, chips, reset) => removeFilters(chips, apply, reset, {}),
        deleteTitle: intl.formatMessage(messages.resetFilters),
        showDeleteButton: !isFilterInDefaultState(parameters, {}, CVE_DETAILS_FILTER_PARAMS)
    };

    const onRowClick = (_key, systemId) => {
        navigate(`/${systemId}?appName=vulnerabilities`);
    };

    return isLoadingInventory ? <Spinner centered /> :
        error?.hasError && !canReadHostsInventory    ? <ErrorHandler code={error?.errorCode} />
            : (<AsynComponent
                appName="inventory"
                ref={inventoryRef}
                module="./ImmutableDevices"
                fallback={<div />}
                store={ReducerRegistry.getStore()}
                onLoad={({ mergeWithEntities }) => {
                    ReducerRegistry.register({
                        ...mergeWithEntities(
                            inventoryEntitiesReducer([]),
                            {
                                page: Number(parameters.page || 1),
                                perPage: DEFAULT_PAGE_SIZE,
                                ...(parameters.sort && {
                                    sortBy: {
                                        key: parameters.sort.replace(/^-/, ''),
                                        direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'
                                    }
                                })
                            }
                        )
                    });
                }}
                key="immutableDevices"
                customFilters={{
                    edgeParams: {
                        ...parameters,
                        host_type: 'edge'
                    }
                }}
                getEntities={getEntities}
                showActions={totalItems !== 0}
                hideFilters={{ all: true, hostGroupFilter: false, operatingSystem: false }}
                noSystemsTable={<EmptyStateNoSystems />}
                mergeAppColumns={mergeAppColumns}
                filterConfig={{
                    items: [
                        searchFilter,
                        securityRuleFilter,
                        advisoryNameFilter
                    ]
                }}
                activeFiltersConfig={activeFilters}
                onRowClick={onRowClick}
            />
            );
};

ImmutableDevices.propTypes = {
    cveName: propTypes.string,
    intl: propTypes.object,
    filterRuleValues: propTypes.object,
    inventoryRef: propTypes.object,
    headerFilters: propTypes.object
};

export default injectIntl(ImmutableDevices);
