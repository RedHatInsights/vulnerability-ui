
import React from 'react';
import PropTypes from 'prop-types';
import { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';

import messages from '../../../Messages';

import FirstPage from './Executive/FirstPage';
import SecondPage  from './Executive/SecondPage';
import ThirdPage  from './Executive/ThirdPage';

const BuildExecReport = ({ data, intl, isEdgeParityEnabled }) => {

    const {
        cves_by_severity: cvesBySeverity,
        recent_cves: recentCves,
        top_cves: topCves,
        cves_total: totalCves,
        system_count: totalSystems,
        top_rules: topRules,
        rules_total: totalRules,
        rules_by_severity: rulesBySeverity,
        system_count_per_type: systemCountPerType
    } = data;

    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{
        return [
            EXEC_RULES_SEVERITY_MAP[severity],
            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())
        ];
    });

    const CVSSData = Object.values(cvesBySeverity).reverse().map((
        { count, percentage, known_exploit_count: knownExploitsCount }) =>
        [intl.formatMessage(messages.executiveReportOfTotal,
            {
                count,
                percentage
            }
        ), knownExploitsCount.toString()]
    );

    const mapFields = (fields, data, percentageInfo = false) => {
        let arr = [];

        for (const field in fields) {
            let { [field]: label } = fields;
            let { [field]: fieldData } = data;

            let value = fieldData.count !== undefined ? fieldData.count : fieldData;

            if (percentageInfo && fieldData.percentage) {
                value = fieldData.percentage;
            }

            arr.push([label, value.toString()]);
        }

        return arr;
    };

    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });

    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);

    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));

    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));

    const coverPageData = { totalSystems, totalCves, totalRules, systemCountPerType };

    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };

    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };

    return [
        <FirstPage key="first-page" intl={intl} data={coverPageData} isEdgeParityEnabled={isEdgeParityEnabled} />,
        <SecondPage key="second-page-cves" intl={intl} data={cvesData} />,
        <ThirdPage key="third-page-rules" intl={intl} data={rulesData} />
    ];
};

BuildExecReport.propTypes = {
    data: PropTypes.exact({
        cves_by_severity: PropTypes.object,
        recent_cves: PropTypes.object,
        top_cves: PropTypes.array,
        cves_total: PropTypes.number,
        system_count: PropTypes.number,
        rules_by_severity: PropTypes.object,
        rules_total: PropTypes.number,
        top_rules: PropTypes.array,
        systemCountPerType: PropTypes.object
    }),
    intl: PropTypes.any
};

export default BuildExecReport;
