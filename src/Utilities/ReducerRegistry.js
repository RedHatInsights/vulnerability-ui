import notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';
import MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/MiddlewareListener';
import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';
import promiseMiddleware from 'redux-promise-middleware';

export const middlewareListener = new MiddlewareListener();

//eslint-disable-next-line no-unused-vars
const notificationsFilterMiddleware = store => next => action => {
    const matchRejected = type => type.match(new RegExp(`^.*_REJECTED$`));

    if (matchRejected(action.type) && action.meta?.noNotificationOnStatus?.includes(parseInt(action.payload?.status))) {
        action.meta = { ...action.meta, noError: true };
    }

    next(action);
};

const registry = getRegistry({}, [
    promiseMiddleware,
    notificationsFilterMiddleware,
    notificationsMiddleware({
        errorTitleKey: 'title'
    }),
    middlewareListener.getMiddleware()
]);

export default {
    getStore: () => registry.getStore(),
    register: newReducers => {
        registry.register(newReducers);
    }
};
