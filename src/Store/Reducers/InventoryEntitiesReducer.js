import { nowrap, sortable } from '@patternfly/react-table';
import { SYSTEMS_ADVISORY_COLUMN } from '../../Helpers/constants';
import { selectRows } from './reducersHelper';
import * as ActionTypes from '../ActionTypes';

export const initialState = {
    columns: [],
    rows: [],
    entities: [],
    selectedRows: {}
};

function modifyInventory(columns, state) {
    if (!state.selectedRows) {
        state.selectedRows = {};
    }

    if (state.loaded) {
        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);
        let [nameColumn, remediationColumn, ...restColumns] = columns;
        let lastSeenColumn = state.columns.find(({ key }) => key === 'updated');
        let tagsColumn = state.columns.find(({ key }) => key === 'tags');

        tagsColumn = [{ ...tagsColumn, props: { width: 10 } }];
        lastSeenColumn = [{
            ...lastSeenColumn,
            transforms: [sortable, nowrap],
            cellTransforms: [nowrap]
        }];

        let mergedColumns = [nameColumn, ...tagsColumn, ...restColumns, ...lastSeenColumn, remediationColumn];

        if (hasPatchAccess) {
            mergedColumns.splice(3, 0, SYSTEMS_ADVISORY_COLUMN);
        }

        return {
            ...state,
            columns: mergedColumns,
            rows: state.rows.map(row => ({
                ...row,
                selected: state.selectedRows[row.id] === true
            }))
        };
    }

    return state;
}

export const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {
    switch (action.type) {
        case 'LOAD_ENTITIES_FULFILLED':
            return modifyInventory(columns, state);
        case ActionTypes.SELECT_ENTITY:
            return selectRows(state, action);
        case 'EXPAND_ROW':
            return {
                ...state,
                rows: state.rows.map(row => ({
                    ...row,
                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen
                }))
            };
        case 'CLEAR_INVENTORY_STORE':
            return initialState;
        default:
            return state;
    }
};
