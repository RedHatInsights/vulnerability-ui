import { Grid, GridItem } from '@patternfly/react-core';
import { routerParams, RemediationButton } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchCveDetails } from '../../../Store/Actions/Actions';
import { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import { addNotification } from '@red-hat-insights/insights-frontend-components/components/Notifications';

class CVEPage extends React.Component {
    constructor(props) {
        super(props);
        this.state = { cveName: this.props.match.params.cve };
        this.dataProvider = this.dataProvider.bind(this);
        this.onCreated = this.onCreated.bind(this);
    }

    componentDidMount() {
        this.props.fetchCveDetails(this.state.cveName);
    }

    onCreated (result) {
        dispatchAction(addNotification(result.getNotification()));
    }

    dataProvider () {
        return {
            issues: [{
                id: `vulnerabilities:${this.state.cveName}`
            }],
            systems: [
                '34b9f7d9-fc81-4e0f-bef0-c4b402a1510e' // TODO: use real system ids here based on selection in SystemsExposedTable
            ]
        };
    }

    render() {
        return (
            <React.Fragment>
                <Grid gutter="sm">
                    <GridItem>
                        <CVEPageDetails data={this.props.cveDetails} />
                        <RemediationButton dataProvider={this.dataProvider} onRemediationCreated={this.onCreated} />
                    </GridItem>
                    <GridItem>
                        <SystemsExposedTable cve={this.state.cveName} />
                    </GridItem>
                </Grid>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state) {
    return {
        cveDetails: sCveDetailsPage(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchCveDetails: cveName => dispatchAction(fetchCveDetails(cveName))
    };
};

CVEPage.propTypes = {
    match: propTypes.object,
    cveDetails: propTypes.object,
    fetchCveDetails: propTypes.func
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEPage)
);
