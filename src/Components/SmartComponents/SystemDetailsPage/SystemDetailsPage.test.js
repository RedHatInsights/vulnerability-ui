import SystemDetailsPage from './SystemDetailsPage';
import toJson from 'enzyme-to-json';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import { Provider } from "react-redux";
import { InventoryDetailHead } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';
import { act } from 'react-dom/test-utils';

const customMiddleWare = store => next => action => {
    next(action);
}

const mockStore = configureStore([customMiddleWare]);
let storeObj = { 
    SystemCvesStore: {
        cveList: {
            payload: {
                errors: undefined
            }
        }
    },
    entityDetails: {
        entity: 'testEntity',
        opt_out: false
    }
};

const props = {
    optOutSystem: jest.fn(() => Promise.resolve('hello world')),
    fetchSystemDetails: jest.fn(),
    addNotification: jest.fn(),
    match: { params: {inventoryId: 'testCve'} }
};

window.insights = { 
    loadInventory: (args) => new Promise((resolve, reject) => {
        return resolve({
            mergeWithEntities: () => {},
            mergeWithDetail: () => {},
            INVENTORY_ACTION_TYPES: ''
        })
    }) 
};

describe('SystemDetailPage', () => {
    it('Should match the snapshots', async () => {
        const tempStore = mockStore(storeObj);
        const wrapper = mountWithIntl(
            <Provider store={tempStore}>
                <Router>
                    <SystemDetailsPage { ...props } />
                </Router>
            </Provider>);
        await Promise.resolve();
        wrapper.update();
        expect(toJson(wrapper)).toMatchSnapshot();
    });


    it('Should call optOutSystem with true when entity exists and isOptOut is true', async () => {
        const tempStore = mockStore(storeObj);
        let wrapper = mountWithIntl(
            <Provider store={tempStore}>
                <Router>
                    <SystemDetailsPage.WrappedComponent {...props} systemDetails = {{opt_out: true, entity: true}} intl = {{ formatMessage: jest.fn()}}/>);
                </Router>
            </Provider>
        );
        await Promise.resolve();
        wrapper.update();            
        console.log(wrapper.find('InventoryDetail').instance().optOutSystem(false))
        expect(props.optOutSystem).toHaveBeenCalledWith('testCve', false);
        expect(props.fetchSystemDetails).toHaveBeenCalledWith('testCve');
    });

    it('Should call optOutSystem with false when entity exists and isOptOut is false', async () => {
        const tempStore = mockStore(storeObj);
        let wrapper = mountWithIntl(
            <Provider store={tempStore}>
                <Router>
                    <SystemDetailsPage.WrappedComponent {...props} systemDetails = {{opt_out: false, entity: true}} intl = {{ formatMessage: jest.fn()}}/>);
                </Router>
            </Provider>);
        await Promise.resolve();
        wrapper.update();
        console.log(wrapper.find('InventoryDetail').instance().optOutSystem(true))
        expect(props.optOutSystem).toHaveBeenCalledWith('testCve', true);
        expect(props.fetchSystemDetails).toHaveBeenCalledWith('testCve');
    });
});

