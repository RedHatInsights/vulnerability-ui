import Immutable from 'seamless-immutable';
import * as ActionTypes from '../ActionTypes';
import { applyGlobalFilter } from './reducersHelper';

export const initialState = Immutable({
    parameters: {
        page: 1,
        page_size: 20,
        selectedHosts: [],
        status_id: undefined,
        sort: '-updated',
        show_advisories: true
    },
    cveDetails: {
        isLoading: true,
        payload: {},
        error: {
            hasError: false
        }
    }
});

export const CVEDetailsPageStore = (state = initialState, action) => {
    let newState;

    switch (action.type) {
        case ActionTypes.FETCH_CVE_DETAILS + '_REJECTED':
            newState = state.setIn(['cveDetails', 'error'], { hasError: true, errorCode: action.payload.status });
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;
        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':
            newState = state.setIn(['cveDetails', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':
            newState = state.setIn(['cveDetails', 'payload'], action.payload);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;

        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:
            newState = state.setIn(['parameters'], {
                ...state.parameters,
                ...action.payload,
                page_size: action.payload.page_size || state.parameters.page_size
            });
            return newState;
        case ActionTypes.SET_GLOBAL_FILTER:
            newState = state.setIn(['parameters'], {
                ...applyGlobalFilter(state.parameters, action.payload)
            });
            return newState;
        case ActionTypes.CLEAR_CVE_STORE:
            return initialState;
        default:
            return state;
    }
};

