import { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';
import { ExclamationTriangleIcon, ServerAltIcon } from '@patternfly/react-icons';
import { Shield } from '@redhat-cloud-services/frontend-components';
import { parseCvssScore, processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import { flatMap } from 'lodash';
import React from 'react';
import { Link } from 'react-router-dom';
import Label from '../Components/PresentationalComponents/Snippets/Label';
import { businessRiskOptions, STATUS_OPTIONS } from './constants';

export function createCveListByAccount({ cveList, parameters }) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload;

        let { data, meta, errors } = payload;

        data =
            data &&
            flatMap(data, (row, index) => [
                {
                    id: row.id,
                    business_risk_id: row.attributes.business_risk_id,
                    business_risk_justification: row.attributes.business_risk_text,
                    status_id: row.attributes.status_id,
                    status_justification: row.attributes.status_text,
                    cells: [
                        {
                            title: (
                                <span key={row.id}>
                                    <Link to={'/cves/' + row.attributes.synopsis}>{row.attributes.synopsis}</Link>
                                </span>
                            )
                        },

                        { title: <span key={row.id}>{processDate(row.attributes.public_date)}</span> },
                        {
                            title: (
                                <span key={row.id}>
                                    <Shield impact={row.attributes.impact} hasLabel />
                                </span>
                            )
                        },
                        {
                            title: (
                                <span key={row.id}>
                                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                </span>
                            )
                        },

                        {
                            title: (
                                <span key={row.id}>
                                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}
                                </span>
                            )
                        },
                        {
                            title: (
                                <span key={row.id}>
                                    {
                                        businessRiskOptions.find(
                                            option => option.value === row.attributes.business_risk_id.toString()
                                        ).label
                                    }
                                </span>
                            )
                        },
                        {
                            title: (
                                <span key={row.id}>
                                    {row.attributes.systems_status_divergent > 0 ? (
                                        <Tooltip content="Individual CVE-Status pairs have differences from overall CVE status">
                                            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />
                                        </Tooltip>
                                    ) : (
                                        ''
                                    )}{' '}
                                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}
                                </span>
                            )
                        }
                    ],
                    isOpen: parameters.openedCves.includes(row.id),
                    selected: parameters.selectedCves.includes(row.id)
                },
                {
                    cells: [
                        {
                            title: (
                                <TextContent>
                                    <Label>Description</Label>
                                    <Text component={TextVariants.p}>{row.attributes.description}</Text>
                                </TextContent>
                            )
                        }
                    ],
                    parent: index * 2
                }
            ]);
        return { data, meta, isLoading, errors };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

export function createCveListBySystem(systemId, cveList) {
    let isLoading = cveList && cveList.isLoading;
    if (!isLoading) {
        const {
            payload: { data, meta, errors }
        } = cveList;
        return {
            data:
                data &&
                flatMap(data, (row, index) => [
                    {
                        id: row.id,
                        business_risk_id: row.attributes.business_risk_id,
                        business_risk_justification: row.attributes.business_risk_text,
                        status_id: row.attributes.status_id,
                        status_justification: row.attributes.status_text,
                        cells: [
                            {
                                title: <span key={row.id}>{handleCVELink(row.attributes.synopsis)}</span>
                            },
                            {
                                title: <span key={row.id}>{processDate(row.attributes.public_date)}</span>
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        <Shield impact={row.attributes.impact} tooltipPosition={'right'} hasLabel />
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {
                                            businessRiskOptions.find(
                                                option => option.value === row.attributes.business_risk_id.toString()
                                            ).label
                                        }
                                    </span>
                                )
                            },
                            {
                                title: (
                                    <span key={row.id}>
                                        {row.attributes.cve_status_id !== row.attributes.status_id ? (
                                            <Tooltip content="Applies only to this system-CVE pair">
                                                <ServerAltIcon />
                                            </Tooltip>
                                        ) : (
                                            ''
                                        )}{' '}
                                        {
                                            STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString())
                                            .label
                                        }
                                    </span>
                                )
                            }
                        ],
                        isOpen: false,
                        selected: false
                    },
                    {
                        cells: [
                            {
                                title: (
                                    <TextContent>
                                        <Label>Description</Label>
                                        <Text component={TextVariants.p}>{row.attributes.description}</Text>
                                    </TextContent>
                                )
                            }
                        ],
                        parent: index * 2
                    }
                ]),
            meta,
            errors,
            isLoading
        };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

function handleCVELink(synopsis, body) {
    if (location.href.indexOf('vulnerability') !== -1) {
        return <Link to={'/cves/' + synopsis}>{body || synopsis}</Link>;
    } else {
        return <a href={`${document.baseURI}rhel/vulnerability/cves/${synopsis}`}>{body || synopsis}</a>;
    }
}
