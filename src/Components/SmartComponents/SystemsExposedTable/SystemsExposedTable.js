import qs from 'query-string';
import propTypes from 'prop-types';
import './SystemsExposedTable.scss';
import { injectIntl } from 'react-intl';
import messages from '../../../Messages';
import { withRouter } from 'react-router-dom';
import * as reactRouterDom from 'react-router-dom';
import * as reactCore from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import * as pfReactTable from '@patternfly/react-table';
import { useDispatch, useSelector } from 'react-redux';
import React, { useEffect, useState, useMemo } from 'react';
import CvePairStatusModal from '../Modals/CvePairStatusModal';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { middlewareListener } from '../../../Utilities/ReducerRegistry';
import selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';
import { Text, TextContent, TextVariants } from '@patternfly/react-core';
import { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';
import StatusColumn from '../../PresentationalComponents/StatusColumn/StatusColumn';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { renderSystemCSAwIcon } from '../../../Helpers/VulnerabilitiesHelper';
import DownloadReport from '../../../Helpers/DownloadReport';
import Remediation from '../Remediation/Remediation';
import searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';
import securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';
import statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';
import { kebabAction, exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import {
    selectMultipleEntities,
    fetchAffectedSystemsByCVE,
    fetchCveDetails,
    expandRow,
    changeExposedSystemsParameters
} from '../../../Store/Actions/Actions';

const SystemsExposedTable = (props) => {
    const [InventoryTable, setInventoryTable] = useState(()=> () => <div>Loading...</div>);
    const [filter, setFilter] = useState(qs.parse(props.location.search).filter);
    const [StatusModal, setStatusModal] = useState(()=>null);
    const [selectedHosts, setSelectedHosts] = useState(undefined);
    const [statusId, setStatusId] = useState();
    const [securityRule, setSecurityRule] = useState();
    const inventory = React.createRef();
    const dispatch = useDispatch();

    const affectedSystems = useSelector(({ CVEStore }) =>CVEStore.affectedSystemsByCVE);

    const handleSelect = (isChecked, payload) => {
        const selectedHosts = payload ? payload : [];
        setSelectedHosts(selectedHosts);
    };

    const onSelect = (payload) => {
        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]
            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);

        handleSelect(false, newSelected);
    };

    // eslint-disable-next-line no-unused-vars
    const [selectListener] = useState(middlewareListener.addNew({
        on: 'SELECT_ENTITY',
        callback: payload => onSelect(payload)
    }));

    const isLoading = useSelector(
        ({ CVEStore }) => CVEStore.affectedSystemsByCVE.isLoading
    );

    const parameters = useSelector(
        ({ CVEStore }) => CVEStore.parameters
    );

    const metadata = useSelector(
        ({ CVEStore }) => CVEStore.affectedSystemsByCVE.payload.meta
    );

    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems, ...props.cve }), [affectedSystems, props.cve]);

    const params = () => ({ filter,  securityRule, statusId  });

    const exposedTableColumns =   [
        {
            key: 'display_name',
            title: props.intl.formatMessage(messages.systemsColumnHeaderName),
            composed: ['facts.os_release', 'display_name'],
            props: {
                width: 40
            },
            renderFunc: (item, _id, { rule }) => renderSystemCSAwIcon(item, rule)
        },
        {
            key: 'status',
            title: props.intl.formatMessage(messages.status),
            props: {
                width: 30
            },
            renderFunc: (
                value,
                _id,
                { cve_status_id: cveStatusId, status_id: systemStatusId }
            ) => <StatusColumn cveStatusId={cveStatusId} systemStatusId={systemStatusId} />
        }
    ];

    useEffect(() => {
        if (Object.keys(parameters).length !== 0 && parameters.constructor === Object) {
            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));
        }
    }, [parameters, dispatch, props.cve]);

    useEffect(()=>{
        if (selectedHosts) {
            dispatch(selectMultipleEntities(selectedHosts));
        }
    }, [selectedHosts, dispatch]);

    const loadInventory = async () => {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(exposedTableColumns)),
            ...mergeWithDetail()
        });

        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());
        setInventoryTable(() => InventoryTable);
    };

    useEffect(() => {
        loadInventory();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // #TODO: can be better. Similar function exists in 2 other places.
    const createUrlParams = allParams => {
        const params = { ...allParams };
        const allowedParams = ['filter', 'page', 'page_size', 'status_id'];
        Object.keys(allParams).forEach(
            key =>
                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&
                delete params[key]
        );
        const queryString = qs.stringify(params);
        props.history.push('?' + queryString);
    };

    const downloadReport = format => {
        let params = [props.cve, { ...parameters }];
        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');
    };

    const onRefresh = (config) => {
        dispatch(changeExposedSystemsParameters(config));
    };

    const showStatusModal = (cves, inventories) => {
        setStatusModal(
            () => () =>
                <CvePairStatusModal
                    cves={cves}
                    updateRef={() => {
                        onRefresh({ ...parameters });
                        fetchCveDetails(props.cve);
                    }}
                    inventories={ inventories }
                    type={'systemsExposed'}
                />

        );
    };

    const handleRefresh = ({ page, per_page: perPage, security_rule: securityRule, status_id: statusId, filter }, metadata) => {
        if (metadata && metadata.total_items <= perPage && inventory.current) {
            inventory.current.onRefreshData({ page, per_page: perPage, perPage });
        }

        const config = {
            page,
            page_size: perPage,
            filter: filter === '' ? undefined : (filter || params().filter),
            status_id: statusId === '' ? undefined : (statusId || params().statusId),
            security_rule: securityRule  === '' ? undefined : (securityRule || params().securityRule)
        };

        createUrlParams(config);
        setFilter(config.filter);
        setStatusId(config.status_id);
        setSecurityRule(config.security_rule);

        onRefresh(config);
    };

    const kebabOptions = [
        (!isLoading && (<Remediation systemId={props.cve} selectedCves={selectedHosts} />) || ''),
        kebabAction(
            props.intl.formatMessage(messages.editStatus),
            () => showStatusModal(
                [props.cveStatusDetails],
                selectedHosts.map(item => ({ id: item })),
                !selectedHosts || selectedHosts.length === 0
            ),
            !selectedHosts || selectedHosts.length === 0
        )
    ];

    const selectOptions  = selectAllCheckbox({
        selectedItems: selectedHosts || [],
        selectorHandler: handleSelect,
        items: items.data && items || { data: [], meta: { total_items: 0 } },
        fetchResource: ops =>fetchAffectedSystemsByCVE(props.cve, { ...params(), ...ops })
    });

    return (
        <React.Fragment>
            <TextContent>
                <Text component={TextVariants.h2}>
                    {props.intl.formatMessage(messages.systemsExposedTableHeader)}
                </Text>
            </TextContent>
            {InventoryTable && (<InventoryTable
                items={items.data || []}
                key={'inventory'}
                ref={inventory}
                expandable='true'
                onRefresh={(c) =>handleRefresh(c, metadata)}
                isLoaded = {!isLoading}
                page={metadata && metadata.page || 1}
                total={metadata && metadata.total_items || 0}
                perPage={metadata && metadata.page_size || 10}
                hasCheckbox={items && items.length !== 0}
                showActions={items && items.length !== 0}
                exportConfig={exportConfig({ downloadReport })}
                onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}
                actions={systemExposedTableRowActions(showStatusModal, props.cveStatusDetails, selectedHosts)}
                actionsConfig={{
                    actions: kebabOptions,
                    isDisabled: !selectedHosts && items.meta.total_items === 0,
                    dropdownProps: { className: 'custom-class' }
                }}
                activeFiltersConfig={{
                    filters: buildActiveFilters({ ...parameters,
                        security_rule: parameters.security_rule !== '0' && parameters.security_rule || undefined }),
                    onDelete: (e, i) => removeFilters(i, (f) => handleRefresh(f, metadata))
                }}
                bulkSelect ={ selectOptions && {
                    count: selectedHosts && selectedHosts.length,
                    items: selectOptions.items,
                    isDisabled: items.meta.total_items === 0,
                    checked: Boolean(selectedHosts && selectedHosts.length),
                    onSelect: () => selectOptions.handleOnCheckboxChange()
                }}
                filterConfig={{
                    items: [
                        searchFilter(
                            messages.systemsSearchName, messages.searchFilterByName,
                            parameters.filter, (f) => handleRefresh(f, metadata)
                        ),
                        securityRuleFilter((f) => handleRefresh(f, metadata), parameters, props.filterRuleValues),
                        statusFilter((f) => handleRefresh(f, metadata), parameters)
                    ]
                }}

            >
                {StatusModal && <StatusModal />}
            </InventoryTable>)}
        </React.Fragment>
    );
};

SystemsExposedTable.propTypes = {
    intl: propTypes.object,
    cve: propTypes.string,
    cveStatusDetails: propTypes.object,
    location: propTypes.object,
    history: propTypes.object,
    filterRuleValues: propTypes.array
};

export default injectIntl(
    withRouter(
        SystemsExposedTable
    )
);
