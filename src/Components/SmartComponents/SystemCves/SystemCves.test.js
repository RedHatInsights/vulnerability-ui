import { ConnectedSystemCves } from './SystemCves';
import configureStore from 'redux-mock-store';
import { initialState } from '../../../Store/Reducers/SystemCvesStore';
import { useSelector } from 'react-redux';
import DownloadReport from '../../../Helpers/DownloadReport';
import TestWrapper from '../../../Utilities/TestWrapper';
import { fireEvent, render, screen, waitFor, within } from '@testing-library/react';
import { systemCvesTableData } from './systemCves.fixtures';
import '@testing-library/jest-dom';

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));

jest.mock("../../../Helpers/DownloadReport", () => ({
    ...jest.requireActual("../../../Helpers/DownloadReport"),
    exec: jest.fn()
}));

jest.mock('../../../Store/Actions/Actions', () => ({
    ...jest.requireActual('../../../Store/Actions/Actions'),
    fetchCveListBySystem: () => ({
        type: 'FETCH_SYSTEM_CVE_LIST',
        payload: new Promise(() => {})
    })
}));

let state = {
    ...initialState,
    parameters: {},
    cveList: {
        isLoading: false,
        payload: {
            meta: {
                test: 'test'
            },
            data: systemCvesTableData
        }
    },
    expandedRows: [],
    prevLoadedRows: [],
    systemCVEs: { payload: { data: [{ id: 'CVE-2019-6454', attributes: {
        business_risk: "Not Defined",
        business_risk_id: 0,
        business_risk_text: null,
        cve_status_id: 2,
        status_justification: "testhello",
        cve_status_text: "testhello",
        cvss2_score: null,
        cvss3_score: "6.500",
        description: "A new domain bypass",
        impact: "Moderate",
        public_date: "2020-06-09T17:00:00+00:00",
        reporter: 1,
        rule: null,
        status: "On-Hold",
        status_id: 2,
        status_text: "testhello",
        synopsis: "CVE-2019-6454",
        systems_affected: 1,
        advisories_list: ['adv-1', 'adv-2'],
        known_exploit: false
    } }]} },
    unsupported: false
};


const mockStore = configureStore([]);
const store = mockStore(initialState);

let wrapper;
beforeEach(() => {
    store.clearActions();
    useSelector.mockImplementation(callback => {
        return callback({ SystemCvesStore: state, AppStore: { popup: {} } });
    });
    
    wrapper = render(
        <TestWrapper store={ store }>
            <ConnectedSystemCves
                entity={{ id: 'CVE-2020-0543', display_name: 'testName' }}
                allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}
                canExport
            />
        </TestWrapper>
    );
});

describe('SystemCves', () => {
    it('Should dispatch CHANGE_CVE_LIST_PARAMETERS and FETCH_CVE_LIST only once on load', () => {
        const dispatchedActions = store.getActions();
        expect(dispatchedActions.filter(item => item.type === 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS')).toHaveLength(1);
        expect(dispatchedActions.filter(item => item.type === 'FETCH_SYSTEM_CVE_LIST')).toHaveLength(1);
    });

    it('Should clear store on unmount', () => {
        wrapper.unmount();
        const dispatchedActions = store.getActions();
        setTimeout(() => {
            expect(dispatchedActions.filter(item => item.type === 'CLEAR_SYSTEM_CVES_STORE')).toHaveLength(1);
        })
    });

    describe('Check errors', () => {
        let wrapperForErrors;
        function renderComponent(customMiddleWareErrors, insightsId) {
            const mockStoreErrors = configureStore([customMiddleWareErrors]);
            const storeForErrors = mockStoreErrors(initialState);
            wrapperForErrors = render(
                <TestWrapper store={ storeForErrors }>
                    <ConnectedSystemCves
                        entity={{ insights_id: insightsId, id: 'CVE-2020-0543', display_name: 'testName' }}
                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}
                        canExport
                    />
                </TestWrapper>
            );
        };

        it('Should render NotConnected', () => {
            const customMiddleWareErrors = store => next => action => {
                useSelector.mockImplementation(callback => {
                    return callback({
                        SystemCvesStore: {
                            ...initialState,
                            cveList: { isLoading: false, payload: { errors: true, meta: {}, data: [] } }
                        }
                    });
                });
                next(action);
            };

            renderComponent(customMiddleWareErrors);

            expect(screen.getByRole('heading', {
                name: /this system isnâ€™t connected to insights yet/i
            })).toBeVisible();
        });

        it('Should generate error', () => {
            const customMiddleWareErrors = store => next => action => {
                useSelector.mockImplementation(callback => {
                    return callback({
                        SystemCvesStore: {
                            ...initialState,
                            cveList: { isLoading: false, payload: { errors: true, meta: {}, data: [] } }
                        }
                    });
                });
                next(action);
            };

            renderComponent(customMiddleWareErrors, '1234');

            expect(screen.getByRole('heading', {
                name: /something went wrong/i
            })).toBeVisible();
        });

        it('Should generate EmptyVulnerabilityData', () => {
            const customMiddleWareErrors = store => next => action => {
                useSelector.mockImplementation(callback => {
                    return callback({
                        SystemCvesStore: {
                            ...initialState,
                            cveList: { isLoading: false, payload: { errors: { status: 404 }, meta: {}, data: [] } }
                        }
                    });
                });
                next(action);
            };

            renderComponent(customMiddleWareErrors, '1234');

            expect(screen.getByRole('heading', {
                name: /we lost that page/i
            })).toBeVisible();
        });
    });

    it('Should dispatch selectCve action with single object on single item select', () => {
        fireEvent.click(screen.getByRole('checkbox', {
            name: /select row 4/i
        }));
        const dispatchedActions = store.getActions();
        expect(dispatchedActions.filter(item => item.type === 'SELECT_SYSTEM_CVE')).toHaveLength(1);
        expect(dispatchedActions.filter(item => item.type === 'SELECT_SYSTEM_CVE')[0].payload).toEqual(
            {
                type: 'cve',
                id: 'CVE-2022-1234',
                business_risk: "Not Defined",
                business_risk_id: 0,
                business_risk_text: null,
                cve_status_id: 2,
                cve_status_text: "testhello",
                cvss2_score: null,
                cvss3_score: "6.500",
                description: "A new domain bypass",
                impact: "Moderate",
                public_date: "2020-06-09T17:00:00+00:00",
                reporter: 1,
                rule: null,
                status: "On-Hold",
                status_id: 2,
                status_text: "testhello",
                synopsis: "CVE-2022-1234",
                systems_affected: 1,
                advisories_list: ['adv-1', 'adv-2'],
                known_exploit: false
            }
        );
    });

    it('Should dispatch selectCve action with array on bulk select', () => {
        fireEvent.click(screen.getByRole('button', {
            name: /select/i
        }));

        fireEvent.click(screen.getByRole('menuitem', {
            name: /select page \(4 items\)/i
        }));

        const dispatchedActions = store.getActions();
        expect(dispatchedActions.filter(item => item.type === 'SELECT_SYSTEM_CVE')).toHaveLength(1);
        expect(dispatchedActions.filter(item => item.type === 'SELECT_SYSTEM_CVE')[0].payload).toEqual([
            {
                type: 'cve',
                id: 'CVE-2019-6454',
                business_risk: "Not Defined",
                business_risk_id: 0,
                business_risk_text: null,
                cve_status_id: 2,
                cve_status_text: "testhello",
                cvss2_score: null,
                cvss3_score: "6.500",
                description: "A new domain bypass",
                impact: "Moderate",
                public_date: "2020-06-09T17:00:00+00:00",
                reporter: 1,
                rule: null,
                status: "On-Hold",
                status_id: 2,
                status_text: "testhello",
                synopsis: "CVE-2019-6454",
                systems_affected: 1,
                advisories_list: ['adv-1', 'adv-2'],
                known_exploit: false
            },
            {
                type: 'cve',
                id: 'CVE-2020-0543',
                business_risk: "Not Defined",
                business_risk_id: 0,
                business_risk_text: null,
                cve_status_id: 2,
                cve_status_text: "testhello",
                cvss2_score: null,
                cvss3_score: "6.500",
                description: "A new domain bypass",
                impact: "Moderate",
                public_date: "2020-06-09T17:00:00+00:00",
                reporter: 1,
                rule: null,
                status: "On-Hold",
                status_id: 2,
                status_text: "testhello",
                synopsis: "CVE-2020-0453",
                systems_affected: 1,
                advisories_list: ['adv-1', 'adv-2'],
                known_exploit: false
            },
            {
                type: 'cve',
                id: 'CVE-2022-1234',
                business_risk: "Not Defined",
                business_risk_id: 0,
                business_risk_text: null,
                cve_status_id: 2,
                cve_status_text: "testhello",
                cvss2_score: null,
                cvss3_score: "6.500",
                description: "A new domain bypass",
                impact: "Moderate",
                public_date: "2020-06-09T17:00:00+00:00",
                reporter: 1,
                rule: null,
                status: "On-Hold",
                status_id: 2,
                status_text: "testhello",
                synopsis: "CVE-2022-1234",
                systems_affected: 1,
                advisories_list: ['adv-1', 'adv-2'],
                known_exploit: false
            },
            {
                type: 'cve',
                id: 'CVE-2022-1235',
                business_risk: "Low",
                business_risk_id: 1,
                business_risk_text: null,
                cve_status_id: 2,
                cve_status_text: "testhello",
                cvss2_score: null,
                cvss3_score: "6.500",
                description: "A new domain bypass",
                impact: "Moderate",
                public_date: "2020-06-09T17:00:00+00:00",
                reporter: 1,
                rule: null,
                status: "On-Hold",
                status_id: 2,
                status_text: "testhello",
                synopsis: "CVE-2022-1235",
                systems_affected: 1,
                advisories_list: ['adv-1', 'adv-2'],
                known_exploit: false
            }
        ]);
    });

    it.skip('Should call Download exec with format and parameters', async () => {
        fireEvent.click(screen.getByRole('button', {
            name: /export/i
        }));

        screen.getByRole('menuitem', {
            name: /export to json/i
        });

        await waitFor(() => expect(DownloadReport.exec).toHaveBeenCalled());
    });

    it('Should dispatch openCve action on opening (an) entitiy/entities', () => {
        fireEvent.click(screen.getByRole('button', {
            name: /expand all rows/i
        }));
        const dispatchedActions = store.getActions();
        expect(dispatchedActions.filter(item => item.type === 'EXPAND_SYSTEM_CVE')).toHaveLength(1);
    });

    it('Should dispatch changeParameters action on apply method call with provided parameters', () => {
        fireEvent.click(screen.getByRole('button', {
            name: /conditional filter/i
        }));

        fireEvent.click(screen.getByRole('menuitem', { name: 'Status' }));

        fireEvent.click(screen.getByRole('button', {
            name: /options menu/i
        }));

        fireEvent.click(screen.getByRole('checkbox', { name: 'In review' }));
        const dispatchedActions = store.getActions();
        const action = dispatchedActions.filter(item => item.type === 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS');

        expect(action[1].payload).toEqual({ page: 1, status_id: '1' });
        expect(action).toHaveLength(2);
    });

    it('Should display status modal', () => {
        const row = screen.getByRole('row', {
            name: /details select row 6 cve\-2022\-1235 09 june 2020 moderate moderate 6\.5 adv\-1 , adv\-2 low on\-hold/i
        });
          
        fireEvent.click(within(row).getByRole('button', {
            name: /kebab toggle/i
        }));

        fireEvent.click(screen.getByRole('menuitem', { name: 'Edit status' }));

        const view = screen.getByText(/change the status of for the system \./i);

        expect(within(view).getByText(/cve\-2022\-1235/i)).toBeVisible();
        expect(screen.getByText(/testname/i)).toBeVisible();
    });

    it('Should apply default filter when navigated from side nav', () => {
        const dispatchedActions = store.getActions();
        const action = dispatchedActions.filter(item => item.type === 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS');

        expect(action[0].payload).toEqual({ advisory_available: 'true' });
        expect(action).toHaveLength(1);
    });
});
