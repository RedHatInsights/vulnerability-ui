import { Grid, GridItem, Page } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchCveDetails, setHeader } from '../../../Store/Actions/Actions';
import { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';
import { paths } from '../../../Utilities/Routes';
import CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';
import SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

class CVEPage extends React.Component {
    constructor(props) {
        super(props);
        this.state = { cveName: this.props.match.params.cve };
    }

    componentDidMount() {
        this.props.setHeader({
            breadcrumbs: [{ title: 'Vulnerability', to: paths.vulnerabilities }, { title: this.state.cveName, isActive: true }]
        });
        this.props.fetchCveDetails(this.state.cveName);
    }

    render() {
        return (
            <Page>
                <VulnerabilityHeader title={this.state.cveName} showTabs={false}>
                    <CVEPageDetails data={this.props.cveDetails} />
                </VulnerabilityHeader>
                <Main>
                    <Grid gutter="sm">
                        <GridItem>
                            <SystemsExposedTable cve={this.state.cveName} />
                        </GridItem>
                    </Grid>
                </Main>
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        cveDetails: sCveDetailsPage(state)
    };
}

const mapDispatchToProps = () => {
    return {
        fetchCveDetails: cveName => dispatchAction(fetchCveDetails(cveName)),
        setHeader: header => dispatchAction(setHeader(header))
    };
};

CVEPage.propTypes = {
    match: propTypes.object,
    cveDetails: propTypes.object,
    fetchCveDetails: propTypes.func,
    entities: propTypes.object,
    setHeader: propTypes.func
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEPage)
);
