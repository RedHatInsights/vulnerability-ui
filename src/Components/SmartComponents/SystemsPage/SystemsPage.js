import React, { useEffect, Fragment, useMemo } from 'react';
import { useIntl } from 'react-intl';
import messages from '../../../Messages';
import { useDispatch, useSelector, shallowEqual } from 'react-redux';
import SystemsTableToolbar from './SystemsTableToolbar';
import { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { systemTableRowActions } from '../../../Helpers/CVEHelper';
import Header from '../../PresentationalComponents/Header/Header';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import {
    changeSystemsParams,
    clearSystemStore,
    clearInventoryStore,
    selectRows
} from '../../../Store/Actions/Actions';
import { useUrlParams } from '../../../Helpers/MiscHelper';
import { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';
import ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';
import { nowrap, TableVariant } from '@patternfly/react-table';
import { useGetEntities, useOptOutSystems } from '../../../Helpers/Hooks';
import useDeepCompareEffect from 'use-deep-compare-effect';
import * as APIHelper from '../../../Helpers/APIHelper';

const createColumns = (defaultColumns) => {
    let [nameColumn, ...restColumns] = SYSTEMS_HEADER;
    let lastSeenColumn = defaultColumns.find(({ key }) => key === 'updated');
    let tagsColumn = defaultColumns.find(({ key }) => key === 'tags');

    tagsColumn = { ...tagsColumn, props: { width: 10, isStatic: true } };
    lastSeenColumn = { ...lastSeenColumn, cellTransforms: [nowrap], props: { width: 20 } };

    let mergedColumns = [nameColumn, tagsColumn, ...restColumns, lastSeenColumn];

    return mergedColumns;
};

const SystemsPage = () => {
    const inventoryRef = React.createRef();
    const dispatch = useDispatch();
    const intl = useIntl();
    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);

    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);
    const totalItems = useSelector(({ entities }) => entities?.total);
    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});
    const totalSelectedRows = Object.keys(selectedRows).length || 0;

    const parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);
    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);

    useEffect(() => {
        return () => {
            dispatch(clearSystemStore());
            dispatch(clearInventoryStore());
        };
    }, [dispatch]);

    const apply = (params) => dispatch(changeSystemsParams(params));

    useEffect(() =>  apply(urlParameters), []);

    useDeepCompareEffect(() => setUrlParams({ ...parameters }), [parameters]);

    const handleSelect = (payload) => dispatch(selectRows(payload));

    const onRefreshInventory = () => (
        dispatch(clearInventoryStore()),
        inventoryRef.current.onRefreshData(({ page: 1 }))
    );

    const doOptOut = useOptOutSystems({ selectedRows, totalSelectedRows, onRefreshInventory });

    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, []);
    const getEntities = useGetEntities(APIHelper.getSystems, setUrlParams);

    return (
        <Fragment>
            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />
            <Main>
                <Fragment>
                    { hasError
                        ? <ErrorHandler code={errorCode} />
                        : (
                            <InventoryTable
                                disableDefaultColumns
                                onLoad={({ mergeWithEntities }) => {
                                    ReducerRegistry.register({
                                        ...mergeWithEntities(
                                            inventoryEntitiesReducer(SYSTEMS_HEADER)
                                        )
                                    });
                                }}
                                tableProps={{
                                    isStickyHeader: true,
                                    canSelectAll: false,
                                    actionResolver: systems?.length > 0
                                        && ((rowData) => systemTableRowActions(rowData, doOptOut)),
                                    variant: TableVariant.compact
                                }}
                                showTagModal
                                isFullView
                                ref={inventoryRef}
                                autoRefresh
                                customFilters={{
                                    vulnerabilityParams: {
                                        ...parameters
                                    }
                                }}
                                hasCheckbox={systems?.length !== 0}
                                columnCounter={columnCounter}
                                columns={(defaultColumns) => createColumns(defaultColumns)}
                                getEntities={getEntities}
                                hideFilters={{ all: true }}
                            >
                                <SystemsTableToolbar
                                    parameters = {parameters}
                                    systems = {{ data: systems, meta: { total_items: totalItems } }}
                                    selectedRows = {selectedRows}
                                    totalSelectedRows={totalSelectedRows}
                                    methods = {{
                                        doOptOut,
                                        apply,
                                        handleSelect
                                    }}
                                    actions
                                />
                            </InventoryTable>
                        )}
                </Fragment>
            </Main>
        </Fragment>
    );
};

export default SystemsPage;
