import React from 'react';
import '@cypress/code-coverage/support';
import '@frsource/cypress-plugin-visual-regression-diff';

import '@patternfly/patternfly/patternfly.scss';
import FlagProvider from '@unleash/proxy-client-react';
import { Provider } from 'react-redux';
import { MemoryRouter, Routes, Route } from 'react-router-dom';
import ReducerRegistry from '../../src/Utilities/ReducerRegistry';
import { RBACProvider } from '@redhat-cloud-services/frontend-components/RBACProvider';
import { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';
import messages from '../../locales/en.json';
import { mount } from 'cypress/react';

Cypress.Commands.add('mountWithContext', (Component, options = {}, props) => {
    const { path, routerProps = { initialEntries: ['/'] } } = options;

    return mount(
        <FlagProvider
            config={{
                url: 'http://localhost:8002/feature_flags',
                clientKey: 'abc',
                appName: 'abc'
            }}
        >
            <IntlProvider locale="en" messages={messages}>
                <Provider store={ReducerRegistry.getStore()}>
                    <MemoryRouter {...routerProps}>
                        <RBACProvider appName="inventory" checkResourceDefinitions>
                            {path ? (
                                <Routes>
                                    <Route path={options.path} element={<Component {...props} />} />
                                </Routes>
                            ) : (
                                <Component {...props} />
                            )}
                        </RBACProvider>
                    </MemoryRouter>
                </Provider>
            </IntlProvider>
        </FlagProvider>
    );
});

Cypress.Commands.add('mount', mount);

window.insights = {
    chrome: {
        getUserPermissions: () => Promise.resolve([{ permission: 'vulnerability:*:*' }]),
        auth: {
            getUser: () => 'Testing Name'
        },
        isProd: false
    }
};
