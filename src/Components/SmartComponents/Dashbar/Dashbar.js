import React, { useEffect, useState } from 'react';
import { Card, Grid, GridItem, StackItem, Stack, Alert, CardBody, Text } from '@patternfly/react-core';
import { Main } from '@redhat-cloud-services/frontend-components/Main';
import { SecurityIcon } from '@patternfly/react-icons';
import { impactList, CVES_DEFAULT_FILTERS } from '../../../Helpers/constants';
import { constructFilterParameters, sanitizeLinks } from '../../../Helpers/MiscHelper';
import { useDispatch, useSelector } from 'react-redux';
import { changeCveListParameters } from '../../../Store/Actions/Actions';
import { FormattedMessage } from 'react-intl';
import messages from '../../../Messages';
import propTypes from 'prop-types';
import { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';
import { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';
import WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';
import { useIntl } from 'react-intl';
import sanitizeHtml from 'sanitize-html';

const DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {
    return (
        <Card isFullHeight className="card-box">
            <CardBody>
                <Text className="pf-u-font-size-lg pf-u-font-weight-bold">
                    {title}
                </Text>
                <Text className="pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs">
                    <a onClick={onLinkClick}>
                        {hasIcon && (<SecurityIcon
                            color={impactList[impact]?.iconColor}
                            size="sm"
                            className="pf-u-mr-sm" />
                        )}
                        {count}
                    </a>
                </Text>
            </CardBody>
        </Card>
    );
};

export { DashbarItem };

DashbarItem.propTypes = {
    title: propTypes.node,
    count: propTypes.number.isRequired,
    impact: propTypes.oneOf(Object.keys(impactList)),
    onLinkClick: propTypes.func.isRequired,
    hasIcon: propTypes.bool
};

const Dashbar = () => {
    const intl = useIntl();
    const dispatch = useDispatch();
    const [isFirstLoad, setFirstLoad] = useState(true);
    const [dashbar, setDashbar] = useState({});
    const [announcement, setAnnouncement] = useState({});
    const [isDashbarLoading, setDashbarLoading] = useState(true);

    const parameters = useSelector(
        ({ CVEsStore }) => CVEsStore.parameters
    );

    const apply = (filterParams = {}) => {
        const params = constructFilterParameters(filterParams);
        dispatch(changeCveListParameters(params));
    };

    // reset filters and apply passed ones
    const applyOnly = (filterParams = {}) => {
        const chips = buildActiveFilters(parameters);
        removeFilters(chips, apply, true, filterParams);
    };

    const fetchAnnouncements = async () => {
        let data = {};

        try {
            data = await getAnnouncement();
        }
        catch (error) {
            if (error.status !== '404') {
                throw error;
            }
        }

        setAnnouncement(data);
    };

    const fetchDashbar = async () => {
        let data = await getDashbar(parameters);

        setDashbar(data);
        setDashbarLoading(false);
    };

    useEffect(() => {
        if (isFirstLoad) {
            setFirstLoad(false);
        } else {
            fetchAnnouncements();
            fetchDashbar();
        }
    }, [parameters]);

    const insertSanitizedHtml = text => ({ __html: sanitizeHtml(text) });

    return (
        <Main style={{ paddingBottom: 0 }}>
            <Stack hasGutter>
                <StackItem>
                    {!isDashbarLoading ? (
                        <Grid hasGutter>
                            <GridItem span={12} md={3}>
                                <DashbarItem
                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}
                                    count={dashbar?.exploitable_cves}
                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, known_exploit: 'true' })}
                                />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <DashbarItem
                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}
                                    count={dashbar?.cves_with_rule}
                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, rule_presence: 'true' })}
                                />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <DashbarItem
                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}
                                    count={dashbar?.critical_cves}
                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '7' })}
                                    impact="Critical"
                                    hasIcon
                                />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <DashbarItem
                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}
                                    count={dashbar?.important_cves}
                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '5' })}
                                    impact="Important"
                                    hasIcon
                                />
                            </GridItem>
                        </Grid>
                    ) : (
                        <Grid hasGutter>
                            <GridItem span={12} md={3}>
                                <WithLoader isLoading={isDashbarLoading}
                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <WithLoader isLoading={isDashbarLoading}
                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <WithLoader isLoading={isDashbarLoading}
                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />
                            </GridItem>
                            <GridItem span={12} md={3}>
                                <WithLoader isLoading={isDashbarLoading}
                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />
                            </GridItem>
                        </Grid>
                    )}
                </StackItem>
                {announcement?.message && (
                    <StackItem>
                        <Alert
                            variant="warning"
                            isInline
                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}
                        >
                            <span dangerouslySetInnerHTML={
                                insertSanitizedHtml(sanitizeLinks(announcement.message))
                            } />
                        </Alert>
                    </StackItem>
                )}
            </Stack>
        </Main>
    );
};

export default Dashbar;
