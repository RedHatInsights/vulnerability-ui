import React from 'react';
import { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';
import propTypes from 'prop-types';

const FilterChips = (props) => {
    const { filterValues, filterCategories, apply } = props;
    const localFilters = { ...filterValues };
    const localFilterCategories = [...filterCategories];

    delete localFilters.show_all;

    const removeFilter = (key, value) => {
        const values = value.split(',');
        const newFilter = {
            [key]: filterValues[key]
            .split(',')
            .filter(item => !values.includes(item))
            .join(',')
        };

        if (newFilter[key].length !== 0) {
            apply({ ...newFilter, page: 1 });
        } else {
            const filter = { ...filterValues, [key]: undefined };
            apply({ ...filter, page: 1 });
        }
    };

    const removeAllFilters = (allowedFilters) => {

        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});

        apply({ ...resetParams, page: 1 });
    };

    const getFilters = (localFilters) => {
        const prunedFilters = Object.entries(localFilters);
        const filters = localFilterCategories.map(category =>
        {
            return prunedFilters.find(filter => {
                let [key] = filter;
                return key === category.urlParam;
            });
        });

        return filters;
    };

    const filterIsNotEmpty = (filter) => {
        return filter && (!filter.includes(undefined) && !filter.includes(''));
    };

    const filters = getFilters(localFilters);

    const allowedFilters = filters.filter(filter => filterIsNotEmpty(filter));

    return allowedFilters.length > 0 &&
        <React.Fragment>
            <ChipGroup withToolbar>
                {allowedFilters.map(filter => {
                    const [key, value] = filter;
                    const category = localFilterCategories.find(category => category.urlParam === key);
                    return (
                        <ChipGroupToolbarItem key={key} categoryName={category.title}>
                            { value && value.split(',').map(chip => {
                                const mapChip = category.values.find(item => item.value.indexOf(chip) !== -1);
                                let { value, label  } = mapChip ? { ...mapChip } : { value: key, label: chip };
                                return (
                                    <Chip key={value} onClick={() => removeFilter(category.urlParam, chip)}>
                                        { label }
                                    </Chip>
                                );
                            }) }
                        </ChipGroupToolbarItem>
                    );
                }) }
            </ChipGroup>
            <Button variant="link" onClick={() => removeAllFilters(allowedFilters)}>
                Clear filters
            </Button>
        </React.Fragment>;
};

FilterChips.propTypes = {
    filterValues: propTypes.object,
    filterCategories: propTypes.array,
    apply: propTypes.func
};

export default FilterChips;
