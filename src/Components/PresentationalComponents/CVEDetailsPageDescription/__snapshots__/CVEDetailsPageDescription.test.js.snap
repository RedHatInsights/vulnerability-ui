// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CVEDetailsPageDescription component should render without props 1`] = `
<injectIntl(CVEDetailsPageDescription)
  cveAttributes={
    Object {
      "business_risk": "Not defined",
      "business_risk_id": 0,
      "business_risk_justification": null,
      "cvss3_metrics": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "cvss3_score": "5.900",
      "description": "It was found that ghostscript could leak sensitive operators on the operand stack when a pseudo-operator pushes a subroutine. A specially crafted PostScript file could use this flaw to escape the -dSAFER protection in order to, for example, have access to the file system and execute commands.",
      "impact": "Important",
      "public_date": "12 May 2020",
      "status": "Resolved via mitigation",
      "status_id": 6,
      "synopsis": "CVE-2020-10711",
      "systems_status_detail": Object {
        "0": 2,
      },
    }
  }
>
  <CVEDetailsPageDescription
    cveAttributes={
      Object {
        "business_risk": "Not defined",
        "business_risk_id": 0,
        "business_risk_justification": null,
        "cvss3_metrics": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "cvss3_score": "5.900",
        "description": "It was found that ghostscript could leak sensitive operators on the operand stack when a pseudo-operator pushes a subroutine. A specially crafted PostScript file could use this flaw to escape the -dSAFER protection in order to, for example, have access to the file system and execute commands.",
        "impact": "Important",
        "public_date": "12 May 2020",
        "status": "Resolved via mitigation",
        "status_id": 6,
        "synopsis": "CVE-2020-10711",
        "systems_status_detail": Object {
          "0": 2,
        },
      }
    }
    intl={
      Object {
        "$t": [Function],
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "defaultRichTextElements": undefined,
        "fallbackOnEmptyString": true,
        "formatDate": [Function],
        "formatDateTimeRange": [Function],
        "formatDateToParts": [Function],
        "formatDisplayName": [Function],
        "formatList": [Function],
        "formatListToParts": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatNumberToParts": [Function],
        "formatPlural": [Function],
        "formatRelativeTime": [Function],
        "formatTime": [Function],
        "formatTimeToParts": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getDisplayNames": [Function],
          "getListFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralRules": [Function],
          "getRelativeTimeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {
          "default.cancel": "Cancel",
          "default.delete": "Delete",
          "default.remove": "Remove",
          "default.save": "Save",
        },
        "onError": [Function],
        "onWarn": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": undefined,
        "wrapRichTextChunksInFragment": undefined,
      }
    }
  >
    <Stack
      hasGutter={true}
    >
      <div
        className="pf-l-stack pf-m-gutter"
      >
        <StackItem
          className="pf-u-mt-sm"
        >
          <div
            className="pf-l-stack__item pf-u-mt-sm"
          >
            <Flex>
              <div
                className="pf-l-flex"
              >
                <FlexItem>
                  <div
                    className=""
                  >
                    Publish date
                    :
                  </div>
                </FlexItem>
                <FlexItem
                  grow={
                    Object {
                      "default": "grow",
                    }
                  }
                >
                  <div
                    className="pf-m-grow"
                  >
                    <WithLoader
                      isLoading={true}
                      size="sm"
                      variant="inlineSkeleton"
                    >
                      <Skeleton
                        isDark={false}
                        size="sm"
                        style={
                          Object {
                            "display": "inline-block",
                          }
                        }
                      >
                        <div
                          className="ins-c-skeleton ins-c-skeleton__sm"
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }
                        >
                           
                        </div>
                      </Skeleton>
                    </WithLoader>
                  </div>
                </FlexItem>
              </div>
            </Flex>
          </div>
        </StackItem>
        <StackItem>
          <div
            className="pf-l-stack__item"
          >
            <WithLoader
              isLoading={true}
              style={
                Object {
                  "height": "132px",
                  "width": "100%",
                }
              }
              variant="rectangle"
            >
              <Skeleton
                isDark={false}
                shape="square"
                size="md"
                style={
                  Object {
                    "height": "132px",
                    "width": "100%",
                  }
                }
              >
                <div
                  className="ins-c-skeleton ins-c-skeleton__md"
                  shape="square"
                  style={
                    Object {
                      "height": "132px",
                      "width": "100%",
                    }
                  }
                >
                   
                </div>
              </Skeleton>
            </WithLoader>
          </div>
        </StackItem>
        <StackItem
          className="pf-u-mt-sm pf-u-mb-md"
        >
          <div
            className="pf-l-stack__item pf-u-mt-sm pf-u-mb-md"
          />
        </StackItem>
      </div>
    </Stack>
  </CVEDetailsPageDescription>
</injectIntl(CVEDetailsPageDescription)>
`;
