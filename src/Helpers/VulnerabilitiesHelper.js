import { parseCvssScore } from '@red-hat-insights/insights-frontend-components/Utilities/helpers';
import * as MiscHelper from './MiscHelper';
import React from 'react';
import { LongTextTooltip } from '@red-hat-insights/insights-frontend-components';
import { Shield } from '@red-hat-insights/insights-frontend-components';

export function createCveListByAccount(cveList) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload;
        if (cveList.payload.asMutable) {
            payload = cveList.payload.asMutable();
        } else {
            payload = cveList.payload;
        }

        let data = payload.data;
        let meta = payload.meta;

        data = data.map(row => ({
            id: row.id,
            cells: [
                <Shield
                    impact={row.attributes.impact}
                    hasTooltip={true}
                    tooltipPosition={'right'}
                    tooltipPrefix={'Impact: '}
                    key={row.id.toString()}
                />,
                row.attributes.synopsis,
                <LongTextTooltip
                    content={row.attributes.description}
                    maxLength={200}
                    key={row.id.toString()}
                    entryDelay="1200"
                />,
                parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score),
                row.attributes.systems_affected,
                MiscHelper.processDate(row.attributes.public_date)
            ]
        }));
        return { data, meta, isLoading };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

export function createCurrentVulnerabilitiesCard(impacts) {
    let dataSet = impacts.payload;
    let isLoading = impacts.isLoading;
    if (!isLoading) {
        dataSet = impacts.payload;
    }

    dataSet = { content: dataSet, isLoading };
    return dataSet;
}
