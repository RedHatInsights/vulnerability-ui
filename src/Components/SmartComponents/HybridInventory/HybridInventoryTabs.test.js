import HybridInventory from "./HybridInventoryTabs";
import { AccountStatContext } from "../../../Utilities/VulnerabilityRoutes";
import { CVEPageContext } from "../CVEDetailsPage/CVEDetailsPage";
import AsynComponent from "@redhat-cloud-services/frontend-components/AsyncComponent";
import '@testing-library/jest-dom';
import { render, screen, waitFor } from "@testing-library/react";

jest.mock('@redhat-cloud-services/frontend-components/AsyncComponent', () => ({
    __esModule: true,
    default: jest.fn((props) => (
      <div {...props} aria-label="hybrid-inventory-mock">
        AsyncComponent
      </div>
    )),
}));

jest.mock('../../../Utilities/useFeatureFlag', () => ({
    ...jest.requireActual('../../../Utilities/useFeatureFlag'),
    __esModule: true,
    default: jest.fn(() => false)
}));

jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useParams: jest.fn(() => ({ cve: 'testCve' }))
}))
const accountContextValue = {     
    hasConventionalSystems: true,
    hasEdgeDevices: true
};

const hybridSystemsCounts = {
    conventionalCount: 10,
    edgeCount: 10,
    areCountsLoading: false
}

const renderComponent = (props, accountContextValues = accountContextValue, cveContextValues = hybridSystemsCounts) => {
    render(
        <AccountStatContext.Provider value={accountContextValues}>
            <CVEPageContext.Provider value={cveContextValues}>
                <HybridInventory {...props} />
            </CVEPageContext.Provider>
        </AccountStatContext.Provider>
    );
};

const waitAsyncComponent = async () => {
    await waitFor(() => {
        expect(
            screen.getByLabelText('hybrid-inventory-mock')
        ).toBeInTheDocument();
    });
};

describe('HybridInventory', () => {
    it('Should auto switch to edge tab  when there is no conventional systems, but there is edge device', async () => {
        renderComponent({}, accountContextValue, {...hybridSystemsCounts, conventionalCount: 0 });

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                hasConventionalSystems: false
            }),
            {}
          );
    });
    it('Should not auto switch to edge tab automatically when there is no conventional systems and no edge device', async () => {
        renderComponent({}, accountContextValue, {...hybridSystemsCounts, conventionalCount: 0, edgeCount: 0 });

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                hasConventionalSystems: true
            }),
            {}
          );
    });
    it('Should not auto switch to edge tab automatically when there are both conventional systems and edge device', async () => {
        renderComponent({}, accountContextValue);

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                hasConventionalSystems: true
            }),
            {}
          );
    });
    it('Should pass isImmutableTabOpen prop to fed-module', async () => {
        renderComponent({ isImmutableTabOpen: true });

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                isImmutableTabOpen: true
            }),
            {}
          );
    });
    it('Should pass accountHasEdgeImages prop to fed-module from accountContext', async () => {
        renderComponent();

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                accountHasEdgeImages: true
            }),
            {}
          );
    });

    it('Should pass correct tabPath prop to fed-module from accountContext', async () => {
        renderComponent();

        await waitAsyncComponent();
        expect(AsynComponent).toHaveBeenCalledWith(
            expect.objectContaining({
                "tabPathname": "/insights/vulnerability/cves/testCve"
            }),
            {}
          );
    });
});