import CveDetailsPage from './CVEDetailsPage';
import { mountWithIntl } from '../../../Helpers/MiscHelper';
import { BrowserRouter as Router } from 'react-router-dom';
import { initialState } from '../../../Store/Reducers/CVEDetailsPageStore';
import configureStore from 'redux-mock-store';
import { Provider, useSelector } from 'react-redux';
import toJson from 'enzyme-to-json';
import Immutable from 'seamless-immutable';
import { shallow } from 'enzyme';
import { act } from "react-dom/test-utils";

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false]
}));

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn()
}));

let state = {
    ...initialState,
    cveDetails: {
        isLoading: false,
        error: false,
        payload: Immutable({
            data: {
                attributes: {
                    business_risk: "High",
                    business_risk_id: 3,
                    business_risk_text: null,
                    cvss2_metrics: null,
                    cvss2_score: null,
                    cvss3_metrics: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
                    cvss3_score: "6.500",
                    description: "A new domain bypass transient execution attack",
                    modified_date: "2020-07-20T10:37:20+00:00",
                    public_date: "2020-06-09T17:00:00+00:00",
                    redhat_url: "",
                    rules: [],
                    secondary_url: "",
                    status: "In-Review",
                    status_id: 1,
                    status_text: null,
                    synopsis: "CVE-2020-0543",
                    systems_status_detail: '',
                    systems_status_divergent: 73
                }
            }
        })
    }
}

useSelector.mockImplementation(callback => {
    return callback({ CVEDetailsPageStore: state })
});

const customMiddleWare = store => next => action => {
    next(action);
}
const mockStore = configureStore([customMiddleWare]);
const store = mockStore(initialState);
const props = { match: { params: { cve: 'testCve' } } };
window.insights = {
    loadInventory: (args) => new Promise.resolve({
        inventoryConnector: (args) => {
            const InventoryTable = ({ testProp }) => <div>A mock with '{testProp}' passed!</div>;
            return ({ InventoryTable });
        },
        mergeWithEntities: () => { },
        mergeWithDetail: () => { }
    })
};
describe('CVE details:', () => {
    it('Should render match snapshot', () => {
        const wrapper = shallow(<CveDetailsPage {...props} store={store} />);
        expect(toJson(wrapper)).toMatchSnapshot();
    });

    it('Should dispatch actions to fetch data', () => {
        mountWithIntl(
            <Provider store={store}>
                <Router><CveDetailsPage {...props} /></Router>
            </Provider>
        );
        expect(store.getActions().some(({ type }) => type === 'FETCH_CVE_DETAILS')).toBeTruthy();
        expect(store.getActions().some(({ type }) => type === 'FETCH_AFFECTED_SYSTEMS_BY_CVE')).toBeFalsy();
    });

    describe('test modals: ', () => {
        const wrapper = mountWithIntl(<Provider store={store}>
            <Router><CveDetailsPage {...props} /></Router>
        </Provider>);

        it('Should set BusinessRiskModal', () => {
            const setBusnessRisk = wrapper.find('BaseDropdown').props().dropdownItems[0].props.onClick;
            act(() => setBusnessRisk([{ business_risk_id: 'testCves' }]));
            wrapper.update();
            expect(wrapper.find('BusinessRiskModal')).toBeTruthy();
        });

        it('Should set StatusModal', () => {
            const setStatusModal = wrapper.find('BaseDropdown').props().dropdownItems[1].props.onClick;
            act(() => setStatusModal([{ business_risk_id: 'testCves' }]));
            wrapper.update();
            const statusModal = wrapper.find('CveStatusModal');
            expect(statusModal).toBeTruthy();
            act(() => statusModal.props().updateRef());
            expect(store.getActions()[4].type).toEqual('FETCH_CVE_DETAILS');
        });
    });

    it('Should display InvalidObject page', () => {
        useSelector.mockImplementation(callback => {
            return callback({
                CVEDetailsPageStore: {
                    ...initialState,
                    cveDetails: {
                        isLoading: false,
                        error: {
                            hasError: true
                        },
                    }
                }
            })
        });

        const wrapper = mountWithIntl(<Provider store={store}>
            <Router><CveDetailsPage {...props} /></Router>
        </Provider>);

        expect(wrapper.find('InvalidObject')).toBeTruthy();
        wrapper.unmount();
    });

    it('Should process filterRulevalues and send as a prop to SystemsExposedPage', () => {
        let newState = { ...state };
        newState.cveDetails.payload = Immutable({
            data: {
                attributes: {
                    business_risk: "High",
                    business_risk_id: 3,
                    business_risk_text: null,
                    cvss2_metrics: null,
                    cvss2_score: null,
                    cvss3_metrics: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
                    cvss3_score: "6.500",
                    description: "A new domain bypass transient execution attack",
                    modified_date: "2020-07-20T10:37:20+00:00",
                    public_date: "2020-06-09T17:00:00+00:00",
                    redhat_url: "",
                    rules: [{
                        "associated_cves": [
                            "CVE-2019-11135"
                        ],
                        "change_risk": 3,
                        "description": "testDescription",
                        "generic": "sd",
                        "kbase_node_id": 4572391,
                        "playbook_count": 1,
                        "reboot_required": false,
                        "rule_id": "testID",
                        "summary": "testSummary"
                    }],
                    secondary_url: "",
                    status: "In-Review",
                    status_id: 1,
                    status_text: null,
                    synopsis: "CVE-2020-0543",
                    systems_status_detail: '',
                    systems_status_divergent: 73
                }
            }
        });
        useSelector.mockImplementation(callback => {
            return callback({ CVEDetailsPageStore: newState });
        });

        const wrapper = mountWithIntl(<Provider store={store}>
            <Router><CveDetailsPage {...props} /></Router>
        </Provider>)
        const props = wrapper.find('SystemsExposedTable').props();
        expect(props.filterRuleValues).toEqual([{ value: 'testID', label: 'testDescription' }]);
    });
});
