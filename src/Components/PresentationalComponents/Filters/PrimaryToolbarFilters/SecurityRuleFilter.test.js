import securityRuleFilter from './SecurityRuleFilter'

describe('SecurityRuleFilter', () => {
    const applyMock = jest.fn();

    it('Should render the security option items', () => {
        const options = [ 
            { label: 'All', value: 'all' },
            { label: 'Has security rule', value: 'true' },
            { label: 'Does not have security rule', value: 'false' }
        ]
  
        const comp = securityRuleFilter(applyMock, '')
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should render the dynamic security option items', () => {
        const dynamic = [
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' },

        ]
        const options = [ 
            { label: 'All', value: 'all' },
            { label: 'Has security rule', value: 'true' },
            { label: 'Does not have security rule', value: 'false' },
            { label: 'security rule 1', value: '1' },
            { label: 'security rule 2', value: '2' }
        ]
  
        const comp = securityRuleFilter(applyMock, '', dynamic)
        expect(comp.filterValues.items).toStrictEqual(options)
    })

    it('Should use default currentValue all', () => {
        let comp = securityRuleFilter(applyMock, '')
        expect(comp.filterValues.value).toBe('all')

        comp = securityRuleFilter(applyMock, undefined)
        expect(comp.filterValues.value).toBe('all')

        comp = securityRuleFilter(applyMock, '5')
        expect(comp.filterValues.value).toBe('all')

    })

    it('Should use the passed currentValue ', () => {
        let currentFilter = { security_rule: 'last7' }
        let comp = securityRuleFilter(applyMock, currentFilter)
        expect(comp.filterValues.value).toBe('last7')
    })

    it('Should call apply with params', () => {
        let comp = securityRuleFilter(applyMock, '1')
        comp.filterValues.onChange('event', 'all')
        expect(applyMock).toBeCalledWith({"page": 1, "security_rule": ""})

        comp.filterValues.onChange('event', '')
        expect(applyMock).toBeCalledWith({"page": 1, "security_rule": ""})

    })

})
